[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "QTM 350: Data Science Computing",
    "section": "",
    "text": "This course equips students with computing skills and knowledge for data science applications. Students will gain knowledge foundations and hands-on experience with technologies such as Version Control, Project Collaboration, Data Structures and Algorithms. Prospective data scientists, statisticians, and other quantitative professionals will learn computational foundations to efficiently utilize data, data structures, and algorithms for data science.",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "index.html#course-description",
    "href": "index.html#course-description",
    "title": "QTM 350: Data Science Computing",
    "section": "",
    "text": "This course equips students with computing skills and knowledge for data science applications. Students will gain knowledge foundations and hands-on experience with technologies such as Version Control, Project Collaboration, Data Structures and Algorithms. Prospective data scientists, statisticians, and other quantitative professionals will learn computational foundations to efficiently utilize data, data structures, and algorithms for data science.",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "index.html#instructor-and-tas",
    "href": "index.html#instructor-and-tas",
    "title": "QTM 350: Data Science Computing",
    "section": "Instructor and TAs",
    "text": "Instructor and TAs\n\nInstructor: Professor Davi Moreira\n\nEmail: davi.moreira@emory.edu\nOffice hours: Tuesdays, 9:15am - 10:15am, or by appointment\n\nZoom link in your Course Canvas Page.\n\n\n\n\nTeaching Assistant: Michael Cao\n\nEmail: michael.cao@emory.edu\nOffice Hours: Mondays, 6-7 pm\n\nZoom link in your Course Canvas Page.",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "index.html#learning-outcomes",
    "href": "index.html#learning-outcomes",
    "title": "QTM 350: Data Science Computing",
    "section": "Learning Outcomes",
    "text": "Learning Outcomes\nBy the end of this course, students will be able to:\n\nDemonstrate proficiency in data science project collaboration and version control.\nUtilize advanced data storage, manipulation, and querying.\nHigh-level understanding of data structures, and algorithms.\nCritically navigate the emergent trends in data science computing.",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "index.html#objectives",
    "href": "index.html#objectives",
    "title": "QTM 350: Data Science Computing",
    "section": "Objectives",
    "text": "Objectives\n\nConceptual Understanding: To provide students with a foundational grasp of data structures and algorithms.\nTechnical Proficiency: To equip students with practical skills in version control, Python programming, data structures, and algorithms enabling them to execute data manipulation and analysis tasks proficiently.\nCritical Integrated Learning: To offer a holistic educational experience that combines theoretical learning with practice, ensuring students can apply their knowledge to real-world projects and foster an awareness of emerging trends in the data science computing landscape.\n\n\nCourse Infra-structure\nCourse Website: This class website will be used throughout the course and should be checked on a regular basis for lecture materials and required readings.\nCanvas: The course Canvas site http://canvas.emory.edu should be checked on a regular basis for announcements and course material..",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "schedule.html",
    "href": "schedule.html",
    "title": "Schedule",
    "section": "",
    "text": "Week\nTopic\nTitle\nDate\n\n\n\n\nWeek 01\nTopic 01\nIntroduction, Syllabus and Set up\nJan 18\n\n\nWeek 02\nTopic 01\nIntroduction, Syllabus and Set up\nJan 23\n\n\nWeek 02\nTopic 02\nComputational Literacy, Command Line, and Version Control\nJan 25\n\n\nWeek 03\nTopic 02\nComputational Literacy, Command Line, and Version Control\nJan 30\n\n\nWeek 03\nTopic 02\nComputational Literacy, Command Line, and Version Control\nFeb 1\n\n\nWeek 04\nTopic 02\nComputational Literacy, Command Line, and Version Control\nFeb 6\n\n\nWeek 04\nTopic 02\nComputational Literacy, Command Line, and Version Control\nFeb 8\n\n\nWeek 05\nTopic 02\nComputational Literacy, Command Line, and Version Control\nFeb 13\n\n\nWeek 05\nTopic 02\nComputational Literacy, Command Line, and Version Control\nFeb 15\n\n\nWeek 06\nTopic 03\nPython essentials\nFeb 20\n\n\nWeek 06\nTopic 03\nPython essentials\nFeb 22\n\n\nWeek 07\nTopic 03\nPython essentials\nFeb 27\n\n\nWeek 07\nTopic 03\nPython essentials\nFeb 29\n\n\nWeek 08\nTopic 03\nPython essentials\nMar 5\n\n\nWeek 08\nTopic 03\nPython essentials\nMar 7\n\n\nWeek 09\n-\nSpring Break (no classes, no office hours)\nMar 12\n\n\nWeek 09\n-\nSpring Break (no classes, no office hours)\nMar 14\n\n\nWeek 10\nTopic 03\nPython essentials\nMar 19\n\n\nWeek 10\nTopic 03\nPython essentials\nMar 21\n\n\nWeek 11\nTopic 03\nPython essentials\nMar 26\n\n\nWeek 11\nTopic 03\nPython essentials\nMar 28\n\n\nWeek 12\nTopic 03\nPython essentials\nApr 2\n\n\nWeek 12\nTopic 03\nPython essentials\nApr 4\n\n\nWeek 13\nTopic 03\nPython essentials\nApr 9\n\n\nWeek 13\nTopic 04\nAlgorithms and Data Structures\nApr 11\n\n\nWeek 14\nTopic 04\nAlgorithms and Data Structures\nApr 16\n\n\nWeek 14\nTopic 04\nAlgorithms and Data Structures\nApr 18\n\n\nWeek 15\nTopic 04\nAlgorithms and Data Structures\nApr 23\n\n\nWeek 15\nTopic 04\nAlgorithms and Data Structures, and Course Review\nApr 25",
    "crumbs": [
      "Schedule"
    ]
  },
  {
    "objectID": "problem_sets/ps01/ps01.html",
    "href": "problem_sets/ps01/ps01.html",
    "title": "Problem Set 1",
    "section": "",
    "text": "Github Classroom Link"
  },
  {
    "objectID": "problem_sets/ps01/ps01.html#materials",
    "href": "problem_sets/ps01/ps01.html#materials",
    "title": "Problem Set 1",
    "section": "",
    "text": "Github Classroom Link"
  },
  {
    "objectID": "slides/slides-topic-02-02.html",
    "href": "slides/slides-topic-02-02.html",
    "title": " QTM 350: Data Science Computing ",
    "section": "",
    "text": "Computational Literacy\n\nBinary and Hexadecimal numbers\nCharacters, ASCII, Unicode\nHigh vrs low level programming languages\nCompiled vs interpreted languages\n\n\n\n\nCommand Line\n\nShell basics\nHelp!\nNavigating your system\nManaging your files\nWorking with text files\nRedirects, pipes, and loops\nScripting\n\n\n\n\nVersion Control\n\nData Science Workflow\nReproducibility\nGit and GitHub\n\n\n\n\n\n\n\n\nthis lecture draws on materials from Simon Munzert Intro to Data Science."
  },
  {
    "objectID": "slides/slides-topic-02-02.html#topic-overview",
    "href": "slides/slides-topic-02-02.html#topic-overview",
    "title": " QTM 350: Data Science Computing ",
    "section": "Topic Overview",
    "text": "Topic Overview\n\n\n\nComputational Literacy\n\nBinary and Hexadecimal numbers\nCharacters, ASCII, Unicode\nHigh vrs low level programming languages\nCompiled vs interpreted languages\n\n\n\n\nCommand Line\n\nShell basics\nHelp!\nNavigating your system\nManaging your files\nWorking with text files\nRedirects, pipes, and loops\nScripting\n\n\n\n\nVersion Control\n\nData Science Workflow\nReproducibility\nGit and GitHub\n\n\n\n\n\n\n\n\nthis lecture draws on materials from Simon Munzert Intro to Data Science."
  },
  {
    "objectID": "slides/slides-topic-02-02.html#a-computer-in-a-nutshell",
    "href": "slides/slides-topic-02-02.html#a-computer-in-a-nutshell",
    "title": " QTM 350: Data Science Computing ",
    "section": "A computer in a nutshell",
    "text": "A computer in a nutshell\n\n\n\n\nCredit Dave Kerr\n\n\n\n\n\nThe operating system (OS) is system software that interfaces with (and manages access to) a computer’s hardware. It also provides software resources.\nThe OS is divided into the kernel and user space.\nThe kernel is the core of the OS. It’s responsible for interfacing with hardware (drivers), managing resources etc. Running software in the kernel is extremely sensitive! That’s why users are kept away from it.\nThe user space provides an interface for users, who can run programs/applications on the machine. Hardware access of programs (e.g., memory usage) is managed by the kernel. Programs in user space are essentially in sandboxes, which sets a limit to how much damage they can do."
  },
  {
    "objectID": "slides/slides-topic-02-02.html#a-computer-in-a-nutshell-1",
    "href": "slides/slides-topic-02-02.html#a-computer-in-a-nutshell-1",
    "title": " QTM 350: Data Science Computing ",
    "section": "A computer in a nutshell",
    "text": "A computer in a nutshell\n\n\n\n\n\n\n\n\n\n\n\n\n\nCredit Dave Kerr/Kkchaudhary11\n\n\n\n\nThe shell is just a general name for any user space program that allows access to resources in the system, via some kind of interface.\nShells come in many different flavours but are generally provided to aid a human operator in accessing the system. This could be interactively, by typing at a terminal, or via scripts, which are files that contain a sequence of commands.\nModern computers use graphical user interfaces (GUIs) as the standard tool for human-computer interaction.\nWhy “kernel” and “shell”? The kernel is the soft, edible part of a nut or seed, which is surrounded by a shell to protect it. Useful metaphor, no?"
  },
  {
    "objectID": "slides/slides-topic-02-02.html#interacting-with-the-shell",
    "href": "slides/slides-topic-02-02.html#interacting-with-the-shell",
    "title": " QTM 350: Data Science Computing ",
    "section": "Interacting with the shell",
    "text": "Interacting with the shell\n\n\n\n\n\n\n\n \n\n\nCredit Dave Kerr/Rama/Musée Bolo/ClickRick\n\n\n\n\nThings are still a bit more complicated.\nWe’re not directly interacting with the “shell” but using a terminal.\nA terminal is just a program that reads input from the keyboard, passes that input to another program, and displays the results on the screen.\nA shell program on its own does not do this - it requires a terminal as an interface.\nWhy “terminal”? Back in the old days (even before computer screen existed), terminal machines (hardware!) were used to let humans interface with large machines (“mainframes”). Often many terminals were connected to a single machine.\nWhen you want to work with a computer in a data center (or remotely ~ cloud computing), you’ll still do pretty much the same."
  },
  {
    "objectID": "slides/slides-topic-02-02.html#interacting-with-the-shell-1",
    "href": "slides/slides-topic-02-02.html#interacting-with-the-shell-1",
    "title": " QTM 350: Data Science Computing ",
    "section": "Interacting with the shell",
    "text": "Interacting with the shell\n\n\n\n\n\n\n\n\nCredit Dave Kerr\n\n\n\nTerminals are really quite simple - they’re just interfaces.\nThe first thing that a terminal program will do is run a shell program - a program that we can use to operate the computer.\nBack to the shell: the shell usually takes input\n(a) interactively from the user via the terminal's **command line**.\n(b) executes scripts (without command line).\nIn interactive mode the shell then returns output\n(a) to the terminal where it is printed/shown.\n(b) to files or other locations.\nThe command line (or command prompt) represents what is shown and entered in the terminal. They can be customized (e.g., with color highlighting) to make interaction more convenient."
  },
  {
    "objectID": "slides/slides-topic-02-02.html#shell-variants",
    "href": "slides/slides-topic-02-02.html#shell-variants",
    "title": " QTM 350: Data Science Computing ",
    "section": "Shell variants",
    "text": "Shell variants\n\n\n\nLeft: Command Prompt, Right: Bash    Left: C Shell, Right: more shells     Credit Read-back spider/Dave Kerr\n\n\n\n\nIt is important to note that there are many different shell programs, and they differ in terms of functionality.\nOn most Unix-like systems, the default shell is a program called bash, which stands for “Bourne Again Shell”.\nOther examples are the Z Shell (or zsh; default on MacOS), Windows Command Prompt (cmd.exe, the default CLI on MS Windows), Windows PowerShell, C Shell, and many more.\nWhen a terminal opens, it will immediately start the user’s preferred shell program. (This can be changed.)"
  },
  {
    "objectID": "slides/slides-topic-02-02.html#why-bother-with-the-shell-1",
    "href": "slides/slides-topic-02-02.html#why-bother-with-the-shell-1",
    "title": " QTM 350: Data Science Computing ",
    "section": "Why bother with the shell?",
    "text": "Why bother with the shell?\n\n\n\n\nWhy using this…\n\n\n\n\n\n\n\n\n\n… instead of this?"
  },
  {
    "objectID": "slides/slides-topic-02-02.html#why-bother-with-the-shell-2",
    "href": "slides/slides-topic-02-02.html#why-bother-with-the-shell-2",
    "title": " QTM 350: Data Science Computing ",
    "section": "Why bother with the shell?",
    "text": "Why bother with the shell?\n\nSpeed. Typing is fast: A skilled shell user can manipulate a system at dazzling speeds just using a keyboard. Typing commands is generally much faster than exploring through user interfaces with a mouse.\nPower. Both for executing commands and for fixing problems. There are some things you just can’t do in an IDE or GUI. It also avoids memory complications associated with certain applications and/or IDEs.\nReproducibility. Scripting is reproducible, while clicking is not.\nPortability. A shell can be used to interface to almost any type of computer, from a mainframe to a Raspberry Pi, in a very similar way. The shell is often the only game in town for high performance computing (interacting with servers and super computers).\nAutomation. Shells are programmable: Working in the shell allows you to program workflows, that is create scripts to automate time-consuming or repetitive processes.\nBecome a marketable data scientist. Modern programming is often polyglot. The shell provides a common interface for tooling. Modern solutions are often built to run in containers on Linux. In this environment shell knowledge has become very valuable. In short, the shell is having a renaissance in the age of data science."
  },
  {
    "objectID": "slides/slides-topic-02-02.html#the-unix-philosophy-1",
    "href": "slides/slides-topic-02-02.html#the-unix-philosophy-1",
    "title": " QTM 350: Data Science Computing ",
    "section": "The Unix philosophy",
    "text": "The Unix philosophy\nThe shell tools that we’re going to be using have their roots in the Unix family of operating systems originally developed at Bells Labs in the 1970s.\nBesides paying homage, acknowledging the Unix lineage is important because these tools still embody the “Unix philosophy”:\n\nDo One Thing And Do It Well\n\n\nBy pairing and chaining well-designed individual components, we can build powerful and much more complex larger systems.\nYou can see why the Unix philosophy is also referred to as “minimalist and modular”.\nAgain, this philosophy is very clearly expressed in the design and functionality of the Unix shell."
  },
  {
    "objectID": "slides/slides-topic-02-02.html#things-to-use-the-shell-for",
    "href": "slides/slides-topic-02-02.html#things-to-use-the-shell-for",
    "title": " QTM 350: Data Science Computing ",
    "section": "Things to use the shell for",
    "text": "Things to use the shell for\n\nVersion control with Git\nRenaming and moving files en masse\nFinding things on your computer\nCombining and manipulating PDFs\nInstalling and updating software\nScheduling tasks\nMonitoring system resources\nConnecting to cloud environments\nRunning analyses (“jobs”) on super computers\netc."
  },
  {
    "objectID": "slides/slides-topic-02-02.html#shell-first-look",
    "href": "slides/slides-topic-02-02.html#shell-first-look",
    "title": " QTM 350: Data Science Computing ",
    "section": "Shell: First look",
    "text": "Shell: First look\nLet’s open up our shell.\nA convenient way to do this is through RStudio’s built-in Terminal.\nHitting Shift+Alt+T (or Shift+⌥+R on a Mac) will cause a “Terminal” tab to open up next to the “Console” tab.\nYour system default shell is loaded. To find out what that is, type:\necho $SHELL\n\n\n\n/bin/zsh\n\n\n\nIt’s Z bash in my case.\n\nOf course, it’s always possible to open up the Shell directly if you prefer. It’s your turn!\n\nLinux\nMac\nWindows"
  },
  {
    "objectID": "slides/slides-topic-02-02.html#shell-first-look-1",
    "href": "slides/slides-topic-02-02.html#shell-first-look-1",
    "title": " QTM 350: Data Science Computing ",
    "section": "Shell: First look",
    "text": "Shell: First look\nYou should see something like:\n username@hostname:~$\nThis is shell-speak for: “Who am I and where am I?” \n\nusername denotes a specific user (one of potentially many on this computer).\n@hostname denotes the name of the computer or server.\n:~ denotes the directory path (where ~ signifies the user’s home directory).\n$ (or maybe %) denotes the start of the command prompt.\n\n(For a special “superuser” called root, the dollar sign will change to a #)."
  },
  {
    "objectID": "slides/slides-topic-02-02.html#useful-keyboard-shortcuts",
    "href": "slides/slides-topic-02-02.html#useful-keyboard-shortcuts",
    "title": " QTM 350: Data Science Computing ",
    "section": "Useful keyboard shortcuts",
    "text": "Useful keyboard shortcuts\n\nTab completion.\nUse the ↑ (and ↓) keys to scroll through previous commands.\nCtrl+→ (and Ctrl+←) to skip whole words at a time.\nCtrl+a moves the cursor to the beginning of the line.\nCtrl+e moves the cursor to the end of the line.\nCtrl+k deletes everything to the right of the cursor.\nCtrl+u deletes everything to the left of the cursor.\nCtrl+Shift+c to copy and Ctrl+Shift+v to paste (or just ⌘+ c/v on a Mac).\nCtrl+l clears your terminal."
  },
  {
    "objectID": "slides/slides-topic-02-02.html#syntax-1",
    "href": "slides/slides-topic-02-02.html#syntax-1",
    "title": " QTM 350: Data Science Computing ",
    "section": "Syntax",
    "text": "Syntax\n\n\n All Bash commands have the same basic syntax:\n\ncommand option(s) argument(s)\n\nExamples: \n$ ls -lh ~/Documents/\n\n$ sort -u myfile.txt\n\n\nCommands \n\nYou don’t always need options or arguments.\nFor example:\n\n$ ls ~/Documents/ and $ ls -lh are both valid commands that will yield output.\n\n\n\n\nHowever, you always need a command."
  },
  {
    "objectID": "slides/slides-topic-02-02.html#syntax-2",
    "href": "slides/slides-topic-02-02.html#syntax-2",
    "title": " QTM 350: Data Science Computing ",
    "section": "Syntax",
    "text": "Syntax\n\n\n All Bash commands have the same basic syntax:\n\ncommand option(s) argument(s)\n\nExamples: \n$ ls `-lh` ~/Documents/\n\n$ sort `-u` myfile.txt\n\n\nOptions (also called Flags)\n\nStart with a dash.\nUsually one letter.\nMultiple options can be chained under a single dash.\n$ ls -l -a -h /var/log ## This works\n$ ls -lah /var/log ## So does this\nAn exception is with (rarer) options requiring two dashes.\n$ ls --group-directories-first --human-readable /var/log\nl: Use a long listing format. This option shows detailed information about the files and directories.\nh: With -l, print sizes in human-readable format (e.g., KB, MB).\nu: Unique, sort will write only one of two lines that compare equal. It filters out the duplicate entries in the output.\nThink it’s difficult to memorize what the individual letters stand for? You’re totally right."
  },
  {
    "objectID": "slides/slides-topic-02-02.html#syntax-3",
    "href": "slides/slides-topic-02-02.html#syntax-3",
    "title": " QTM 350: Data Science Computing ",
    "section": "Syntax",
    "text": "Syntax\n\n\n All Bash commands have the same basic syntax:\n\ncommand option(s) argument(s)\n\nExamples: \n$ ls -lh `~/Documents/`\n\n$ sort -u `myfile.txt`\n\nArguments \n\nTell the command what to operate on.\nTotally depends on the command what legit inputs are.\nCan be a file, path, a set of files and folders, a string, and more\nSometimes more than just one argument is needed:\n$ mv figs/cat.JPG best-figs/cat.jpeg"
  },
  {
    "objectID": "slides/slides-topic-02-02.html#multiple-ways-to-get-help",
    "href": "slides/slides-topic-02-02.html#multiple-ways-to-get-help",
    "title": " QTM 350: Data Science Computing ",
    "section": "Multiple ways to get help",
    "text": "Multiple ways to get help\n\n\n\nThe man tool can be used to look at the manual page for a topic.\nThe man pages are grouped into sections, we can see them with man man.\nThe tldr tool shows a very short description of a tool, which covers the most common use cases only.\nThe cht.sh website can be used directly from the shell to get help on tools or even ask specific questions. (Or install cheat.)\nFor more info on how to get help, see here.\nActually, typing man bash and reading/skimming the whole thing might be a good start to learn basic command line speak."
  },
  {
    "objectID": "slides/slides-topic-02-02.html#getting-help-with-man",
    "href": "slides/slides-topic-02-02.html#getting-help-with-man",
    "title": " QTM 350: Data Science Computing ",
    "section": "Getting help with man",
    "text": "Getting help with man\n\nThe man command (“manual pages”) is your friend if you need help.\nman ls\n\n\n\nLS(1)                       General Commands Manual                      LS(1)\n\nN\bNA\bAM\bME\bE\n     l\bls\bs – list directory contents\n\nS\bSY\bYN\bNO\bOP\bPS\bSI\bIS\bS\n     l\bls\bs [-\b-@\b@A\bAB\bBC\bCF\bFG\bGH\bHI\bIL\bLO\bOP\bPR\bRS\bST\bTU\bUW\bWa\bab\bbc\bcd\bde\bef\bfg\bgh\bhi\bik\bkl\blm\bmn\bno\bop\bpq\bqr\brs\bst\btu\buv\bvw\bwx\bxy\by1\b1%\b%,\b,] [-\b--\b-c\bco\bol\blo\bor\br=_\bw_\bh_\be_\bn]\n        [-\b-D\bD _\bf_\bo_\br_\bm_\ba_\bt] [_\bf_\bi_\bl_\be _\b._\b._\b.]\n\nD\bDE\bES\bSC\bCR\bRI\bIP\bPT\bTI\bIO\bON\bN\n     For each operand that names a _\bf_\bi_\bl_\be of a type other than directory, l\bls\bs\n     displays its name as well as any requested, associated information.  For\n     each operand that names a _\bf_\bi_\bl_\be of type directory, l\bls\bs displays the names\n     of files contained within that directory, as well as any requested,\n     associated information.\n\n     If no operands are given, the contents of the current directory are\n     displayed.  If more than one operand is given, non-directory operands are\n     displayed first; directory and non-directory operands are sorted\n     separately and in lexicographical order.\n\n     The following options are available:\n\n     -\b-@\b@      Display extended attribute keys and sizes in long (-\b-l\bl) output.\n\n     -\b-A\bA      Include directory entries whose names begin with a dot (‘_\b.’)\n             except for _\b. and _\b._\b..  Automatically set for the super-user unless\n             -\b-I\bI is specified.\n\n     -\b-B\bB      Force printing of non-printable characters (as defined by\n             ctype(3) and current locale settings) in file names as \\_\bx_\bx_\bx,\n             where _\bx_\bx_\bx is the numeric value of the character in octal.  This\n             option is not defined in IEEE Std 1003.1-2008 (“POSIX.1”).\n\n     -\b-C\bC      Force multi-column output; this is the default when output is to\n             a terminal.\n\n     -\b-D\bD _\bf_\bo_\br_\bm_\ba_\bt\n             When printing in the long (-\b-l\bl) format, use _\bf_\bo_\br_\bm_\ba_\bt to format the\n             date and time output.  The argument _\bf_\bo_\br_\bm_\ba_\bt is a string used by\n             strftime(3).  Depending on the choice of format string, this may\n             result in a different number of columns in the output.  This\n             option overrides the -\b-T\bT option.  This option is not defined in\n             IEEE Std 1003.1-2008 (“POSIX.1”).\n\n     -\b-F\bF      Display a slash (‘/’) immediately after each pathname that is a\n             directory, an asterisk (‘*’) after each that is executable, an at\n             sign (‘@’) after each symbolic link, an equals sign (‘=’) after\n             each socket, a percent sign (‘%’) after each whiteout, and a\n             vertical bar (‘|’) after each that is a FIFO.\n\n     -\b-G\bG      Enable colorized output.  This option is equivalent to defining\n             CLICOLOR or COLORTERM in the environment and setting\n             -\b--\b-c\bco\bol\blo\bor\br=_\ba_\bu_\bt_\bo.  (See below.)  This functionality can be compiled\n             out by removing the definition of COLORLS.  This option is not\n             defined in IEEE Std 1003.1-2008 (“POSIX.1”).\n\n     -\b-H\bH      Symbolic links on the command line are followed.  This option is\n             assumed if none of the -\b-F\bF, -\b-d\bd, or -\b-l\bl options are specified.\n\n     -\b-I\bI      Prevent -\b-A\bA from being automatically set for the super-user.  This\n             option is not defined in IEEE Std 1003.1-2008 (“POSIX.1”).\n\n     -\b-L\bL      Follow all symbolic links to final target and list the file or\n             directory the link references rather than the link itself.  This\n             option cancels the -\b-P\bP option.\n\n     -\b-O\bO      Include the file flags in a long (-\b-l\bl) output.  This option is\n             incompatible with IEEE Std 1003.1-2008 (“POSIX.1”).  See\n             chflags(1) for a list of file flags and their meanings.\n\n     -\b-P\bP      If argument is a symbolic link, list the link itself rather than\n             the object the link references.  This option cancels the -\b-H\bH and\n             -\b-L\bL options.\n\n     -\b-R\bR      Recursively list subdirectories encountered.\n\n     -\b-S\bS      Sort by size (largest file first) before sorting the operands in\n             lexicographical order.\n\n     -\b-T\bT      When printing in the long (-\b-l\bl) format, display complete time\n             information for the file, including month, day, hour, minute,\n             second, and year.  The -\b-D\bD option gives even more control over the\n             output format.  This option is not defined in IEEE Std\n             1003.1-2008 (“POSIX.1”).\n\n     -\b-U\bU      Use time when file was created for sorting or printing.  This\n             option is not defined in IEEE Std 1003.1-2008 (“POSIX.1”).\n\n     -\b-W\bW      Display whiteouts when scanning directories.  This option is not\n             defined in IEEE Std 1003.1-2008 (“POSIX.1”).\n\n     -\b-a\ba      Include directory entries whose names begin with a dot (‘_\b.’).\n\n     -\b-b\bb      As -\b-B\bB, but use C escape codes whenever possible.  This option is\n             not defined in IEEE Std 1003.1-2008 (“POSIX.1”).\n\n     -\b-c\bc      Use time when file status was last changed for sorting or\n             printing.\n\n     -\b--\b-c\bco\bol\blo\bor\br=_\bw_\bh_\be_\bn\n             Output colored escape sequences based on _\bw_\bh_\be_\bn, which may be set\n             to either a\bal\blw\bwa\bay\bys\bs, a\bau\but\bto\bo, or n\bne\bev\bve\ber\br.\n\n             a\bal\blw\bwa\bay\bys\bs will make l\bls\bs always output color.  If TERM is unset or set\n             to an invalid terminal, then l\bls\bs will fall back to explicit ANSI\n             escape sequences without the help of termcap(5).  a\bal\blw\bwa\bay\bys\bs is the\n             default if -\b--\b-c\bco\bol\blo\bor\br is specified without an argument.\n\n             a\bau\but\bto\bo will make l\bls\bs output escape sequences based on termcap(5),\n             but only if stdout is a tty and either the -\b-G\bG flag is specified\n             or the COLORTERM environment variable is set and not empty.\n\n             n\bne\bev\bve\ber\br will disable color regardless of environment variables.\n             n\bne\bev\bve\ber\br is the default when neither -\b--\b-c\bco\bol\blo\bor\br nor -\b-G\bG is specified.\n\n             For compatibility with GNU coreutils, l\bls\bs supports y\bye\bes\bs or f\bfo\bor\brc\bce\be as\n             equivalent to a\bal\blw\bwa\bay\bys\bs, n\bno\bo or n\bno\bon\bne\be as equivalent to n\bne\bev\bve\ber\br, and t\btt\bty\by\n             or i\bif\bf-\b-t\btt\bty\by as equivalent to a\bau\but\bto\bo.\n\n     -\b-d\bd      Directories are listed as plain files (not searched recursively).\n\n     -\b-e\be      Print the Access Control List (ACL) associated with the file, if\n             present, in long (-\b-l\bl) output.\n\n     -\b-f\bf      Output is not sorted.  This option turns on -\b-a\ba.  It also negates\n             the effect of the -\b-r\br, -\b-S\bS and -\b-t\bt options.  As allowed by IEEE Std\n             1003.1-2008 (“POSIX.1”), this option has no effect on the -\b-d\bd, -\b-l\bl,\n             -\b-R\bR and -\b-s\bs options.\n\n     -\b-g\bg      This option has no effect.  It is only available for\n             compatibility with 4.3BSD, where it was used to display the group\n             name in the long (-\b-l\bl) format output.  This option is incompatible\n             with IEEE Std 1003.1-2008 (“POSIX.1”).\n\n     -\b-h\bh      When used with the -\b-l\bl option, use unit suffixes: Byte, Kilobyte,\n             Megabyte, Gigabyte, Terabyte and Petabyte in order to reduce the\n             number of digits to four or fewer using base 2 for sizes.  This\n             option is not defined in IEEE Std 1003.1-2008 (“POSIX.1”).\n\n     -\b-i\bi      For each file, print the file's file serial number (inode\n             number).\n\n     -\b-k\bk      This has the same effect as setting environment variable\n             BLOCKSIZE to 1024, except that it also nullifies any -\b-h\bh options\n             to its left.\n\n     -\b-l\bl      (The lowercase letter “ell”.) List files in the long format, as\n             described in the _\bT_\bh_\be _\bL_\bo_\bn_\bg _\bF_\bo_\br_\bm_\ba_\bt subsection below.\n\n     -\b-m\bm      Stream output format; list files across the page, separated by\n             commas.\n\n     -\b-n\bn      Display user and group IDs numerically rather than converting to\n             a user or group name in a long (-\b-l\bl) output.  This option turns on\n             the -\b-l\bl option.\n\n     -\b-o\bo      List in long format, but omit the group id.\n\n     -\b-p\bp      Write a slash (‘/’) after each filename if that file is a\n             directory.\n\n     -\b-q\bq      Force printing of non-graphic characters in file names as the\n             character ‘?’; this is the default when output is to a terminal.\n\n     -\b-r\br      Reverse the order of the sort.\n\n     -\b-s\bs      Display the number of blocks used in the file system by each\n             file.  Block sizes and directory totals are handled as described\n             in _\bT_\bh_\be _\bL_\bo_\bn_\bg _\bF_\bo_\br_\bm_\ba_\bt subsection below, except (if the long format\n             is not also requested) the directory totals are not output when\n             the output is in a single column, even if multi-column output is\n             requested.  (-\b-l\bl) format, display complete time information for\n             the file, including month, day, hour, minute, second, and year.\n             The -\b-D\bD option gives even more control over the output format.\n             This option is not defined in IEEE Std 1003.1-2008 (“POSIX.1”).\n\n     -\b-t\bt      Sort by descending time modified (most recently modified first).\n             If two files have the same modification timestamp, sort their\n             names in ascending lexicographical order.  The -\b-r\br option reverses\n             both of these sort orders.\n\n             Note that these sort orders are contradictory: the time sequence\n             is in descending order, the lexicographical sort is in ascending\n             order.  This behavior is mandated by IEEE Std 1003.2 (“POSIX.2”).\n             This feature can cause problems listing files stored with\n             sequential names on FAT file systems, such as from digital\n             cameras, where it is possible to have more than one image with\n             the same timestamp.  In such a case, the photos cannot be listed\n             in the sequence in which they were taken.  To ensure the same\n             sort order for time and for lexicographical sorting, set the\n             environment variable LS_SAMESORT or use the -\b-y\by option.  This\n             causes l\bls\bs to reverse the lexicographical sort order when sorting\n             files with the same modification timestamp.\n\n     -\b-u\bu      Use time of last access, instead of time of last modification of\n             the file for sorting (-\b-t\bt) or long printing (-\b-l\bl).\n\n     -\b-v\bv      Force unedited printing of non-graphic characters; this is the\n             default when output is not to a terminal.\n\n     -\b-w\bw      Force raw printing of non-printable characters.  This is the\n             default when output is not to a terminal.  This option is not\n             defined in IEEE Std 1003.1-2001 (“POSIX.1”).\n\n     -\b-x\bx      The same as -\b-C\bC, except that the multi-column output is produced\n             with entries sorted across, rather than down, the columns.\n\n     -\b-y\by      When the -\b-t\bt option is set, sort the alphabetical output in the\n             same order as the time output.  This has the same effect as\n             setting LS_SAMESORT.  See the description of the -\b-t\bt option for\n             more details.  This option is not defined in IEEE Std 1003.1-2001\n             (“POSIX.1”).\n\n     -\b-%\b%      Distinguish dataless files and directories with a '%' character\n             in long (-\b-l\bl) output, and don't materialize dataless directories\n             when listing them.\n\n     -\b-1\b1      (The numeric digit “one”.) Force output to be one entry per line.\n             This is the default when output is not to a terminal.\n\n     -\b-,      (Comma) When the -\b-l\bl option is set, print file sizes grouped and\n             separated by thousands using the non-monetary separator returned\n             by localeconv(3), typically a comma or period.  If no locale is\n             set, or the locale does not have a non-monetary separator, this\n             option has no effect.  This option is not defined in IEEE Std\n             1003.1-2001 (“POSIX.1”).\n\n     The -\b-1\b1, -\b-C\bC, -\b-x\bx, and -\b-l\bl options all override each other; the last one\n     specified determines the format used.\n\n     The -\b-c\bc, -\b-u\bu, and -\b-U\bU options all override each other; the last one\n     specified determines the file time used.\n\n     The -\b-S\bS and -\b-t\bt options override each other; the last one specified\n     determines the sort order used.\n\n     The -\b-B\bB, -\b-b\bb, -\b-w\bw, and -\b-q\bq options all override each other; the last one\n     specified determines the format used for non-printable characters.\n\n     The -\b-H\bH, -\b-L\bL and -\b-P\bP options all override each other (either partially or\n     fully); they are applied in the order specified.\n\n     By default, l\bls\bs lists one entry per line to standard output; the\n     exceptions are to terminals or when the -\b-C\bC or -\b-x\bx options are specified.\n\n     File information is displayed with one or more ⟨blank⟩s separating the\n     information associated with the -\b-i\bi, -\b-s\bs, and -\b-l\bl options.\n\n   T\bTh\bhe\be L\bLo\bon\bng\bg F\bFo\bor\brm\bma\bat\bt\n     If the -\b-l\bl option is given, the following information is displayed for\n     each file: file mode, number of links, owner name, group name, number of\n     bytes in the file, abbreviated month, day-of-month file was last\n     modified, hour file last modified, minute file last modified, and the\n     pathname.  If the file or directory has extended attributes, the\n     permissions field printed by the -\b-l\bl option is followed by a '@'\n     character.  Otherwise, if the file or directory has extended security\n     information (such as an access control list), the permissions field\n     printed by the -\b-l\bl option is followed by a '+' character.  If the -\b-%\b%\n     option is given, a '%' character follows the permissions field for\n     dataless files and directories, possibly replacing the '@' or '+'\n     character.\n\n     If the modification time of the file is more than 6 months in the past or\n     future, and the -\b-D\bD or -\b-T\bT are not specified, then the year of the last\n     modification is displayed in place of the hour and minute fields.\n\n     If the owner or group names are not a known user or group name, or the -\b-n\bn\n     option is given, the numeric ID's are displayed.\n\n     If the file is a character special or block special file, the device\n     number for the file is displayed in the size field.  If the file is a\n     symbolic link the pathname of the linked-to file is preceded by “-&gt;”.\n\n     The listing of a directory's contents is preceded by a labeled total\n     number of blocks used in the file system by the files which are listed as\n     the directory's contents (which may or may not include _\b. and _\b._\b. and other\n     files which start with a dot, depending on other options).\n\n     The default block size is 512 bytes.  The block size may be set with\n     option -\b-k\bk or environment variable BLOCKSIZE.  Numbers of blocks in the\n     output will have been rounded up so the numbers of bytes is at least as\n     many as used by the corresponding file system blocks (which might have a\n     different size).\n\n     The file mode printed under the -\b-l\bl option consists of the entry type and\n     the permissions.  The entry type character describes the type of file, as\n     follows:\n\n           -\b-     Regular file.\n           b\bb     Block special file.\n           c\bc     Character special file.\n           d\bd     Directory.\n           l\bl     Symbolic link.\n           p\bp     FIFO.\n           s\bs     Socket.\n           w\bw     Whiteout.\n\n     The next three fields are three characters each: owner permissions, group\n     permissions, and other permissions.  Each field has three character\n     positions:\n\n           1.   If r\br, the file is readable; if -\b-, it is not readable.\n\n           2.   If w\bw, the file is writable; if -\b-, it is not writable.\n\n           3.   The first of the following that applies:\n\n                      S\bS     If in the owner permissions, the file is not\n                            executable and set-user-ID mode is set.  If in the\n                            group permissions, the file is not executable and\n                            set-group-ID mode is set.\n\n                      s\bs     If in the owner permissions, the file is\n                            executable and set-user-ID mode is set.  If in the\n                            group permissions, the file is executable and\n                            setgroup-ID mode is set.\n\n                      x\bx     The file is executable or the directory is\n                            searchable.\n\n                      -\b-     The file is neither readable, writable,\n                            executable, nor set-user-ID nor set-group-ID mode,\n                            nor sticky.  (See below.)\n\n                These next two apply only to the third character in the last\n                group (other permissions).\n\n                      T\bT     The sticky bit is set (mode 1000), but not execute\n                            or search permission.  (See chmod(1) or\n                            sticky(7).)\n\n                      t\bt     The sticky bit is set (mode 1000), and is\n                            searchable or executable.  (See chmod(1) or\n                            sticky(7).)\n\n     The next field contains a plus (‘+’) character if the file has an ACL, or\n     a space (‘ ’) if it does not.  The l\bls\bs utility does not show the actual\n     ACL unless the -\b-e\be option is used in conjunction with the -\b-l\bl option.\n\nE\bEN\bNV\bVI\bIR\bRO\bON\bNM\bME\bEN\bNT\bT\n     The following environment variables affect the execution of l\bls\bs:\n\n     BLOCKSIZE           If this is set, its value, rounded up to 512 or down\n                         to a multiple of 512, will be used as the block size\n                         in bytes by the -\b-l\bl and -\b-s\bs options.  See _\bT_\bh_\be _\bL_\bo_\bn_\bg\n                         _\bF_\bo_\br_\bm_\ba_\bt subsection for more information.\n\n     CLICOLOR            Use ANSI color sequences to distinguish file types.\n                         See LSCOLORS below.  In addition to the file types\n                         mentioned in the -\b-F\bF option some extra attributes\n                         (setuid bit set, etc.) are also displayed.  The\n                         colorization is dependent on a terminal type with the\n                         proper termcap(5) capabilities.  The default “cons25”\n                         console has the proper capabilities, but to display\n                         the colors in an xterm(1), for example, the TERM\n                         variable must be set to “xterm-color”.  Other\n                         terminal types may require similar adjustments.\n                         Colorization is silently disabled if the output is\n                         not directed to a terminal unless the CLICOLOR_FORCE\n                         variable is defined or -\b--\b-c\bco\bol\blo\bor\br is set to “always”.\n\n     CLICOLOR_FORCE      Color sequences are normally disabled if the output\n                         is not directed to a terminal.  This can be\n                         overridden by setting this variable.  The TERM\n                         variable still needs to reference a color capable\n                         terminal however otherwise it is not possible to\n                         determine which color sequences to use.\n\n     COLORTERM           See description for CLICOLOR above.\n\n     COLUMNS             If this variable contains a string representing a\n                         decimal integer, it is used as the column position\n                         width for displaying multiple-text-column output.\n                         The l\bls\bs utility calculates how many pathname text\n                         columns to display based on the width provided.  (See\n                         -\b-C\bC and -\b-x\bx.)\n\n     LANG                The locale to use when determining the order of day\n                         and month in the long -\b-l\bl format output.  See\n                         environ(7) for more information.\n\n     LSCOLORS            The value of this variable describes what color to\n                         use for which attribute when colors are enabled with\n                         CLICOLOR or COLORTERM.  This string is a\n                         concatenation of pairs of the format _\bf_\bb, where _\bf is\n                         the foreground color and _\bb is the background color.\n\n                         The color designators are as follows:\n\n                               a\ba     black\n                               b\bb     red\n                               c\bc     green\n                               d\bd     brown\n                               e\be     blue\n                               f\bf     magenta\n                               g\bg     cyan\n                               h\bh     light grey\n                               A\bA     bold black, usually shows up as dark grey\n                               B\bB     bold red\n                               C\bC     bold green\n                               D\bD     bold brown, usually shows up as yellow\n                               E\bE     bold blue\n                               F\bF     bold magenta\n                               G\bG     bold cyan\n                               H\bH     bold light grey; looks like bright white\n                               x\bx     default foreground or background\n\n                         Note that the above are standard ANSI colors.  The\n                         actual display may differ depending on the color\n                         capabilities of the terminal in use.\n\n                         The order of the attributes are as follows:\n\n                               1.   directory\n                               2.   symbolic link\n                               3.   socket\n                               4.   pipe\n                               5.   executable\n                               6.   block special\n                               7.   character special\n                               8.   executable with setuid bit set\n                               9.   executable with setgid bit set\n                               10.  directory writable to others, with sticky\n                                    bit\n                               11.  directory writable to others, without\n                                    sticky bit\n\n                         The default is \"exfxcxdxbxegedabagacad\", i.e., blue\n                         foreground and default background for regular\n                         directories, black foreground and red background for\n                         setuid executables, etc.\n\n     LS_COLWIDTHS        If this variable is set, it is considered to be a\n                         colon-delimited list of minimum column widths.\n                         Unreasonable and insufficient widths are ignored\n                         (thus zero signifies a dynamically sized column).\n                         Not all columns have changeable widths.  The fields\n                         are, in order: inode, block count, number of links,\n                         user name, group name, flags, file size, file name.\n\n     LS_SAMESORT         If this variable is set, the -\b-t\bt option sorts the\n                         names of files with the same modification timestamp\n                         in the same sense as the time sort.  See the\n                         description of the -\b-t\bt option for more details.\n\n     TERM                The CLICOLOR and COLORTERM functionality depends on a\n                         terminal type with color capabilities.\n\n     TZ                  The timezone to use when displaying dates.  See\n                         environ(7) for more information.\n\nE\bEX\bXI\bIT\bT S\bST\bTA\bAT\bTU\bUS\bS\n     The l\bls\bs utility exits 0 on success, and &gt;0 if an error occurs.\n\nE\bEX\bXA\bAM\bMP\bPL\bLE\bES\bS\n     List the contents of the current working directory in long format:\n\n           $ ls -l\n\n     In addition to listing the contents of the current working directory in\n     long format, show inode numbers, file flags (see chflags(1)), and suffix\n     each filename with a symbol representing its file type:\n\n           $ ls -lioF\n\n     List the files in _\b/_\bv_\ba_\br_\b/_\bl_\bo_\bg, sorting the output such that the most\n     recently modified entries are printed first:\n\n           $ ls -lt /var/log\n\nC\bCO\bOM\bMP\bPA\bAT\bTI\bIB\bBI\bIL\bLI\bIT\bTY\bY\n     The group field is now automatically included in the long listing for\n     files in order to be compatible with the IEEE Std 1003.2 (“POSIX.2”)\n     specification.\n\nL\bLE\bEG\bGA\bAC\bCY\bY D\bDE\bES\bSC\bCR\bRI\bIP\bPT\bTI\bIO\bON\bN\n     In legacy mode, the -\b-f\bf option does not turn on the -\b-a\ba option and the -\b-g\bg,\n     -\b-n\bn, and -\b-o\bo options do not turn on the -\b-l\bl option.\n\n     Also, the -\b-o\bo option causes the file flags to be included in a long (-l)\n     output; there is no -\b-O\bO option.\n\n     When -\b-H\bH is specified (and not overridden by -\b-L\bL or -\b-P\bP) and a file argument\n     is a symlink that resolves to a non-directory file, the output will\n     reflect the nature of the link, rather than that of the file.  In legacy\n     operation, the output will describe the file.\n\n     For more information about legacy mode, see compat(5).\n\nS\bSE\bEE\bE A\bAL\bLS\bSO\bO\n     chflags(1), chmod(1), sort(1), xterm(1), localeconv(3), strftime(3),\n     strmode(3), compat(5), termcap(5), sticky(7), symlink(7)\n\nS\bST\bTA\bAN\bND\bDA\bAR\bRD\bDS\bS\n     With the exception of options -\b-g\bg, -\b-n\bn and -\b-o\bo, the l\bls\bs utility conforms to\n     IEEE Std 1003.1-2001 (“POSIX.1”) and IEEE Std 1003.1-2008 (“POSIX.1”).\n     The options -\b-B\bB, -\b-D\bD, -\b-G\bG, -\b-I\bI, -\b-T\bT, -\b-U\bU, -\b-W\bW, -\b-Z\bZ, -\b-b\bb, -\b-h\bh, -\b-w\bw, -\b-y\by and -\b-, are\n     non-standard extensions.\n\n     The ACL support is compatible with IEEE Std 1003.2c (“POSIX.2c”) Draft 17\n     (withdrawn).\n\nH\bHI\bIS\bST\bTO\bOR\bRY\bY\n     An l\bls\bs command appeared in Version 1 AT&T UNIX.\n\nB\bBU\bUG\bGS\bS\n     To maintain backward compatibility, the relationships between the many\n     options are quite complex.\n\n     The exception mentioned in the -\b-s\bs option description might be a feature\n     that was based on the fact that single-column output usually goes to\n     something other than a terminal.  It is debatable whether this is a\n     design bug.\n\n     IEEE Std 1003.2 (“POSIX.2”) mandates opposite sort orders for files with\n     the same timestamp when sorting with the -\b-t\bt option.\n\nmacOS 14.2                      August 31, 2020                     macOS 14.2"
  },
  {
    "objectID": "slides/slides-topic-02-02.html#getting-help-with-man-1",
    "href": "slides/slides-topic-02-02.html#getting-help-with-man-1",
    "title": " QTM 350: Data Science Computing ",
    "section": "Getting help with man",
    "text": "Getting help with man\n\n\n Manual pages are shown in the shell pager. Here are the essentials to navigate through contents presented in the pager:\n\nd - Scroll down half a page\nu - Scroll up half a page\nj / k - Scroll down or up a line. You can also use the arrow keys for this\nq - Quit\n/pattern - Search for text provided as “pattern”\nn - When searching, find the next occurrence\nN - When searching, find the previous occurrence\nThese and other man tricks are detailed in the help pages (hit “h” when you’re in the pager for an overview).\n\n\n\n\n\n\n\n\nRTFM\n\n\nAlways check the documentation!"
  },
  {
    "objectID": "slides/slides-topic-02-02.html#help-practice",
    "href": "slides/slides-topic-02-02.html#help-practice",
    "title": " QTM 350: Data Science Computing ",
    "section": "Help practice!",
    "text": "Help practice!\n\n\nIn your Terminal, access the man and explore the document. I want you to share with a colleague your first impression and five commands you found interesting.\nPlease present your own (first impression + five commands) and colleague (first impression and five commands) views in the lecture quiz!"
  },
  {
    "objectID": "slides/slides-topic-02-02.html#help-cheat-tldr-cheat.sh",
    "href": "slides/slides-topic-02-02.html#help-cheat-tldr-cheat.sh",
    "title": " QTM 350: Data Science Computing ",
    "section": "Help: cheat, tldr, cheat.sh",
    "text": "Help: cheat, tldr, cheat.sh\nThere are various other utilities which provide more readable summaries/cheatsheets of various commands. Those include\n\ncheat\ncheat.sh\ntldr\n\n\nThe first two need to be installed first. cheat.sh sheets are accessible via:\ncurl cheat.sh/ls  \n# List files one per line:\nls -1\n\n# List all files, including hidden files:\nls -a\n\n# List all files, with trailing `/` added to directory names:\nls -F\n\n# Long format list with size displayed using human readable units (KB, MB, GB):\nls -lh"
  },
  {
    "objectID": "slides/slides-topic-02-02.html#navigating-your-file-system-1",
    "href": "slides/slides-topic-02-02.html#navigating-your-file-system-1",
    "title": " QTM 350: Data Science Computing ",
    "section": "Navigating your file system",
    "text": "Navigating your file system\n\n\n\n\nWe’re all so used to a graphical user interface that switching to the shell can take some time to get used to.\nModern operating systems increasingly abstract away from underlying file systems (think about iOS, Android).\nFor data science operations it is key that you’re able to efficiently navigate your system to get information on files and folders.\nSome questions that will pop up:\n\nWhat is my home directory?\nIn which directory am I currently operating?\nWhere is my stuff?\nWhere do I want to put my stuff?\nHow do I navigate from here to there?"
  },
  {
    "objectID": "slides/slides-topic-02-02.html#navigation",
    "href": "slides/slides-topic-02-02.html#navigation",
    "title": " QTM 350: Data Science Computing ",
    "section": "Navigation",
    "text": "Navigation\n\nKey navigation commands are:\n\npwd to print (the current) working directory.\ncd to change directory.\n\n\npwd\n\n\n\n/Users/dcorde3/Library/CloudStorage/Dropbox/academic/cursos/cursos-davi/data_science_computing/2024S_dsc_emory_qtm_350/slides"
  },
  {
    "objectID": "slides/slides-topic-02-02.html#navigation-1",
    "href": "slides/slides-topic-02-02.html#navigation-1",
    "title": " QTM 350: Data Science Computing ",
    "section": "Navigation",
    "text": "Navigation\n\nYou can use absolute paths, but it’s better to use relative paths and invoke special symbols for a user’s home folder (~), current directory (.), and parent directory (..) as needed.\n\ncd slides-topic-02-02-examples ## Move into the \"slides-topic-02-02-examples\" sub-directory of this lecture directory.\ncd ../.. ## Now go back up two directories.\npwd\n\n\nTerminal!"
  },
  {
    "objectID": "slides/slides-topic-02-02.html#navigation-2",
    "href": "slides/slides-topic-02-02.html#navigation-2",
    "title": " QTM 350: Data Science Computing ",
    "section": "Navigation",
    "text": "Navigation\n\n\n Beware of directory names that contain spaces. Say you have a directory called “My Documents”. (I’m looking at you, Windows.)\n\nWhy won’t $ cd My Documents work?\nBash syntax is super pedantic about spaces and ordering. Here it thinks that “My” and “Documents” are separate arguments.\nHow to deal with it:\n\nUse quotation marks: $ cd \"My Documents\".\nUse Tab completion to automatically “escape” the space: $ cd My\\ Documents.\nDon’t use spaces in file and folder names. Just don’t.\nI’ve developed the habit to name files and folders\n\nalways lowercase and\nusing dashes or snake_case, as in assignment-05 or assignment_05. These are useful conventions!"
  },
  {
    "objectID": "slides/slides-topic-02-02.html#listing-files-and-their-properties",
    "href": "slides/slides-topic-02-02.html#listing-files-and-their-properties",
    "title": " QTM 350: Data Science Computing ",
    "section": "Listing files and their properties",
    "text": "Listing files and their properties\n\n\nWe’re about to go into more depth about the ls (list) command. It shows the contents of the current (or given) directory:\nls\n\n\n\n_slides-topic-02-02.html    libs\n_slides-topic-02-02_files   slides-topic-01.qmd\n_slides-topic-02.html       slides-topic-02-01.qmd\n_slides-topic-02_aux.qmd    slides-topic-02-02-examples\n_slides-topic-02_files      slides-topic-02-02.ipynb\ncustom.css                  slides-topic-02-02.qmd\ncustom.scss                 slides-topic-02-03.qmd\nfigs                        survive.txt\n\n\n\n\n\n\nNow we list the contents of the slides-topic-02-02-examples/ sub-directory with the -lh option (“long format”, “human readable file size unit suffixes”; again, check out man ls for the details):\nls -lh slides-topic-02-02-examples\n\n\n\ntotal 15304\n-rw-r--r--@ 1 dcorde3  206888963   4.8M Feb  3 18:14 bbc_text_cls.csv\n-rw-r--r--@ 1 dcorde3  206888963    23K Feb  3 15:22 diabetes.csv\n-rw-r--r--@ 1 dcorde3  206888963   2.6M Feb  4 13:35 naive_bayes.ipynb"
  },
  {
    "objectID": "slides/slides-topic-02-02.html#listing-files-and-their-properties-1",
    "href": "slides/slides-topic-02-02.html#listing-files-and-their-properties-1",
    "title": " QTM 350: Data Science Computing ",
    "section": "Listing files and their properties",
    "text": "Listing files and their properties\n\n\nNow we list the contents of the slides-topic-02-02-examples/ sub-directory with the -lh option (“long format”, “human readable file size unit suffixes”; again, check out man ls for the details):\nls -lh slides-topic-02-02-examples\n\n\n\ntotal 15304\n-rw-r--r--@ 1 dcorde3  206888963   4.8M Feb  3 18:14 bbc_text_cls.csv\n-rw-r--r--@ 1 dcorde3  206888963    23K Feb  3 15:22 diabetes.csv\n-rw-r--r--@ 1 dcorde3  206888963   2.6M Feb  4 13:35 naive_bayes.ipynb\n\n\n\n\nWhat does this all mean? Let’s focus on the top line.\ndrwxrwxr-x@ 3 dcorde3  206888963    96B Nov 27 09:51 ABC\n\nThe first column denotes the object type:\n\nd (directory or folder), l (link), or - (file)\n\nNext, we see the permissions associated with the object’s three possible user types: 1) owner, 2) the owner’s group, and 3) all other users.\n\nPermissions reflect r (read), w (write), or x (execute) access.\n- denotes missing permissions for a class of operations.\n\nThe number of hard links to the object.\nWe also see the identity of the object’s owner and their group.\nFinally, we see some descriptive elements about the object:\n\nSize, date and time of creation, and the object name."
  },
  {
    "objectID": "slides/slides-topic-02-02.html#summary",
    "href": "slides/slides-topic-02-02.html#summary",
    "title": " QTM 350: Data Science Computing ",
    "section": "Summary",
    "text": "Summary\n\n\n\nThe pwd (print working directory) command shows the current working directory.\nThe ls (list) command shows the contents of the current directory or a given directory.\nThe ls -l command shows the contents of the current directory as list.\nThe cd (change directory) changes the current working directory.\nYou can run cd at any time to quickly go to your home directory.\nYou can use the cd - command to go back to the last location.\nAbsolute paths are paths which specify the exact location of a file or folder.\nRelative paths are paths which are relative to the current directory.\nThe . special folder means ‘this folder’.\nThe .. special folder means ‘the parent folder’.\nThe ~ special folder is the ‘home directory’.\nThe $PWD environment variable holds the current working directory.\nThe $HOME environment variable holds the user’s home directory.\nThe tree command can show the files and folders in a given directory. (Install first on a Mac.)\nThe file command can be used to ask the shell what it thinks a file is.\n\n\n\nFor a more detailed overview, click here."
  },
  {
    "objectID": "slides/slides-topic-02-02.html#managing-your-files-1",
    "href": "slides/slides-topic-02-02.html#managing-your-files-1",
    "title": " QTM 350: Data Science Computing ",
    "section": "Managing your files",
    "text": "Managing your files\n\n\n\nThe obvious next step after navigating the file system is managing files.\nThere’s a lot you can do with files, including downloading, unzipping, copying, moving, renaming and deleting.\nAgain, doing this in a GUI is intuitive but usually scales badly.\nWe’ll learn how to do these operations at scale using the shell.\nBe careful when handling files in the shell though! Don’t expect friendly reminders such as “Do you really want to delete this folder of pictures from your anniversary?”"
  },
  {
    "objectID": "slides/slides-topic-02-02.html#create-touch-and-mkdir",
    "href": "slides/slides-topic-02-02.html#create-touch-and-mkdir",
    "title": " QTM 350: Data Science Computing ",
    "section": "Create: touch and mkdir",
    "text": "Create: touch and mkdir\nOne of the most common shell tasks is object creation (files, directories, etc.).\nWe use mkdir to create directories. E.g., to create a new “testing” directory we do:\nmkdir testing\n\n\nWe use touch to create (empty) files. If the file(s) already exist, touch changes a file’s “Access”, “Modify” and “Change” timestamps to the current time and date. To add some files to our new directory, we do:\ntouch testing/test1.txt testing/test2.txt testing/test3.txt\n\n\n\nCheck that it worked:\nls testing\n\n\n\ntest1.txt test2.txt test3.txt"
  },
  {
    "objectID": "slides/slides-topic-02-02.html#remove-rm-and-rmdir",
    "href": "slides/slides-topic-02-02.html#remove-rm-and-rmdir",
    "title": " QTM 350: Data Science Computing ",
    "section": "Remove: rm and rmdir",
    "text": "Remove: rm and rmdir\nLet’s delete the objects that we just created. Start with one of the .txt files, by using rm. - We could delete all the files at the same time, but you’ll see why I want to keep some.\nrm testing/test1.txt\n\n\nThe equivalent command for directories is rmdir.\nrmdir testing\n\n\n\nrmdir: testing: Directory not empty\n\n\n\n\nUh oh… It won’t let us delete the directory while it still has files inside of it. The solution is to use the rm command again with the “recursive” (-r or -R) and “force” (-f) options. - Excluding the -f option is safer, but will trigger a confirmation prompt for every file, which I’d rather avoid here.\nrm -rf testing ## Success"
  },
  {
    "objectID": "slides/slides-topic-02-02.html#copy-cp",
    "href": "slides/slides-topic-02-02.html#copy-cp",
    "title": " QTM 350: Data Science Computing ",
    "section": "Copy: cp",
    "text": "Copy: cp\n\n\nThe syntax for copying is $ cp object path/copyname.\n\nIf you don’t provide a new name for the copied object, it will just take the old name.\nHowever, if there is already an object with the same name in the target destination, then you’ll have to use -f to force an overwrite.\n\n\n## Create new \"copies\" sub-directory\nmkdir slides-topic-02-02-examples/copies\n\n## Now copy across a file (with a new name)\ncp slides-topic-02-02-examples/reps.txt slides-topic-02-02-examples/copies/reps-copy.txt\n\n## Show that we were successful\nls slides-topic-02-02-examples/copies\n\nTerminal!\n\n\n\nYou can use cp to copy directories, although you’ll need the -r flag if you want to recursively copy over everything inside of it too:\ncp -r slides-topic-02-02-examples/meals slides-topic-02-02-examples/copies\nrm -rf slides-topic-02-02-examples/copies/meals\n\nTerminal!"
  },
  {
    "objectID": "slides/slides-topic-02-02.html#move-and-rename-mv",
    "href": "slides/slides-topic-02-02.html#move-and-rename-mv",
    "title": " QTM 350: Data Science Computing ",
    "section": "Move (and rename): mv",
    "text": "Move (and rename): mv\nThe syntax for moving is $ mv object path/newobjectname\n ## Move the abc.txt file and show that it worked\nmv slides-topic-02-02-examples/ABC/abc.txt examples\nls slides-topic-02-02-examples/ABC ## empty\n\n## Move it back again\nmv slides-topic-02-02-examples/abc.txt slides-topic-02-02-examples/ABC\nls slides-topic-02-02-examples/ABC ## not empty\n\nTerminal!\n\n\nNote that “moving” an object within the same directory, but with specifying newobjectname, is effectively the same as renaming it.\n ## Rename reps-copy to reps2 by \"moving\" it with a new name\nmv slides-topic-02-02-examples/copies/reps-copy.txt slides-topic-02-02-examples/copies/reps2.txt\nls slides-topic-02-02-examples/copies\n\nTerminal!"
  },
  {
    "objectID": "slides/slides-topic-02-02.html#rename-en-masse-zmv",
    "href": "slides/slides-topic-02-02.html#rename-en-masse-zmv",
    "title": " QTM 350: Data Science Computing ",
    "section": "Rename en masse : zmv",
    "text": "Rename en masse : zmv\nA more convenient way to do renaming in zsh is with zmv. It has to be installed and autoloaded first:\nautoload -U zmv\n\nTerminal!\n\n\nThe syntax is zmv &lt;options&gt; &lt;old-files-pattern&gt; &lt;new-files-pattern&gt;\nFor example, say we want to change the file type (i.e. extension) of a set of files in the slides-topic-02-02-examples/meals directory, we do:\ncd slides-topic-02-02-examples/meals\nzmv -n -W  \"*.csv\" \"*.txt\"\n\nTerminal!\n\n\n\nA very useful flag is -n which does not execute the command but prints the command that would be executed. Use this if you are unsure about your patterns. The -W flag ensures that the wildcard * is recycled in the second pattern."
  },
  {
    "objectID": "slides/slides-topic-02-02.html#rename-en-masse-zmv-1",
    "href": "slides/slides-topic-02-02.html#rename-en-masse-zmv-1",
    "title": " QTM 350: Data Science Computing ",
    "section": "Rename en masse : zmv",
    "text": "Rename en masse : zmv\nzmv really shines in conjunction with regular expressions and wildcards (more on the next slide). This works especially well for dealing with a whole list of files or folders.\nAs another example, let’s change all of the file names in the slides-topic-02-02-examples/meals directory.\nzmv -n '(**/)(*).csv' '$1$2-tacos.csv'\n\nTerminal!\n\n\n\nNotice that the patterns are now bit more complicated. The first is surrounded by single quotes, (**/) which defines a group that we can refer to later. It allows us to search in both the given directory and sub-directories (which we don’t have in this case). The second, (*) is also grouped. Both are referred to in the replacement pattern with $1 and $2.\nWant to learn more about zmv? Check out this."
  },
  {
    "objectID": "slides/slides-topic-02-02.html#wildcards",
    "href": "slides/slides-topic-02-02.html#wildcards",
    "title": " QTM 350: Data Science Computing ",
    "section": "Wildcards",
    "text": "Wildcards\nWildcards are special characters that can be used as a replacement for other characters. The two most important ones are:\n\nReplace any number of characters with *.\n\nConvenient when you want to copy, move, or delete a whole class of files.\n\n\n\ncp slides-topic-02-02-examples/*.sh slides-topic-02-02-examples/copies ## Copy any file with an .sh extension to \"copies\"\nrm slides-topic-02-02-examples/copies/* ## Delete everything in the \"copies\" directory\n\nTerminal!\n\n\n\n\nReplace a single character with ?\n\nConvenient when you want to discriminate between similarly named files.\n\n\n\n\nls slides-topic-02-02-examples/meals/??nday.csv\nls slides-topic-02-02-examples/meals/?onday.csv\n\nTerminal!"
  },
  {
    "objectID": "slides/slides-topic-02-02.html#find",
    "href": "slides/slides-topic-02-02.html#find",
    "title": " QTM 350: Data Science Computing ",
    "section": "Find",
    "text": "Find\nThe last command to mention is find.\nThis can be used to locate files and directories based on a variety of criteria; from pattern matching to object properties.\nfind examples -iname \"monday.csv\" ## will automatically do recursive, -iname makes search case-insensitive\n\nfind . -iname \"*.txt\" ## must use \".\" to indicate pwd\n\nfind . -size +2000k ## find files larger than 2000 KB\n\nTerminal!"
  },
  {
    "objectID": "slides/slides-topic-02-02.html#summary-1",
    "href": "slides/slides-topic-02-02.html#summary-1",
    "title": " QTM 350: Data Science Computing ",
    "section": "Summary",
    "text": "Summary\n\n\n\nThe rm (remove) command can delete a file (they are gone forever, no recycle bin!).\nThe rm command won’t delete a folder which has files in it, unless you tell it to by adding the -r (recursive) flag.\nThe cp (copy) command can copy a file.\nThe cp can also be given wildcards like * to copy many files.\nThe mv (move) command can move or rename a file.\nThe zmv command enables convenient renaming.\nThe mkdir command can create a folder - it can even create a whole tree of folders if you pass the -p (create parent directories) flag.\nThe find command lets you find files based on specified criteria.\nThe cat command (concatenated) can be used to write the contents of a file to the screen.\nWe can pass multiple files to commands like cat if we use wildcards, such as quotes/*.\nThe wget (web get) command can download a file from the web. (Install first on a Mac.)\nThe zip/unzip commands can zip/unzip a file/folder for us.\n\n\nFor a more detailed overview, click here."
  },
  {
    "objectID": "slides/slides-topic-02-02.html#working-with-text-files-1",
    "href": "slides/slides-topic-02-02.html#working-with-text-files-1",
    "title": " QTM 350: Data Science Computing ",
    "section": "Working with text files",
    "text": "Working with text files\n\n\n\nData scientists spend a lot of time working with text, including scripts, Markdown documents, and delimited text files like CSVs.\nYou will have the opportunity to learn more on the statistical analysis of text using NLP technique over the course of your studies.\nWhile Python and R are strong environments for text wrangling and analysis, it still makes sense to spend a few slides showing off some Bash shell capabilities for working with text files.\nWe’ll only scratch the surface, but hopefully you’ll get an idea of how powerful the shell is in the text domain."
  },
  {
    "objectID": "slides/slides-topic-02-02.html#counting-text-wc",
    "href": "slides/slides-topic-02-02.html#counting-text-wc",
    "title": " QTM 350: Data Science Computing ",
    "section": "Counting text: wc",
    "text": "Counting text: wc\n\nYou can use the wc command to count:\n\nThe lines of text\nThe number of words\nThe number of characters\n\n\nLet’s demonstrate with a text file containing all of Shakespeare’s Sonnets.1\nwc slides-topic-02-02-examples/sonnets.txt\n\nTerminal!\n\nThe character count is actually higher than we’d get if we count by hand, because wc counts the invisible newline character “”.\n\nProject Gutenberg."
  },
  {
    "objectID": "slides/slides-topic-02-02.html#read-everything-cat",
    "href": "slides/slides-topic-02-02.html#read-everything-cat",
    "title": " QTM 350: Data Science Computing ",
    "section": "Read everything: cat",
    "text": "Read everything: cat\n\nThe simplest way to read in text is with the cat (“concatenate”) command. Note that cat will read in all of the text. You can scroll back up in your shell window, but this can still be a pain.\nAgain, let’s demonstrate using Shakespeare’s Sonnets. (This will overflow the slide.)\nWe also use the -n flag to show line numbers:\n\n\ncat -n slides-topic-02-02-examples/sonnets.txt\n\nTerminal!"
  },
  {
    "objectID": "slides/slides-topic-02-02.html#scroll-more-and-less",
    "href": "slides/slides-topic-02-02.html#scroll-more-and-less",
    "title": " QTM 350: Data Science Computing ",
    "section": "Scroll: more and less",
    "text": "Scroll: more and less\n\nThe more and less commands provide extra functionality over cat. For example, they allow you to move through long text one page at a time. (While they look similar, less is more than more, more or less…)\n\nmore slides-topic-02-02-examples/sonnets.txt\n\nTerminal!\n\n\n\nYou can move forward and back using the f and b keys, and quit by hitting q."
  },
  {
    "objectID": "slides/slides-topic-02-02.html#preview-head-and-tail",
    "href": "slides/slides-topic-02-02.html#preview-head-and-tail",
    "title": " QTM 350: Data Science Computing ",
    "section": "Preview: head and tail",
    "text": "Preview: head and tail\n\nThe head and tail commands let you limit yourself to a preview of the text, down to a specified number of rows. (The default is 10 rows if you don’t specify a number with the -n flag.)\n\nhead -n 3 slides-topic-02-02-examples/sonnets.txt ## First 3 rows\n# head slides-topic-02-02-examples/sonnets.txt ## First 10 rows (default)\n\nTerminal!"
  },
  {
    "objectID": "slides/slides-topic-02-02.html#preview-head-and-tail-1",
    "href": "slides/slides-topic-02-02.html#preview-head-and-tail-1",
    "title": " QTM 350: Data Science Computing ",
    "section": "Preview: head and tail",
    "text": "Preview: head and tail\n\ntail works very similarly to head, but starting from the bottom. For example, we can see the very last row of a file as follows:\n\ntail -n 1 slides-topic-02-02-examples/sonnets.txt ## Last row\n\nTerminal!\n\n\nBy using the -n +N option, we can specify that we want to preview all lines starting from row N and after, as in:\n\ntail -n +3024 slides-topic-02-02-examples/sonnets.txt ## Show everything from line 3024\n\nTerminal!"
  },
  {
    "objectID": "slides/slides-topic-02-02.html#find-patterns-grep",
    "href": "slides/slides-topic-02-02.html#find-patterns-grep",
    "title": " QTM 350: Data Science Computing ",
    "section": "Find patterns: grep",
    "text": "Find patterns: grep\n\n\nTo find patterns in text, we can use regular expression-type matching with grep.\nFor example, say we want to find the famous opening line to Shakespeare’s Sonnet 18.\n(We’re going to include the -n (“number”) flag to get the line that it occurs on.)\ngrep -n \"Shall I compare thee\" slides-topic-02-02-examples/sonnets.txt\n\n\ngrep: slides-topic-02-02-examples/sonnets.txt: No such file or directory\n\n\n\n\n\nBy default, grep returns all matching patterns.\nCheck out what happens when we do the following:\ngrep -n \"winter\" slides-topic-02-02-examples/sonnets.txt\n\n\ngrep: slides-topic-02-02-examples/sonnets.txt: No such file or directory"
  },
  {
    "objectID": "slides/slides-topic-02-02.html#find-patterns-grep-1",
    "href": "slides/slides-topic-02-02.html#find-patterns-grep-1",
    "title": " QTM 350: Data Science Computing ",
    "section": "Find patterns: grep",
    "text": "Find patterns: grep\n\nNote that grep can be used to identify patterns in a group of files (e.g. within a directory) too.\n\nThis is particularly useful if you are trying to identify a file that contains, say, a function name.\n\n\nHere’s a simple example: Which days will I eat pasta this week?\n\nI’m using the r (recursive) and l (just list the files; don’t print the output) flags.\n\n\n\ngrep -rl \"pasta\" slides-topic-02-02-examples/meals\n\n\ngrep: slides-topic-02-02-examples/meals: No such file or directory\n\n\nTake a look at the grep man or cheat file for other useful examples and flags (e.g. -i for ignore case)."
  },
  {
    "objectID": "slides/slides-topic-02-02.html#manipulate-text-sed",
    "href": "slides/slides-topic-02-02.html#manipulate-text-sed",
    "title": " QTM 350: Data Science Computing ",
    "section": "Manipulate text: sed",
    "text": "Manipulate text: sed\nThere are two main commands for manipulating text in the shell, namely sed and awk. Both of these are very powerful and flexible. We’ll briefly look into sed for now. (Mac users, note that the MacOS sed works a bit differently; see here.)\nsed is the stream editor command. It takes input from a stream - which in many cases will simply be a file. It then performs operations on the text as it is read, and returns the output.\n\n\n\n\nExample 1. Replace one text pattern with another.\ncat slides-topic-02-02-examples/nursery.txt\nsed 's/Jack/Bill/g' slides-topic-02-02-examples/nursery.txt\ncat slides-topic-02-02-examples/nursery.txt\n\n\nLet’s look at the expression s/Jack/Bill/g in detail:\n\nThe s indicates that we are going to run the substitute function, which is used to replace text.\nThe / indicates the start of the pattern we are searching for - Bill in this case.\nThe second / indicates the start of the replacement we will make when the pattern is found.\nThe final / indicates the end of the replacement - we can also optionally put flags after this slash. Here, g ensures global replacement (not just replacement of the first match)."
  },
  {
    "objectID": "slides/slides-topic-02-02.html#summary-2",
    "href": "slides/slides-topic-02-02.html#summary-2",
    "title": " QTM 350: Data Science Computing ",
    "section": "Summary",
    "text": "Summary\n\n\n\nhead will show the first ten lines of a file.\nhead -n 30 will show the first thirty lines of a file, using the -n flag to specify the number of lines.\ntail will show the final ten lines of a file.\ntail -n 3 uses the -n flag to specify three lines only.\ntr 'a' 'b' is the translate characters command, which turns one set of characters into another.\ncut can be used to extract parts of a line of text.\ncut -d',' -f 3 shows how the -d or delimiter flag is used to specify the delimiter to cut on and how the -f or field flag specifies which of the fields the text has been cut into is printed.\ncut -c 2-4 uses the -c or characters flag to specify that we are extracting a subset of characters in the line, in this case characters two to four.\nrev reverses text - by reversing, cutting and then re-reversing you can quickly extract text from the end of a line.\nsort sorts the incoming text alphabetically. The -r flag for sort reverses the sort order.\nThe uniq command removes duplicate lines - but only when they are next to each other, so you’ll often use it in combination with sort.\nYour pager, for example the less program can be useful when inspecting the output of your text transformation commands.\n\n\nFor a more detailed overview, click here."
  },
  {
    "objectID": "slides/slides-topic-02-02.html#also-make-sure-to-master-regular-expressions",
    "href": "slides/slides-topic-02-02.html#also-make-sure-to-master-regular-expressions",
    "title": " QTM 350: Data Science Computing ",
    "section": "Also, make sure to master regular expressions!",
    "text": "Also, make sure to master regular expressions!\n\n\n\nGood starting points are:\n\nThis chapter discussing regex in the context of the shell\nRegular Expression in Python\nThis base R regex intro"
  },
  {
    "objectID": "slides/slides-topic-02-02.html#redirects-pipes-and-loops-1",
    "href": "slides/slides-topic-02-02.html#redirects-pipes-and-loops-1",
    "title": " QTM 350: Data Science Computing ",
    "section": "Redirects, pipes, and loops",
    "text": "Redirects, pipes, and loops\n\n\n\n\nYou have learned about pipes (%&gt;% or |&gt;) in R already.\nUnderstanding the concept of pipelines in the shell, as well as how input and output work for command line programs is critical to be able to use the shell effectively.\nThink again of the Unix philosophy of “doing one thing, but doing it well” and combining multiple of these modules.\nAlso, often you’ll want to dump output in a file as part of your workflow.\nLet’s learn how all this works."
  },
  {
    "objectID": "slides/slides-topic-02-02.html#redirect",
    "href": "slides/slides-topic-02-02.html#redirect",
    "title": " QTM 350: Data Science Computing ",
    "section": "Redirect: >",
    "text": "Redirect: &gt;\n\nYou can send output from the shell to a file using the redirect operator &gt;.\nFor example, let’s print a message to the shell using the echo command.\necho \"At first, I was afraid, I was petrified\"\n\n\nAt first, I was afraid, I was petrified\n\n\n\n\nIf you wanted to save this output to a file, you need simply redirect it to the filename of choice.\necho \"At first, I was afraid, I was petrified\" &gt; survive.txt\nfind survive.txt ## Show that it now exists\n\n\nsurvive.txt"
  },
  {
    "objectID": "slides/slides-topic-02-02.html#redirect-1",
    "href": "slides/slides-topic-02-02.html#redirect-1",
    "title": " QTM 350: Data Science Computing ",
    "section": "Redirect: >",
    "text": "Redirect: &gt;\n\nIf you want to append text to an existing file, then you should use &gt;&gt;.\n\nUsing &gt; will try to overwrite the existing file contents.\n\n\necho \"'Kept thinking I could never live without you by my side\" &gt;&gt; survive.txt\ncat survive.txt\n\n\n\nAt first, I was afraid, I was petrified\n'Kept thinking I could never live without you by my side\n\n\n\n\nAn example use case is when adding rules to your .gitignore, e.g. $ echo \"*.csv\" &gt;&gt;  .gitignore."
  },
  {
    "objectID": "slides/slides-topic-02-02.html#pipes",
    "href": "slides/slides-topic-02-02.html#pipes",
    "title": " QTM 350: Data Science Computing ",
    "section": "Pipes: |",
    "text": "Pipes: |\nThe pipe operator | is one of the coolest features in Bash.\n\nIt allows us to chain (i.e. “pipe”) together a sequence of simple operations and thereby implement a more complex operation.\n\n\n\n\nHere’s a simple example:\ncat -n slides-topic-02-02-examples/sonnets.txt 2&gt;/dev/null | head -n100 | tail -n10\n\n\nThis command sequence:\n\nIt reads the file sonnets.txt, numbering each line of the text.\nAny errors that might occur during this process are ignored (not printed to the terminal).\nIt then takes only the first 100 lines of the numbered text.\nFrom those 100 lines, it then takes only the last 10 lines.\nThe final output displayed in the terminal will be lines 91 to 100 of the sonnets.txt file, along with their corresponding line numbers.\n\n\n\ncat -n slides-topic-02-02-examples/sonnets.txt\n\ncat is used to concatenate and display files.\nThe -n option of cat numbers all output lines starting with line 1.\nslides-topic-02-02-examples/sonnets.txt is the file path to the text file being read. This file presumably contains sonnets or other text.\n\n\n\n\n2&gt;/dev/null\n\n2&gt; is used to redirect the standard error (stderr) output stream.\n/dev/null is a special file that discards all data written to it.\nThis redirection sends all error messages from cat (like file not found, no read permission, etc.) to /dev/null, effectively silencing any errors that cat might produce.\n\n| head -n100\n\nThe pipe | passes the output of the previous command (cat -n) to the next command as input.\nhead is used to output the first part of files.\nThe -n100 option tells head to print the first 100 lines of its input.\n\n| tail -n10\n\nAnother pipe | passes the output of head -n100 to the next command as input.\ntail outputs the last part of files.\nThe -n10 option tells tail to print the last 10 lines of its input."
  },
  {
    "objectID": "slides/slides-topic-02-02.html#iteration-with-for-loops",
    "href": "slides/slides-topic-02-02.html#iteration-with-for-loops",
    "title": " QTM 350: Data Science Computing ",
    "section": "Iteration with for loops",
    "text": "Iteration with for loops\n\nSometimes you want to loop an operation over certain parameters. for loops in Bash/Z shell work similarly to other programming languages that you are probably familiar with.\n\nThe basic syntax is:\nfor i in LIST\ndo \n  OPERATION $i ## the $ sign indicates a variable in bash\ndone\n\nWe can also condense things into a single line by using ;.\nfor i in LIST; do OPERATION $i; done\nNote: Using ; isn’t limited to for loops. Semicolons are a standard way to denote line endings in Bash/Z shell."
  },
  {
    "objectID": "slides/slides-topic-02-02.html#example-1-print-a-sequence-of-numbers",
    "href": "slides/slides-topic-02-02.html#example-1-print-a-sequence-of-numbers",
    "title": " QTM 350: Data Science Computing ",
    "section": "Example 1: Print a sequence of numbers",
    "text": "Example 1: Print a sequence of numbers\nTo help make things concrete, here’s a simple for loop in action.\nfor i in 1 2 3 4 5; do echo $i; done\n\n\n1\n2\n3\n4\n5\n\n\n\nFWIW (For What It’s Worth), we can use bash’s brace expansion ({1..n}) to save us from having to write out a long sequence of numbers.\nfor i in {1..5}; do echo $i; done"
  },
  {
    "objectID": "slides/slides-topic-02-02.html#example-2-combine-csvs",
    "href": "slides/slides-topic-02-02.html#example-2-combine-csvs",
    "title": " QTM 350: Data Science Computing ",
    "section": "Example 2: Combine CSVs",
    "text": "Example 2: Combine CSVs\nHere’s a more realistic for loop use-case: Combining (i.e. concatenating) multiple CSVs.\nSay we want to combine all the “daily” files in the /meals directory into a single CSV, which I’ll call mealplan.csv. Here’s one attempt that incorporates various bash commands and tricks that we’ve learned so far. The basic idea is:\n\nCreate a new (empty) CSV\nThen, loop over the relevant input files, appending their contents to our new CSV\n\n\n## create an empty CSV\ntouch slides-topic-02-02-examples/meals/mealplan.csv\n## loop over the input files and append their contents to our new CSV\nfor i in $(ls slides-topic-02-02-examples/meals/*day.csv)\n  do \n   cat $i &gt;&gt; slides-topic-02-02-examples/meals/mealplan.csv\ndone\n\nTerminal!\n\n\n\n\nDid it work?"
  },
  {
    "objectID": "slides/slides-topic-02-02.html#example-2-combine-csvs-1",
    "href": "slides/slides-topic-02-02.html#example-2-combine-csvs-1",
    "title": " QTM 350: Data Science Computing ",
    "section": "Example 2: Combine CSVs",
    "text": "Example 2: Combine CSVs\n\ncat slides-topic-02-02-examples/meals/mealplan.csv\n\nTerminal!\n\n\n\n\nHmmm. Sort of, but we need to get rid of the repeating header.\n\n\n\nCan you think of a way? (Hint: tail and head…)"
  },
  {
    "objectID": "slides/slides-topic-02-02.html#example-2-combine-csvs-2",
    "href": "slides/slides-topic-02-02.html#example-2-combine-csvs-2",
    "title": " QTM 350: Data Science Computing ",
    "section": "Example 2: Combine CSVs",
    "text": "Example 2: Combine CSVs\n\nLet’s try again. First delete the old file so we can start afresh.\nrm -f slides-topic-02-02-examples/meals/mealplan.csv ## delete old file\n\nTerminal!\n\n\nHere’s our adapted gameplan:\n\nFirst, create the new file by grabbing the header (i.e. top line) from any of the input files and redirecting it. No need for touch this time.\nNext, loop over all the input files as before, but this time only append everything after the top line.\n\n\n\n## create a new CSV by redirecting the top line of any file\nhead -1 slides-topic-02-02-examples/meals/monday.csv &gt; slides-topic-02-02-examples/meals/mealplan.csv\n## loop over the input files, appending everything after the top line\nfor i in $(ls slides-topic-02-02-examples/meals/*day.csv)\n do \n   tail -n +2 $i &gt;&gt; slides-topic-02-02-examples/meals/mealplan.csv\ndone\n\nTerminal!"
  },
  {
    "objectID": "slides/slides-topic-02-02.html#example-2-combine-csvs-3",
    "href": "slides/slides-topic-02-02.html#example-2-combine-csvs-3",
    "title": " QTM 350: Data Science Computing ",
    "section": "Example 2: Combine CSVs",
    "text": "Example 2: Combine CSVs\n\nIt worked!\ncat slides-topic-02-02-examples/meals/mealplan.csv\n\nTerminal!\n\n\n\nWe still have to sort the correct week order, but that’s an easy job in R or Python.\n\nThe explicit benefit of doing the concatenating in the shell is that it can be much more efficient, since all the files don’t simultaneously have to be held in memory (i.e RAM).\nThis doesn’t matter here, but can make a dramatic difference once we start working with lots of files (or even a few really big ones)."
  },
  {
    "objectID": "slides/slides-topic-02-02.html#scripting-1",
    "href": "slides/slides-topic-02-02.html#scripting-1",
    "title": " QTM 350: Data Science Computing ",
    "section": "Scripting",
    "text": "Scripting\n\n\n\nWriting code interactively in the shell makes a lot of sense when you are exploring data, file structures, etc.\nHowever, it’s also possible (and often desirable) to write reproducible shell scripts that combine a sequence of commands.\nThese scripts are demarcated by their .sh file extension.\nLet’s look at the contents of a short shell script, hello.sh, that is included in the examples folder:\ncat slides-topic-02-02-examples/hello.sh\n What does this script do?"
  },
  {
    "objectID": "slides/slides-topic-02-02.html#hello-world",
    "href": "slides/slides-topic-02-02.html#hello-world",
    "title": " QTM 350: Data Science Computing ",
    "section": "Hello World!",
    "text": "Hello World!\n\n#!/bin/sh\necho \"\\nHello World!\\n\"\n\n#!/bin/sh is a shebang, indicating which program to run the command with (here: any Bash-compatible shell). However, it is typically ignored (note that it begins with the hash comment character.)\necho \"\\nHello World!\\n\" is the actual command that we want to run.\n\n\nTo run this simple script, you can just type in the file name and press enter.\nslides-topic-02-02-examples/hello.sh\n# bash slides-topic-02-02-examples/hello.sh ## Also works\n\n\nzsh:1: no such file or directory: slides-topic-02-02-examples/hello.sh"
  },
  {
    "objectID": "slides/slides-topic-02-02.html#things-we-didnt-cover-here",
    "href": "slides/slides-topic-02-02.html#things-we-didnt-cover-here",
    "title": " QTM 350: Data Science Computing ",
    "section": "Things we didn’t cover here",
    "text": "Things we didn’t cover here\nI hope that I’ve given you a sense of how the shell works and how powerful it is. My main goal has been to “demystify” the shell, so that you aren’t intimidated when we use shell commands later on.\nWe didn’t cover many things:\n\nUser roles and file permissions, environment variables, SSH, memory management (e.g. top and htop), GNU parallel, etc.\nAutomation; see here, here, and here are great places to start learning about automation on your own."
  },
  {
    "objectID": "slides/slides-topic-02-02.html#additional-material",
    "href": "slides/slides-topic-02-02.html#additional-material",
    "title": " QTM 350: Data Science Computing ",
    "section": "Additional material",
    "text": "Additional material\nIf you want to dig deeper, check out\n\nThe Unix Shell (Software Carpentery)\nThe Unix Workbench (Sean Kross)\nData Science at the Command Line (Jeroen Janssens)\nEffective Shell (Dave Kerr)\nEfficient Way To Process Large Text/Log Files Using Awk With Python\nUsing AWK and R to parse 25tb (Nick Strayer)\n./jq\nawk"
  },
  {
    "objectID": "lecture_material/material-topic-01/example_py.html",
    "href": "lecture_material/material-topic-01/example_py.html",
    "title": "My Quarto Document",
    "section": "",
    "text": "# Your Python code here\nprint(\"Hello, Quarto!\")\n\nHello, Quarto!"
  },
  {
    "objectID": "lecture_material/material-topic-01/course_infrastructure.html",
    "href": "lecture_material/material-topic-01/course_infrastructure.html",
    "title": "Topic 1: Course Set Up",
    "section": "",
    "text": "The document offers a guide about the course infrastructure.[1]"
  },
  {
    "objectID": "lecture_material/material-topic-01/course_infrastructure.html#commandline",
    "href": "lecture_material/material-topic-01/course_infrastructure.html#commandline",
    "title": "Topic 1: Course Set Up",
    "section": "CommandLine",
    "text": "CommandLine\nAt times, we’ll use a unix-based commandline. The commandline will feature into our discussion on using git and also running Python programs. If you use a Mac or a Linux operating system, then a functioning commandline comes with your operating system. For Apple machines, this is the Terminal.\nFor Windows (specifically Windows 10), you can enable Linux Bash shell. The following offers a tutorial on how to do this.\nIf you’re using a version of Windows that pre-dates version 10, then Git Bash offers a program will allow you to use git commands from your windows machine.\nWe will cover some concepts of working with the commandline. You can get a full notebook with a intro to commandline in the materials for Topic 2"
  },
  {
    "objectID": "lecture_material/material-topic-01/course_infrastructure.html#python3",
    "href": "lecture_material/material-topic-01/course_infrastructure.html#python3",
    "title": "Topic 1: Course Set Up",
    "section": "Python3",
    "text": "Python3\nWe’ll use Python3 throughout this course. Below are instructions for downloading Python3 using commandline packages manager (Homebrew for mac, Chocolatey for windows).\n\nInstalling Python3 using Homebrew on a Mac (Apple)\nInstalling Python3 using Chocolatey on a PC (Windows)\n\nAn alternative way to install Python3 is to download an Anaconda distribution. I will use pip rather than conda in the instruction for downloading Python modules. These are simply two ways of downloading and managing open-source software packages. Choose which ever works best for you\nMost computers already have python3 installed. You can check if that is your case through your commandline:\npython3 --version\nOn some versions of Windows, you may need to use py instead of python3:\npy --version\nIn either case, the output of this command should be something like Python 3.8.5"
  },
  {
    "objectID": "lecture_material/material-topic-01/course_infrastructure.html#jupyter-notebooks",
    "href": "lecture_material/material-topic-01/course_infrastructure.html#jupyter-notebooks",
    "title": "Topic 1: Course Set Up",
    "section": "Jupyter Notebooks",
    "text": "Jupyter Notebooks\nOnce you have Python3 on your computer, you can install a Jupyter Notebook. If you downloaded Python3 using Anaconda, then Jupyter Notebook comes with the distribution and requires no further installation on your part. If you are not using Anaconda, you can install Jupyter notebook running the following code using your commandline.\n# on your command line\npip install jupyter\nYou can then activate a Jupyter Notebook from the commandline by typing:\n# on your command line\njupyter notebook\n\nWorkflow to work with Juyter Notebooks using the commandline.\n\nOpen the terminal\nNavigate (using cd) to the folder you want to be the root of your jupyter notebook\nOpen the notebook (jupyter notebook)\n\nIt looks like this if I were to open a notebook in the folder I have for this course\n# open terminal\ncd qtm_350\njupyter notebook\n\n\nWorkflow with Anaconda.\nIf you installed Python using Anaconda distribution system (here: https://www.anaconda.com/products/individual). You can open Jupyter through a point-and-click system.\nIn the lecture notes, you can also find a Introduction to Jupyter notebook."
  },
  {
    "objectID": "lecture_material/material-topic-01/course_infrastructure.html#rstudio-reticulatequarto",
    "href": "lecture_material/material-topic-01/course_infrastructure.html#rstudio-reticulatequarto",
    "title": "Topic 1: Course Set Up",
    "section": "Rstudio + Reticulate|Quarto",
    "text": "Rstudio + Reticulate|Quarto\nIn your classes that are focused on using R, RStudio will be your main IDE. However, RStudio is not just for R. It can handle a number of different languages. We can use Python in RStudio using the reticulate package.\nCheck the intro to quarto notebook on how to use Python in Rstudio. Let’s cover some of the installation steps here:\nTo install RStudio, download from the following link. reticulate is a R package that allows one run a Python REPL in the R console. In addition, it allows one to read in and use Python code, and pass data between R and Python. The following provides instructions on installing reticulate.\nWith reticulate, you can use Rstudio as a IDE for Python. Another option is to use Quarto (the next-generation version of R Markdown) as an unified framework to generate notebooks with text + code. If you are an R Markdown user, you will see how Quarto is just an extension of the capabilities that were previously provided by R Markdown. Now, instead of .rmd files, we have .qmd files. Quarto is already installed with RStudio."
  },
  {
    "objectID": "lecture_material/material-topic-01/course_infrastructure.html#git",
    "href": "lecture_material/material-topic-01/course_infrastructure.html#git",
    "title": "Topic 1: Course Set Up",
    "section": "Git",
    "text": "Git\nGit/GitHub instructions to check before the next session:\n\nInstall Git if it’s not installed already\nCreate a GitHub account if you don’t have one already (any email and free subscription is fine)\n\n1. This document was originally developed by Professor Tiago Ventura and adapted to our courses purposes."
  },
  {
    "objectID": "lecture_material/material-topic-01/quarto_python_example-class.html",
    "href": "lecture_material/material-topic-01/quarto_python_example-class.html",
    "title": "Quarto Python Example",
    "section": "",
    "text": "Here you can add your markdown text. Hello Quarto!"
  },
  {
    "objectID": "lecture_material/material-topic-01/quarto_python_example-class.html#example-of-using-python-with-quarto",
    "href": "lecture_material/material-topic-01/quarto_python_example-class.html#example-of-using-python-with-quarto",
    "title": "Quarto Python Example",
    "section": "",
    "text": "Here you can add your markdown text. Hello Quarto!"
  },
  {
    "objectID": "lecture_material/material-topic-01/quarto_python_example-class.html#code",
    "href": "lecture_material/material-topic-01/quarto_python_example-class.html#code",
    "title": "Quarto Python Example",
    "section": "Code",
    "text": "Code\nIn the code chunk, you just need to change the programming language you want to use inside of the brackets {}\n\n# R code chunck\nlibrary(ggplot2)\n\nmu &lt;- 0\nsigma &lt;- 1\nx &lt;- seq(mu - 3*sigma, mu + 3*sigma, length.out = 100)\ny &lt;- dnorm(x, mean = mu, sd = sigma)\ndata &lt;- data.frame(x, y)\n\nggplot(data, aes(x, y)) +\n  geom_line() +\n  theme_minimal() +\n  labs(title = \"Standard Normal Distribution\", x = \"X\", y = \"Density\")\n\n\n\n\n\n\n\n\n\n# Python code chunck\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport scipy.stats as stats\nimport math\n\nmu = 0\nvariance = 1\nsigma = math.sqrt(variance)\nx = np.linspace(mu - 3*sigma, mu + 3*sigma, 100)\nplt.plot(x, stats.norm.pdf(x, mu, sigma))\nplt.show()"
  },
  {
    "objectID": "problemset.html",
    "href": "problemset.html",
    "title": "Problem Sets",
    "section": "",
    "text": "Problem Set\n\n\nContent\n\n\nDate Assigned\n\n\nDue Date\n\n\n\n\n\n\nProblem Set 1\n\n\nXXXX\n\n\nMM/DD/YYYY\n\n\nXXXX\n\n\n\n\nProblem Set 2\n\n\nXXXX\n\n\nMM/DD/YYYY\n\n\nXXXX\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "topics-pages/page-topic-08.html",
    "href": "topics-pages/page-topic-08.html",
    "title": "Topic 08",
    "section": "",
    "text": "Lectures Notes:\n\nXXX\nXXX\n\n\n\nSlides\n\nTopic 01:Introduction, Set up, IDEs, Command line\n\n\n\nReadings\nXXXX\nRequired Readings\n\nXXX\nXXX\n\nReadings\n\nXXXX\n\nAdditional\n\nXXX"
  },
  {
    "objectID": "topics-pages/page-topic-11.html",
    "href": "topics-pages/page-topic-11.html",
    "title": "Topic 11",
    "section": "",
    "text": "Lectures Notes:\n\nXXX\nXXX\n\n\n\nSlides\n\nTopic 01:Introduction, Set up, IDEs, Command line\n\n\n\nReadings\nXXXX\nRequired Readings\n\nXXX\nXXX\n\nReadings\n\nXXXX\n\nAdditional\n\nXXX"
  },
  {
    "objectID": "topics-pages/page-topic-04.html",
    "href": "topics-pages/page-topic-04.html",
    "title": "Topic 04",
    "section": "",
    "text": "Lecture Material\n\nTime Complexity, Big O, Space Complexity: html, notebook\n\nIn-Class Activity - Time Complexity, Big O, Space Complexity - Practice: html, notebook\nIn-Class Activity - Time Complexity, Big O, Space Complexity - Solutions: html\n\nSearching, sorting, hash tables: html, notebook\n\nIn-Class Activity - Searching, sorting, hash tables - Practice: html, notebook\nIn-Class Activity - Searching, sorting, hash tables - Practice - Solutions: html\n\nRecursive Algorithms: html, notebook\n\nImage Folder: img.zip\nIn-Class Activity - Recursive Algorithms - Practice: html, notebook\nIn-Class Activity - Recursive Algorithms - Practice - Solutions: html\n\nRecursive Data Structures: html, notebook\n\nIn-Class Activity - Recursive Data Structures - Practice: html, notebook\nIn-Class Activity - Recursive Data Structures - Practice - Solutions: html\n\nGraphs: html, notebook\n\nIn-Class Activity - Graphs - Practice: html, notebook\nIn-Class Activity - Graphs - Practice - Solutions: html\n\n\n\n\nProblem Set\n\nIn groups (up to 3 members), conclude Recursive Data Structures and Graphs In-Class Activity (links and notebooks above).\nExtra Credit Opportunity: Within the Graphs In-Class Activity, there are optional exercises available. Should you choose to complete and submit these exercises successfully, up to 3% will be added to your final grade as a recognition of your additional effort. This is an excellent opportunity to enhance your understanding and improve your overall grade!\n\n\n\nRecommended Readings/Videos\n\n\nIntroduction to Big O Notation and Time Complexity (video)\nBinary search video - watch until 31:00.\nGraph traversals video\nbrilliant.org on Graph Theory\nbrilliant.org on Traversals\nbrilliant.org on BSTs\nData Structures and Algorithms in Python\nAlgorithms\nIntroduction to Algorithms\nAlgorithm Design\n\n\n\nAdditional Resources\n\nP vs. NP and the Computational Complexity Zoo (video)\nLecture Slides for Algorithm Design\nVisualizing Algorithms\nProfessor Mike Gelbart (videos)\nProfessor Scott Aaronson Blog\nPython: Recursion - Exercises, Practice, Solution\nStackOverflow post on generators\nLinear programming and discrete optimization with Python using PuLP\nDynamic programming\n500 Data Structures and Algorithms practice problems and their solutions",
    "crumbs": [
      "Materials",
      "Topic 4: Algorithms and Data Structures"
    ]
  },
  {
    "objectID": "topics-pages/page-topic-07.html",
    "href": "topics-pages/page-topic-07.html",
    "title": "Topic 07",
    "section": "",
    "text": "Lectures Notes:\n\nXXX\nXXX\n\n\n\nSlides\n\nTopic 01:Introduction, Set up, IDEs, Command line\n\n\n\nReadings\nXXXX\nRequired Readings\n\nXXX\nXXX\n\nReadings\n\nXXXX\n\nAdditional\n\nXXX"
  },
  {
    "objectID": "topics-pages/page-topic-02.html",
    "href": "topics-pages/page-topic-02.html",
    "title": "Topic 02",
    "section": "",
    "text": "Slides\n\nComputational Literacy\nCommand Line\nVersion Control\n\n\n\nLecture Material\n\nBasics of Command Line (very short piece): html, notebook \n\n\n\nBasics of Command Line (slides material):.zip\nIn-Class Activity - Exploring the Command Line: html\n\n\n\nProblem Set\n\nProblem Set - Collaboration and Version Control with Git and GitHub\n\n\n\nRecommended Readings\n\nThe Plain Person’s Guide to Plain Text Social Science - Healy, Kieran\n\nCh. 1: Introduction;\nCh. 2: Keep a Record;\nCh. 3: Write and Edit;\nCh. 4: Reproduce Work.\n\nPro Git - Chacon & Straub\n\nCh. 1: Getting Started; Read 1.1 - 1.3\nCh. 2: Git Basics; Only read 2.1 - 2.5\nCh. 3: Git Branching\n\nEssential Computer Literacy: 50 min.\n\n\n\nAdditional Resources\n\nEffective Shell\nvim Video\nMore on Git/Github in Pro Git:\n\nRead 1.4 - 1.7 for help on installation and commandline\nRead Ch. 6 for more information regarding Git + Github.\n\nCh. 13 Detect Git from RStudio -Happy Git with R - Bryan, Jenny & Jim Hester\nVisualizing Git\nData Science at the Command Line\nThe Art of Command Line\nIntroduction to Linux",
    "crumbs": [
      "Materials",
      "Topic 2: Version Control"
    ]
  },
  {
    "objectID": "topics-pages/page-topic-01.html",
    "href": "topics-pages/page-topic-01.html",
    "title": "Topic 01",
    "section": "",
    "text": "Slides\n\nTopic 01: Introduction, Syllabus and Set up\n\n\n\nLecture Material:\n\nInstructions for setting up the course.\nUsing Jupyter Notebooks: html, notebook\n\n\n\n\nUsing Quarto for Python and R html, notebook\n\n\n\n\nAdditional Resources\n\nPython and Anaconda Installation Guide\nElements of Data Science - The notebooks\nJupyter Notebook for Beginners: A tutorial Pryke, Benjamin - www.dataquest.io\nUsing Python with RStudio and reticulate: here and here\nR & Python: A Love Story - rstudio.com\nRStudio 1.2 Preview: Reticulated Python\nUsing LaTex to write math in markdown - docx2latex.com",
    "crumbs": [
      "Materials",
      "Topic 1: Intro"
    ]
  },
  {
    "objectID": "topics-pages/page-topic-03.html",
    "href": "topics-pages/page-topic-03.html",
    "title": "Topic 03",
    "section": "",
    "text": "Lecture Material\n\nPython Basics: html, notebook\n\nIn-Class Activity - Python Basics: html, notebook\nIn-Class Activity - Python Basics- Solution: html\n\nLoops & Functions: html, notebook\n\nIn-Class Activity - Loops & Functions: html, notebook\nIn-Class Activity - Loops & Functions - Solutions: html\n\nUnit Tests & Classes: html, notebook\n\nIn-Class Activity - Unit Tests & Classes - Solutions: html\n\nStyle Guides, Scripts, Imports: html, notebook\n\nAdditional Script File - Style Guides, Scripts, Imports: wallet.py\nData Folder - Style Guides, Scripts, Imports: data.zip\nIn-Class Activity - Style Guides, Scripts, Imports: html, notebook\nIn-Class Activity - Style Guides, Scripts, Imports - Solutions: html\n\nIntroduction to Numpy: html, notebook\nNumpy: html, notebook\n\nIn-Class Activity - Numpy: html, notebook\nIn-Class Activity - Numpy - Solutions: html\n\nPandas: html, notebook\n\nIn-Class Activity - Pandas: html, notebook\nIn-Class Activity - Pandas - Solutions: html\n\nData Wrangling: html, notebook\n\nIn-Class Activity - Data Wrangling: html, notebook\nIn-Class Activity - Data Wrangling - Solutions: html\n\nAdvanced Data Wrangling: html, notebook\n\nIn-Class Activity - Advanced Data Wrangling: html, notebook\nIn-Class Activity - Advanced Data Wrangling - Solutions: html\n\n\n\n\nProblem Set\n\nGradeScope Questions about Array programming with NumPy paper (Check the Course Canvas page)\nAdvanced Data Wrangling In-Class Activity (link and notebook above).\n\n\n\nRecommended Readings\n\nPython Programming for Data Science\nPython Data Science Handbook (PDSH)\n\n\n\nAdditional Resources\n\nPython documentation\nThink Python: How to Think Like a Computer Scientist\nA Whirlwind Tour of Python (WTP)\nPython for Data Analysis\nArray programming with NumPy paper\nPandas Tutor\nLearning Data Science\nKaggle Learn Python Tutorials\nResearch Software Engineering with Python\nIntroduction to Cultural Analytics & Python\nPython for Data Science\nCoding for Economists",
    "crumbs": [
      "Materials",
      "Topic 3: Python Essentials"
    ]
  },
  {
    "objectID": "topics-pages/page-topic-06.html",
    "href": "topics-pages/page-topic-06.html",
    "title": "Topic 06",
    "section": "",
    "text": "Lectures Notes:\n\nXXX\nXXX\n\n\n\nSlides\n\nTopic 01:Introduction, Set up, IDEs, Command line\n\n\n\nReadings\nXXXX\nRequired Readings\n\nXXX\nXXX\n\nReadings\n\nXXXX\n\nAdditional\n\nXXX"
  },
  {
    "objectID": "topics-pages/page-topic-10.html",
    "href": "topics-pages/page-topic-10.html",
    "title": "Topic 10",
    "section": "",
    "text": "Lectures Notes:\n\nXXX\nXXX\n\n\n\nSlides\n\nTopic 01:Introduction, Set up, IDEs, Command line\n\n\n\nReadings\nXXXX\nRequired Readings\n\nXXX\nXXX\n\nReadings\n\nXXXX\n\nAdditional\n\nXXX"
  },
  {
    "objectID": "topics-pages/page-topic-05.html",
    "href": "topics-pages/page-topic-05.html",
    "title": "Topic 05",
    "section": "",
    "text": "Lectures Notes:\n\nXXX\nXXX\n\n\n\nSlides\n\nTopic 01:Introduction, Set up, IDEs, Command line\n\n\n\nReadings\nXXXX\nRequired Readings\n\nXXX\nXXX\n\nReadings\n\nXXXX\n\nAdditional\n\nXXX"
  },
  {
    "objectID": "topics-pages/page-topic-09.html",
    "href": "topics-pages/page-topic-09.html",
    "title": "Topic 09",
    "section": "",
    "text": "Lectures Notes:\n\nXXX\nXXX\n\n\n\nSlides\n\nTopic 01:Introduction, Set up, IDEs, Command line\n\n\n\nReadings\nXXXX\nRequired Readings\n\nXXX\nXXX\n\nReadings\n\nXXXX\n\nAdditional\n\nXXX"
  },
  {
    "objectID": "lecture_material/material-topic-01/quarto_python_example.html",
    "href": "lecture_material/material-topic-01/quarto_python_example.html",
    "title": "Quarto Python Example",
    "section": "",
    "text": "Here you can add your markdown text."
  },
  {
    "objectID": "lecture_material/material-topic-01/quarto_python_example.html#example-of-using-python-with-quarto",
    "href": "lecture_material/material-topic-01/quarto_python_example.html#example-of-using-python-with-quarto",
    "title": "Quarto Python Example",
    "section": "",
    "text": "Here you can add your markdown text."
  },
  {
    "objectID": "lecture_material/material-topic-01/quarto_python_example.html#code",
    "href": "lecture_material/material-topic-01/quarto_python_example.html#code",
    "title": "Quarto Python Example",
    "section": "Code",
    "text": "Code\nIn the code chunk, you just need to change the programming language you want to use inside of the brackets {}\n\n# R code chunck\n\nlibrary(ggplot2)\n\nmu &lt;- 0\nsigma &lt;- 1\nx &lt;- seq(mu - 3*sigma, mu + 3*sigma, length.out = 100)\ny &lt;- dnorm(x, mean = mu, sd = sigma)\ndata &lt;- data.frame(x, y)\n\nggplot(data, aes(x, y)) +\n  geom_line() +\n  theme_minimal() +\n  labs(title = \"Standard Normal Distribution\", x = \"X\", y = \"Density\")\n\n\n\n\n\n\n\n\n\n# Python code chunck\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport scipy.stats as stats\nimport math\n\nmu = 0\nvariance = 1\nsigma = math.sqrt(variance)\nx = np.linspace(mu - 3*sigma, mu + 3*sigma, 100)\nplt.plot(x, stats.norm.pdf(x, mu, sigma))\nplt.show()"
  },
  {
    "objectID": "lecture_material/material-topic-01/intro-to-quarto.html",
    "href": "lecture_material/material-topic-01/intro-to-quarto.html",
    "title": "Topic 1: Introduction to Quarto for Python",
    "section": "",
    "text": "The document offers a short guide on utilizing Quarto effectively for data science projects with R and Python.[1]"
  },
  {
    "objectID": "lecture_material/material-topic-01/intro-to-quarto.html#quick-tutorial-for-rstudio",
    "href": "lecture_material/material-topic-01/intro-to-quarto.html#quick-tutorial-for-rstudio",
    "title": "Topic 1: Introduction to Quarto for Python",
    "section": "Quick tutorial for RStudio",
    "text": "Quick tutorial for RStudio\nThis is what RStudio looks like when you open it for the first time.\n\n\n\n\n\n\n\n\n\nTop left pane (input/script)\nThis is your code editor. Here you enter code in any file type (.py, .r, .qmd) you are working on. If not working with notebooks, this is just gonna be a plain text file but with a extension that run the commands.\nFor example, enter 2 + 2 in your script and run a line of code by pressing command + enter (Mac) or Ctrl + enter (PC). This is a huge advantage of Rstudio over Jupyter. You can run your code line by line, instead of running the entire cell.\nBottom left pane (output/console)\nThis is the console. It is pretty much like when you open Python/R from the Command line.\nIn the console, the prompt &gt; looks like a greater than symbol. If your prompt begins to look like a + symbol by mistake, simply click in your console and press the esc key on your keyboard as many times as necessary to return to the prompt.\nRstudio uses + when code is broken up across multiple lines and is still expecting more code. A line of code does not usually end until Rstudio finds an appropriate stop parameter or punctuation that completes some code such as a closed round parenthesis ), square bracket ], curly brace }, or quotation mark '.\nIf the output in your console gets too messy, you can clear it by pressing control + l on both Mac and PC. This will not erase any saved data - it will simply make your console easier to read.\nTop right pane (global environment)\nThis is your environment pane. All objects you create will be displayed here.\nBottom right pane (files, plots, packages, and help)\nHere you find useful tabs for navigating your file system, displaying plots, installing packages, and viewing help pages. Press the control key and a number (1 through 9) on your keyboard to shortcut between these panes and tabs."
  },
  {
    "objectID": "lecture_material/material-topic-01/intro-to-quarto-class.html",
    "href": "lecture_material/material-topic-01/intro-to-quarto-class.html",
    "title": "Topic 1: Introduction to Quarto for Python",
    "section": "",
    "text": "The document offers a short guide on utilizing Quarto effectively for data science projects with R and Python.[1]"
  },
  {
    "objectID": "lecture_material/material-topic-01/intro-to-quarto-class.html#quick-tutorial-for-rstudio",
    "href": "lecture_material/material-topic-01/intro-to-quarto-class.html#quick-tutorial-for-rstudio",
    "title": "Topic 1: Introduction to Quarto for Python",
    "section": "Quick tutorial for RStudio",
    "text": "Quick tutorial for RStudio\nThis is what RStudio looks like when you open it for the first time.\n\n\n\n\n\n\n\n\n\nTop left pane (input/script)\nThis is your code editor. Here you enter code in any file type (.py, .r, .qmd) you are working on. If not working with notebooks, this is just gonna be a plain text file but with a extension that run the commands.\nFor example, enter 2 + 2 in your script and run a line of code by pressing command + enter (Mac) or Ctrl + enter (PC). This is a huge advantage of Rstudio over Jupyter. You can run your code line by line, instead of running the entire cell.\nBottom left pane (output/console)\nThis is the console. It is pretty much like when you open Python/R from the Command line.\nIn the console, the prompt &gt; looks like a greater than symbol. If your prompt begins to look like a + symbol by mistake, simply click in your console and press the esc key on your keyboard as many times as necessary to return to the prompt.\nRstudio uses + when code is broken up across multiple lines and is still expecting more code. A line of code does not usually end until Rstudio finds an appropriate stop parameter or punctuation that completes some code such as a closed round parenthesis ), square bracket ], curly brace }, or quotation mark '.\nIf the output in your console gets too messy, you can clear it by pressing control + l on both Mac and PC. This will not erase any saved data - it will simply make your console easier to read.\nTop right pane (global environment)\nThis is your environment pane. All objects you create will be displayed here.\nBottom right pane (files, plots, packages, and help)\nHere you find useful tabs for navigating your file system, displaying plots, installing packages, and viewing help pages. Press the control key and a number (1 through 9) on your keyboard to shortcut between these panes and tabs."
  },
  {
    "objectID": "slides/slides-topic-02-01.html",
    "href": "slides/slides-topic-02-01.html",
    "title": " QTM 350: Data Science Computing ",
    "section": "",
    "text": "Computational Literacy\n\nBinary and Hexadecimal numbers\nCharacters, ASCII, Unicode\nHigh vrs low level programming languages\nCompiled vs interpreted languages\n\n\n\n\nCommand Line\n\nShell basics\nHelp!\nNavigating your system\nManaging your files\nWorking with text files\nRedirects, pipes, and loops\nScripting\n\n\n\n\nVersion Control\n\nData Science Workflow\nReproducibility\nGit and GitHub\n\n\n\n\n\n\n\n\nthis lecture draws on materials from Professor Jacobson Essential Computer Literacy: 50 min.."
  },
  {
    "objectID": "slides/slides-topic-02-01.html#topic-overview",
    "href": "slides/slides-topic-02-01.html#topic-overview",
    "title": " QTM 350: Data Science Computing ",
    "section": "Topic Overview",
    "text": "Topic Overview\n\n\n\nComputational Literacy\n\nBinary and Hexadecimal numbers\nCharacters, ASCII, Unicode\nHigh vrs low level programming languages\nCompiled vs interpreted languages\n\n\n\n\nCommand Line\n\nShell basics\nHelp!\nNavigating your system\nManaging your files\nWorking with text files\nRedirects, pipes, and loops\nScripting\n\n\n\n\nVersion Control\n\nData Science Workflow\nReproducibility\nGit and GitHub\n\n\n\n\n\n\n\n\nthis lecture draws on materials from Professor Jacobson Essential Computer Literacy: 50 min.."
  },
  {
    "objectID": "slides/slides-topic-02-01.html#what-is-a-computer-1",
    "href": "slides/slides-topic-02-01.html#what-is-a-computer-1",
    "title": " QTM 350: Data Science Computing ",
    "section": "What is a Computer?",
    "text": "What is a Computer?\n\n\nHistorically, a computer was a person who makes calculations, especially with a calculating machine.\n\n\n\nTo do calculations we use numbers. How to represent them?"
  },
  {
    "objectID": "slides/slides-topic-02-01.html#representing-numbers",
    "href": "slides/slides-topic-02-01.html#representing-numbers",
    "title": " QTM 350: Data Science Computing ",
    "section": "Representing numbers",
    "text": "Representing numbers\n\nSimplest ways to physically represent numbers for arithmetic:\n\nCounting fingers\nMarked stones, or marked bones\nIncan Rope counting, called Quipu\nThe Abacus"
  },
  {
    "objectID": "slides/slides-topic-02-01.html#introduction-to-binary",
    "href": "slides/slides-topic-02-01.html#introduction-to-binary",
    "title": " QTM 350: Data Science Computing ",
    "section": "Introduction to Binary",
    "text": "Introduction to Binary\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn modern digital computers, transistors act as switches, with 1 for high voltage level and 0 for low voltage level.\nComputers use binary because transistors are easy to fabricate in silicon and can be densely packed on a chip."
  },
  {
    "objectID": "slides/slides-topic-02-01.html#what-is-binary",
    "href": "slides/slides-topic-02-01.html#what-is-binary",
    "title": " QTM 350: Data Science Computing ",
    "section": "What is Binary?",
    "text": "What is Binary?\n\nA binary number is written using only the digits 0 and 1.\nA single binary digit is a bit, e.g., 101 has three bits.\nAn 8-bit group is called a byte.\nBinary numbers grow as follows:\n\n0 represents zero\n1 represents one\n10 represents two\n100 represents four\n1000 represents eight, and so on…"
  },
  {
    "objectID": "slides/slides-topic-02-01.html#binary-for-decimal-3",
    "href": "slides/slides-topic-02-01.html#binary-for-decimal-3",
    "title": " QTM 350: Data Science Computing ",
    "section": "Binary for Decimal 3",
    "text": "Binary for Decimal 3\n\n\nQuestion: What binary number represents 3?\n\n\n101\n\n\n11\n\n\n111\n\n\n010"
  },
  {
    "objectID": "slides/slides-topic-02-01.html#binary-number-for-decimal-3",
    "href": "slides/slides-topic-02-01.html#binary-number-for-decimal-3",
    "title": " QTM 350: Data Science Computing ",
    "section": "Binary Number for Decimal 3",
    "text": "Binary Number for Decimal 3\n\nQuestion: What binary number represents 3?\n\n\n101\n\n\n11\n\n\n111\n\n\n010\n\nAnswer: b. 11\n\nIn binary, the number 3 is represented as 11, which equates to \\((1 \\times 2^1) + (1 \\times 2^0)\\)."
  },
  {
    "objectID": "slides/slides-topic-02-01.html#practice-exercise",
    "href": "slides/slides-topic-02-01.html#practice-exercise",
    "title": " QTM 350: Data Science Computing ",
    "section": "Practice Exercise:",
    "text": "Practice Exercise:\n\nWhat binary number represents 5?\nWhat binary number represents 7?\nWhat binary number represents 9?\nWhat binary number represents 11?"
  },
  {
    "objectID": "slides/slides-topic-02-01.html#machine-code",
    "href": "slides/slides-topic-02-01.html#machine-code",
    "title": " QTM 350: Data Science Computing ",
    "section": "Machine Code",
    "text": "Machine Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMachine code or binary code is binary instructions that a CPU reads and executes, such as: 10001000 01010111 11000101 11110001 10100001 00010110.\nEarly programming was done directly in machine code!"
  },
  {
    "objectID": "slides/slides-topic-02-01.html#distinct-numbers-in-a-byte",
    "href": "slides/slides-topic-02-01.html#distinct-numbers-in-a-byte",
    "title": " QTM 350: Data Science Computing ",
    "section": "Distinct Numbers in a Byte",
    "text": "Distinct Numbers in a Byte\n\nQuestion: How many distinct numbers are represented by a byte?\n\n\n\\(2^{8}-1\\)\n\n\n\\(2^8\\)\n\n\n\\(2\\)\n\n\n\\(2^7\\)"
  },
  {
    "objectID": "slides/slides-topic-02-01.html#distinct-numbers-in-a-byte-1",
    "href": "slides/slides-topic-02-01.html#distinct-numbers-in-a-byte-1",
    "title": " QTM 350: Data Science Computing ",
    "section": "Distinct Numbers in a Byte",
    "text": "Distinct Numbers in a Byte\n\nQuestion: How many distinct numbers are represented by a byte?\n\n\n\\(2^{8}-1\\)\n\n\n\\(2^8\\)\n\n\n\\(2\\)\n\n\n\\(2^7\\)\n\nAnswer: B) \\(2^8\\)\n\nA byte consists of 8 bits.\nEach bit has two possible values (0 or 1).\nTherefore, a byte can represent \\(2^8\\) or 256 distinct numbers, ranging from 0 to 255."
  },
  {
    "objectID": "slides/slides-topic-02-01.html#characters-and-glyphs",
    "href": "slides/slides-topic-02-01.html#characters-and-glyphs",
    "title": " QTM 350: Data Science Computing ",
    "section": "Characters and Glyphs",
    "text": "Characters and Glyphs\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA character is the smallest component of text, like A, B, or /.\nA glyph is the graphical representation of a character.\nIn programming, the display of glyphs is typically handled by GUI (Graphical User Interface) toolkits or font renderers."
  },
  {
    "objectID": "slides/slides-topic-02-01.html#ascii---the-basics",
    "href": "slides/slides-topic-02-01.html#ascii---the-basics",
    "title": " QTM 350: Data Science Computing ",
    "section": "ASCII - The Basics",
    "text": "ASCII - The Basics\n\n\nASCII stands for American Standard Code for Information Interchange.\nStandardized in 1968, it defines numeric codes for characters, ranging from 0 to 127.\nEach character is assigned a unique numeric code value."
  },
  {
    "objectID": "slides/slides-topic-02-01.html#ascii-codes",
    "href": "slides/slides-topic-02-01.html#ascii-codes",
    "title": " QTM 350: Data Science Computing ",
    "section": "ASCII Codes",
    "text": "ASCII Codes\n\n\nASCII defined numeric codes for various characters, with the numeric values running from 0 to 127. For example, the lowercase letter ‘a’ is assigned 97 as its code value.\nUppercase ‘A’ is represented by the code value 65.\nThe code value 0 is the ‘NUL’ character, also known as the null byte."
  },
  {
    "objectID": "slides/slides-topic-02-01.html#ascii-character-range",
    "href": "slides/slides-topic-02-01.html#ascii-character-range",
    "title": " QTM 350: Data Science Computing ",
    "section": "ASCII Character Range",
    "text": "ASCII Character Range\n\n\nControl characters: Codes 0 through 31 and 127 are unprintable.\nSpacing character: Code 32 is a nonprinting space.\nGraphic characters: Codes 33 through 126 are printable."
  },
  {
    "objectID": "slides/slides-topic-02-01.html#ascii-limitations",
    "href": "slides/slides-topic-02-01.html#ascii-limitations",
    "title": " QTM 350: Data Science Computing ",
    "section": "ASCII Limitations",
    "text": "ASCII Limitations\n\n\nASCII only includes unaccented characters.\nLanguages requiring accented characters cannot be represented.\nEven English needs characters like ‘é’ for words such as ‘café’."
  },
  {
    "objectID": "slides/slides-topic-02-01.html#practice-exercise-1",
    "href": "slides/slides-topic-02-01.html#practice-exercise-1",
    "title": " QTM 350: Data Science Computing ",
    "section": "Practice Exercise",
    "text": "Practice Exercise\n\n\nWrite the characters of your name using ASCII codes.\n\nCheck this table!"
  },
  {
    "objectID": "slides/slides-topic-02-01.html#practice-exercise-2",
    "href": "slides/slides-topic-02-01.html#practice-exercise-2",
    "title": " QTM 350: Data Science Computing ",
    "section": "Practice Exercise",
    "text": "Practice Exercise\n\nHere we have an online translator!\n\n‘DAVI’ using ASCII codes.\n\n\n\nCharacter\nASCII Code\n\n\n\n\nD\n68\n\n\nA\n65\n\n\nV\n86\n\n\nI\n73\n\n\n\nNote: If ASCII does not support characters in your name, Unicode will provide a solution."
  },
  {
    "objectID": "slides/slides-topic-02-01.html#hexadecimal-and-unicode",
    "href": "slides/slides-topic-02-01.html#hexadecimal-and-unicode",
    "title": " QTM 350: Data Science Computing ",
    "section": "Hexadecimal and Unicode",
    "text": "Hexadecimal and Unicode\n\n\nASCII uses 7 bits, limiting its range.\nTo represent a broader range of characters, more bits are needed.\nHexadecimal, or hex, is used in Unicode to represent these characters efficiently."
  },
  {
    "objectID": "slides/slides-topic-02-01.html#what-is-hexadecimal",
    "href": "slides/slides-topic-02-01.html#what-is-hexadecimal",
    "title": " QTM 350: Data Science Computing ",
    "section": "What is Hexadecimal?",
    "text": "What is Hexadecimal?\n\n\nHexadecimal is a base-16 number system.\nHex digits include: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\nIn programming, hex is encountered more often than binary for compactness."
  },
  {
    "objectID": "slides/slides-topic-02-01.html#hex-to-binary-mapping",
    "href": "slides/slides-topic-02-01.html#hex-to-binary-mapping",
    "title": " QTM 350: Data Science Computing ",
    "section": "Hex to Binary Mapping",
    "text": "Hex to Binary Mapping\n\n\nEach hex digit corresponds to 4 binary bits:\n\n0000 = 0\n0001 = 1\n0010 = 2\n…\n1110 = E\n1111 = F\n\nOne hex digit represents 4 bits, making it a shorthand for binary.\nThis is due to the fact that four binary digits can represent sixteen possible values (\\(2^4\\)), which aligns with the sixteen possible values of a single hex digit (0 to F)."
  },
  {
    "objectID": "slides/slides-topic-02-01.html#binary-to-hex-conversion",
    "href": "slides/slides-topic-02-01.html#binary-to-hex-conversion",
    "title": " QTM 350: Data Science Computing ",
    "section": "Binary to Hex Conversion",
    "text": "Binary to Hex Conversion\n\n\nConvert binary to hex by grouping into blocks of four bits.\nExample: Binary 1001 1110 0000 1010 converts to Hex 9E0A."
  },
  {
    "objectID": "slides/slides-topic-02-01.html#practice-exercise-3",
    "href": "slides/slides-topic-02-01.html#practice-exercise-3",
    "title": " QTM 350: Data Science Computing ",
    "section": "Practice Exercise",
    "text": "Practice Exercise\n\nConvert the decimal number 13 to binary.\nConvert the decimal number 13 to hexadecimal."
  },
  {
    "objectID": "slides/slides-topic-02-01.html#practice-exercise-4",
    "href": "slides/slides-topic-02-01.html#practice-exercise-4",
    "title": " QTM 350: Data Science Computing ",
    "section": "Practice Exercise",
    "text": "Practice Exercise\nNow, convert the decimal number 27 to binary and then to hexadecimal."
  },
  {
    "objectID": "slides/slides-topic-02-01.html#hexadecimal-in-file-formats",
    "href": "slides/slides-topic-02-01.html#hexadecimal-in-file-formats",
    "title": " QTM 350: Data Science Computing ",
    "section": "Hexadecimal in File Formats",
    "text": "Hexadecimal in File Formats\n\n\nFiles in hex format are often referred to as “binary” files.\nThis terminology is due to the direct conversion between hex and binary.\nThe conversion is unambiguous, making it a practical shorthand."
  },
  {
    "objectID": "slides/slides-topic-02-01.html#hexadecimal-in-html",
    "href": "slides/slides-topic-02-01.html#hexadecimal-in-html",
    "title": " QTM 350: Data Science Computing ",
    "section": "Hexadecimal in HTML",
    "text": "Hexadecimal in HTML\n\nHTML uses hexadecimal to represent colors.\nSix-digit hex numbers specify colors:\n\nFFFFFF = White\n000000 = Black\n\nEach pair of digits represents a color component (RGB).\nEach color channel typically has a range from 0 to 255 (in 8-bit systems), which gives a total of 256 intensity levels for each primary color.\nWhen you combine the three channels, you get a possible color palette of \\(256^3\\) or about 16.7 million colors.\nFor example, an RGB value of 255, 0, 0 corresponds to bright red because the red channel is at full intensity, and the green and blue channels are off."
  },
  {
    "objectID": "slides/slides-topic-02-01.html#encountering-unicode",
    "href": "slides/slides-topic-02-01.html#encountering-unicode",
    "title": " QTM 350: Data Science Computing ",
    "section": "Encountering Unicode",
    "text": "Encountering Unicode\n\n\nEncountering a UnicodeDecodeError in Python indicates a character encoding issue.\nThis often arises when dealing with characters not represented in the ASCII set."
  },
  {
    "objectID": "slides/slides-topic-02-01.html#what-is-unicode",
    "href": "slides/slides-topic-02-01.html#what-is-unicode",
    "title": " QTM 350: Data Science Computing ",
    "section": "What is Unicode?",
    "text": "What is Unicode?\n\n\nUnicode is a standard that maps characters to code points.\nA code point is an integer, usually represented in hexadecimal.\nA Unicode string is a series of code points.\nEncoding is the rule set for converting code points to bytes."
  },
  {
    "objectID": "slides/slides-topic-02-01.html#ascii-and-unicode",
    "href": "slides/slides-topic-02-01.html#ascii-and-unicode",
    "title": " QTM 350: Data Science Computing ",
    "section": "ASCII and Unicode",
    "text": "ASCII and Unicode\n\n\nUnicode code points \\(&lt;\\) 128 directly map to ASCII bytes.\nCode points \\(&gt;=\\) 128 cannot be encoded in ASCII.\nPython will raise a UnicodeEncodeError for these cases.\nUnicode code charts: Unicode Charts"
  },
  {
    "objectID": "slides/slides-topic-02-01.html#utf-8-encoding",
    "href": "slides/slides-topic-02-01.html#utf-8-encoding",
    "title": " QTM 350: Data Science Computing ",
    "section": "UTF-8 Encoding",
    "text": "UTF-8 Encoding\n\n\nUTF-8 stands for Unicode Transformation Format 8-bit.\nIt is a variable-width encoding representing every Unicode character.\nPython uses UTF-8 by default for source code."
  },
  {
    "objectID": "slides/slides-topic-02-01.html#example",
    "href": "slides/slides-topic-02-01.html#example",
    "title": " QTM 350: Data Science Computing ",
    "section": "Example",
    "text": "Example\n\nTo write “DAVI” in Unicode (UTF-8) using hexadecimal code points, you would use the Unicode code points for each character.\nIn UTF-8, the characters in the standard ASCII set, which includes uppercase English letters, are represented by the same values as in ASCII. The code points for ‘D’, ‘A’, ‘V’, and ‘I’ are as follows:\n\n“D”: “\\u0044”\n“A”: “\\u0041”\n“V”: “\\u0056”\n“I”: “\\u0049”\n\n“DAVI” in Unicode (UTF-8) using these escape sequences would be represented as “\\u0044\\u0041\\u0056\\u0049”."
  },
  {
    "objectID": "slides/slides-topic-02-01.html#zuses-computers",
    "href": "slides/slides-topic-02-01.html#zuses-computers",
    "title": " QTM 350: Data Science Computing ",
    "section": "Zuse’s Computers",
    "text": "Zuse’s Computers\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nZuse’s computers, including Z1, Z2, Z3, and Z4, were designed to read binary instructions from punch tape.\nThe logic of these machines was based on binary switching mechanisms (0-1 principle).\nExample: Z4 had 512 bytes of memory."
  },
  {
    "objectID": "slides/slides-topic-02-01.html#what-is-assembly-language",
    "href": "slides/slides-topic-02-01.html#what-is-assembly-language",
    "title": " QTM 350: Data Science Computing ",
    "section": "What is Assembly Language?",
    "text": "What is Assembly Language?\n\n\nAssembly language allows writing machine code in human-readable text.\nEarly assembly programming involved writing code on paper, which was then transcribed to punch cards."
  },
  {
    "objectID": "slides/slides-topic-02-01.html#first-assemblers",
    "href": "slides/slides-topic-02-01.html#first-assemblers",
    "title": " QTM 350: Data Science Computing ",
    "section": "First Assemblers",
    "text": "First Assemblers\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe first assemblers were human!\nProgrammers wrote assembly code, which secretaries transcribed to binary for machine processing."
  },
  {
    "objectID": "slides/slides-topic-02-01.html#high-and-low-level-languages",
    "href": "slides/slides-topic-02-01.html#high-and-low-level-languages",
    "title": " QTM 350: Data Science Computing ",
    "section": "High and Low-Level Languages",
    "text": "High and Low-Level Languages\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHigh-Level Languages: Abstract from hardware details, portable across different systems.\nLow-Level Languages: Closer to machine code, require consideration of hardware specifics."
  },
  {
    "objectID": "slides/slides-topic-02-01.html#compiled-vs-interpreted-languages",
    "href": "slides/slides-topic-02-01.html#compiled-vs-interpreted-languages",
    "title": " QTM 350: Data Science Computing ",
    "section": "Compiled vs Interpreted Languages",
    "text": "Compiled vs Interpreted Languages\n\n\nCompiled Languages: Convert code to binary instructions before execution (e.g., C++, Fortran, Go).\nInterpreted Languages: Run inside a program that interprets and executes commands immediately (e.g., R, Python)."
  },
  {
    "objectID": "slides/slides-topic-02-01.html#performance-and-flexibility",
    "href": "slides/slides-topic-02-01.html#performance-and-flexibility",
    "title": " QTM 350: Data Science Computing ",
    "section": "Performance and Flexibility",
    "text": "Performance and Flexibility\n\n\nCompiled languages are generally faster but require a compilation step.\nInterpreted languages are more flexible but can be slower, though this can be mitigated (e.g., Python with C++ libraries)."
  },
  {
    "objectID": "slides/slides-topic-02-01.html#summary-1",
    "href": "slides/slides-topic-02-01.html#summary-1",
    "title": " QTM 350: Data Science Computing ",
    "section": "Summary",
    "text": "Summary\n\n\nComputational Literacy: Binary and hexadecimal numbers, characters (ASCII, Unicode), and distinction between high vs low-level programming languages.\nEarly Computing: Konrad Zuse’s pioneering work with programmable digital computers and the use of binary arithmetic.\nAssembly Language: The initial approach to programming using human-readable instructions for machine code.\nCalculators: The evolution from Leibniz’s four-species calculating machine to modern electronic computing.\nSilicon Microchip Computers: The 1970s revolution with transistors, integrated circuits, and the emergence of Von Neumann architecture.\nModern Programming Languages: The spectrum from low-level assembly languages to high-level languages like Python; distinction between compiled and interpreted languages."
  },
  {
    "objectID": "slides/slides-topic-01.html",
    "href": "slides/slides-topic-01.html",
    "title": " QTM 350: Data Science Computing ",
    "section": "",
    "text": "Introductions\nMotivation\nCourse Overview and Logistics\nSet up\nIDEs\n\nJupyter\nQuarto"
  },
  {
    "objectID": "slides/slides-topic-01.html#topic-overview",
    "href": "slides/slides-topic-01.html#topic-overview",
    "title": " QTM 350: Data Science Computing ",
    "section": "Topic Overview",
    "text": "Topic Overview\n\n\nIntroductions\nMotivation\nCourse Overview and Logistics\nSet up\nIDEs\n\nJupyter\nQuarto"
  },
  {
    "objectID": "slides/slides-topic-01.html#instructor",
    "href": "slides/slides-topic-01.html#instructor",
    "title": " QTM 350: Data Science Computing ",
    "section": "Instructor",
    "text": "Instructor\n\n\n\n\n\n\n\n\n\n\n\ndavi.moreira@emory.edu\nhttps://davi- moreira.github.io/\n\n\nVisiting Assistant Professor in the QTM Department at Emory University;\n\n\n\nMy academic work addresses Political Communication, Data Science, Text as Data, Artificial Intelligence, and Comparative Politics.\n\n\n\nM&E Specialist consultant - World Bank (Brazil, Mozambique, Angola, and DRC)"
  },
  {
    "objectID": "slides/slides-topic-01.html#instructors-passions",
    "href": "slides/slides-topic-01.html#instructors-passions",
    "title": " QTM 350: Data Science Computing ",
    "section": "Instructor’s Passions",
    "text": "Instructor’s Passions"
  },
  {
    "objectID": "slides/slides-topic-01.html#instructors-passions-1",
    "href": "slides/slides-topic-01.html#instructors-passions-1",
    "title": " QTM 350: Data Science Computing ",
    "section": "Instructor’s Passions",
    "text": "Instructor’s Passions"
  },
  {
    "objectID": "slides/slides-topic-01.html#students",
    "href": "slides/slides-topic-01.html#students",
    "title": " QTM 350: Data Science Computing ",
    "section": "Students",
    "text": "Students\n\n\nIt is your turn! - 5 minutes\n\n\n\nPresent yourself to your left/right colleague and tell her/him what are the current two main passions in your life."
  },
  {
    "objectID": "slides/slides-topic-01.html#section",
    "href": "slides/slides-topic-01.html#section",
    "title": " QTM 350: Data Science Computing ",
    "section": "",
    "text": "Large-scale data + algorithms to answer questions"
  },
  {
    "objectID": "slides/slides-topic-01.html#rise-of-the-digital-information-age",
    "href": "slides/slides-topic-01.html#rise-of-the-digital-information-age",
    "title": " QTM 350: Data Science Computing ",
    "section": "Rise of the digital information age",
    "text": "Rise of the digital information age\n\n\n\n\n\n\n\n\n\n\n\nhttps://www.washingtonpost.com/wp-dyn/content/graphic/2011/02/11/GR2011021100614.html"
  },
  {
    "objectID": "slides/slides-topic-01.html#social-media-data",
    "href": "slides/slides-topic-01.html#social-media-data",
    "title": " QTM 350: Data Science Computing ",
    "section": "Social Media Data",
    "text": "Social Media Data"
  },
  {
    "objectID": "slides/slides-topic-01.html#new-data-formats-image-text-videos..",
    "href": "slides/slides-topic-01.html#new-data-formats-image-text-videos..",
    "title": " QTM 350: Data Science Computing ",
    "section": "New Data Formats: Image, text, videos..",
    "text": "New Data Formats: Image, text, videos.."
  },
  {
    "objectID": "slides/slides-topic-01.html#online-research",
    "href": "slides/slides-topic-01.html#online-research",
    "title": " QTM 350: Data Science Computing ",
    "section": "Online Research",
    "text": "Online Research"
  },
  {
    "objectID": "slides/slides-topic-01.html#powerful-and-cheap-computer-power",
    "href": "slides/slides-topic-01.html#powerful-and-cheap-computer-power",
    "title": " QTM 350: Data Science Computing ",
    "section": "Powerful and Cheap Computer Power",
    "text": "Powerful and Cheap Computer Power"
  },
  {
    "objectID": "slides/slides-topic-01.html#as-a-consequence",
    "href": "slides/slides-topic-01.html#as-a-consequence",
    "title": " QTM 350: Data Science Computing ",
    "section": "As a consequence:",
    "text": "As a consequence:\n\nAbundance of data we can use for research and governments can use to make better decisions\n\nNovel research questions\nNew ways to answer old, long-standing research questions\n\nNew technologies also have social implications and can generate important policy questions.\n\nPrivacy issues\nUse of technology by bad actors.\nUse of technology by governments to censor/monitor citizens.\netc…"
  },
  {
    "objectID": "slides/slides-topic-01.html#logistics",
    "href": "slides/slides-topic-01.html#logistics",
    "title": " QTM 350: Data Science Computing ",
    "section": "Logistics",
    "text": "Logistics\n\nSyllabus\nSchedule\nOffice Hours\nMaterials:\n\nhttps://davi-moreira.github.io/2024S_dsc_emory_qtm_350/\nCanvas"
  },
  {
    "objectID": "slides/slides-topic-01.html#jupyter",
    "href": "slides/slides-topic-01.html#jupyter",
    "title": " QTM 350: Data Science Computing ",
    "section": "Jupyter:",
    "text": "Jupyter:\nSee Jupyter Notebook in the Class Website"
  },
  {
    "objectID": "slides/slides-topic-01.html#quarto",
    "href": "slides/slides-topic-01.html#quarto",
    "title": " QTM 350: Data Science Computing ",
    "section": "Quarto",
    "text": "Quarto\nSee Quarto Notebook in the Class Website"
  },
  {
    "objectID": "slides/slides-topic-01.html#summary-1",
    "href": "slides/slides-topic-01.html#summary-1",
    "title": " QTM 350: Data Science Computing ",
    "section": "Summary",
    "text": "Summary\nSome key things to take from this topic:\n\nData Science is about data:\n\nData collection;\nData management;\nData storage;\nData structure;\nData, Data, Data ...\n\nData Science is also about…\n\nCollaboration!\n\nThe schedule is tentative;\nJupiter Notebook will be the main tool of the course, but there are other IDEs:\n\nGoogle Colab\nQuarto"
  },
  {
    "objectID": "problem_sets/ps02/ps02.html",
    "href": "problem_sets/ps02/ps02.html",
    "title": "Problem Set 2",
    "section": "",
    "text": "Github Classroom Link"
  },
  {
    "objectID": "problem_sets/ps02/ps02.html#materials",
    "href": "problem_sets/ps02/ps02.html#materials",
    "title": "Problem Set 2",
    "section": "",
    "text": "Github Classroom Link"
  },
  {
    "objectID": "syllabus.html",
    "href": "syllabus.html",
    "title": "Syllabus: QTM 350 - Data Science Computing",
    "section": "",
    "text": "This course equips students with computing skills and knowledge for data science applications. Students will gain knowledge foundations and hands-on experience with technologies such as Version Control, Project Collaboration, Data Structures and Algorithms. Prospective data scientists, statisticians, and other quantitative professionals will learn computational foundations to efficiently utilize data, data structures, and algorithms for data science.\nCourse Website: https://davi-moreira.github.io/2024S_dsc_emory_qtm_350",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "syllabus.html#course-description",
    "href": "syllabus.html#course-description",
    "title": "Syllabus: QTM 350 - Data Science Computing",
    "section": "",
    "text": "This course equips students with computing skills and knowledge for data science applications. Students will gain knowledge foundations and hands-on experience with technologies such as Version Control, Project Collaboration, Data Structures and Algorithms. Prospective data scientists, statisticians, and other quantitative professionals will learn computational foundations to efficiently utilize data, data structures, and algorithms for data science.\nCourse Website: https://davi-moreira.github.io/2024S_dsc_emory_qtm_350",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "syllabus.html#instructor-and-tas",
    "href": "syllabus.html#instructor-and-tas",
    "title": "Syllabus: QTM 350 - Data Science Computing",
    "section": "Instructor and TAs",
    "text": "Instructor and TAs\n\nInstructor: Professor Davi Moreira\n\nEmail: davi.moreira@emory.edu\nOffice hours: Tuesdays, 9:15am - 10:15am, or by appointment\n\nZoom link in your Course Canvas Page.\n\n\n\n\nTeaching Assistant: Michael Cao\n\nEmail: michael.cao@emory.edu\nOffice Hours: Mondays, 6-7 pm\n\nZoom link in your Course Canvas Page.",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "syllabus.html#learning-outcomes",
    "href": "syllabus.html#learning-outcomes",
    "title": "Syllabus: QTM 350 - Data Science Computing",
    "section": "Learning Outcomes",
    "text": "Learning Outcomes\nBy the end of this course, students will be able to:\n\n\nDemonstrate proficiency in data science project collaboration and version control.\n\n\nUtilize advanced data storage, manipulation, and querying.\n\n\nHigh-level understanding of data structures, and algorithms.\n\n\nCritically navigate the emergent trends in data science computing.",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "syllabus.html#objectives",
    "href": "syllabus.html#objectives",
    "title": "Syllabus: QTM 350 - Data Science Computing",
    "section": "Objectives",
    "text": "Objectives\n\nConceptual Understanding: To provide students with a foundational grasp of data structures and algorithms.\nTechnical Proficiency: To equip students with practical skills in version control, Python programming, data structures, and algorithms enabling them to execute data manipulation and analysis tasks proficiently.\nCritical Integrated Learning: To offer a holistic educational experience that combines theoretical learning with practice, ensuring students can apply their knowledge to real-world projects and foster an awareness of emerging trends in the data science computing landscape.",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "syllabus.html#course-references",
    "href": "syllabus.html#course-references",
    "title": "Syllabus: QTM 350 - Data Science Computing",
    "section": "Course References",
    "text": "Course References\n\nComputing Skills for Biologists: A toolbox with basic computational skills necessary for the course.\nElements of Data Science: a digital textbook by Allen Downey written in the form of Jupyter notebooks. It provides an introduction to data science in Python for students with limited programming experience.\nThink Python: An introduction to programming using Python.\nApplied Computing: Applied Computing is an online textbook. It provides an introduction to spreadsheets and SQL. To view the book, students need to register using the course name.\nSQL & NoSQL Databases: Models, Languages, Consistency Options, and Architectures for Big Data Management: Explores relational (SQL) and non-relational (NoSQL) databases. Covers database management, modeling, languages, consistency, architecture, and more.\nPro Git Book: A comprehensive resource for learning Git, covering everything from the basics to advanced topics by Scott Chacon and Ben Straub.",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "syllabus.html#additional-references",
    "href": "syllabus.html#additional-references",
    "title": "Syllabus: QTM 350 - Data Science Computing",
    "section": "Additional References",
    "text": "Additional References\n\n\nBig Data: Principles and best practices of scalable real-time data systems:: It describes a scalable, easy to understand approach to big data systems that can be built and run by a small team.\nVersion Control with Git: Powerful Tools and Techniques for Collaborative Software Development: This book explains how Git works and how to use it effectively. By Jon Loeliger and Matthew McCullough.\nGitHub Learning Lab: Offers a variety of exercises to get hands-on experience using Git and GitHub.",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "syllabus.html#assessment",
    "href": "syllabus.html#assessment",
    "title": "Syllabus: QTM 350 - Data Science Computing",
    "section": "Assessment",
    "text": "Assessment\nFinal grades will be based on:\n\n\n\nAssignment\nPercentage\n\n\n\n\nLecture Quizzes and Activities\n60%\n\n\nProblem Sets\n40%\n\n\n\n\n\nLecture Quizzes and Activities\nEach lecture will be accompanied by a set of questions and/or practice activity, available on the course’s Canvas page or Webpage to be completed individually. Students may complete these quizzes and activities either during or after class, the due dates will be posted in the course canvas page. To accommodate the learning process, the lowest two quizzes scores will be excluded from the final grade calculation. While individual submission is mandatory, collaborative discussions are encouraged. Please note that no extensions will be granted under any circumstances, ensuring fairness and consistency in assessment for all students.\n\n\nProblem Sets\nProblem sets aligned with each topic will be assigned to solidify and apply the concepts covered. These sets are to be collaboratively developed in groups of up to three members, emphasizing the importance of code collaboration. Consequently, individual submissions will not be accepted. Assignments will be distributed via Canvas and/or GitHub, and may be formatted as either a Jupyter Notebook (.ipynb), Quarto documents (.qmd), or HTML (.html). Groups will be required to submit the complete source code of their assignments (.ipynb, .qmd, or .html). Each problem set will be meticulously evaluated, with grading based on both the accuracy and the overall quality of the work submitted. For instance, you must guarantee:\n\nAll code must run;\nEach problem set material will have its own GitHub repository;\nReadable Solutions: To facilitate effective evaluation and comprehension of the coding assignments, students must adhere to the following standards for code readability:\n\nComprehensive Commenting: All code must include thorough comments. These comments are essential as they allow the Professor and Teaching Assistants to understand the purpose and functionality of the code solely through these annotations. It is crucial that the comments are clear and concise, providing insight into the logic and purpose behind each segment of code.\n\n\nStructured Code Segmentation: Solutions should be methodically organized into distinct code chunks within Jupyter or R Markdown notebooks. For clarity on this format, refer to examples provided in class or consult with the Professor or Teaching Assistants.\n\n\nDetailed Documentation of Functions: Every function defined by a student must be accompanied by a docstring. This documentation should clearly explain the function’s purpose, describe each input argument, and outline what the function returns.",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "syllabus.html#grading",
    "href": "syllabus.html#grading",
    "title": "Syllabus: QTM 350 - Data Science Computing",
    "section": "Grading",
    "text": "Grading\nEach student’s final grade will be based on the following after rounding up to the nearest point:\n\n\n\nGrade\nRange\n\n\n\n\nA\n91% – 100%\n\n\nA-\n86% – 90%\n\n\nB+\n81% – 85%\n\n\nB\n76% – 80%\n\n\nB-\n71% – 75%\n\n\nC\n66% – 70%\n\n\nD\n60% – 65%\n\n\nF\n&lt; 60%",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "syllabus.html#ai-policy",
    "href": "syllabus.html#ai-policy",
    "title": "Syllabus: QTM 350 - Data Science Computing",
    "section": "AI policy",
    "text": "AI policy\nI encourage you to use AI tools you believe will enhance your individual or group performance. Learning to use AI is a valuable and emerging skill, and I am available to provide support and assistance with these tools during office hours or by appointment.\nBe aware of the following guidelines:\n\nYou are not allowed to use AI tools during the exams.\nProviding low-effort prompts will result in low-quality outputs. You must refine your prompts to achieve desirable outcomes. Use the course knowledge for that!\nDo not blindly trust the information provided by the output. If the output contains a number, index, analysis, conclusion, or fact, assume it is incorrect and check its veracity. Any errors or omissions resulting from using the AI tool will be your responsibility. Remember, the AI tool works better for topics that you already understand.\nWhile AI is a tool, you must acknowledge its use. Always cite! Include a paragraph or note at the end of any document to mention that you used AI on its development.",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "syllabus.html#academic-integrity",
    "href": "syllabus.html#academic-integrity",
    "title": "Syllabus: QTM 350 - Data Science Computing",
    "section": "Academic Integrity",
    "text": "Academic Integrity\nUpon every individual who is a part of Emory University falls the responsibility for maintaining in the life of Emory a standard of unimpeachable honor in all academic work. The Honor Code of Emory College is based on the fundamental assumption that every loyal person of the University not only will conduct his or her own life according to the dictates of the highest honor, but will also refuse to tolerate in others action which would sully the good name of the institution. Academic misconduct is an offense generally defined as any action or inaction which is offensive to the integrity and honesty of the members of the academic community. The typical sanction for a violation of the Emory Honor Code is an F in the course. Any suspected case of academic misconduct will be referred to the Emory Honor Council.",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "syllabus.html#communication",
    "href": "syllabus.html#communication",
    "title": "Syllabus: QTM 350 - Data Science Computing",
    "section": "Communication",
    "text": "Communication\n\nCheck the Course Website and Canvas Page regularly to keep yourself informed with up-to-date information about the course. Also, be sure to check the course syllabus before asking any questions about the course schedule/policies.\nIf you cannot attend the office hours due to conflicts with other course schedule or attending the university-sanctioned events (proof required), email the instructor at least two days in advance to set up an appointment. Note that each appointment will be 15-minutes long, and it may be done in a small group or individually. No appointments will be allowed nearing the exam dates.\nWhen attending virtual office hours, make sure you are in a private setting with a little to no background noise. The use of headphones is strongly encouraged. This is especially true when you are discussing private matters with the instructor.\nDo not use email for asking content-related questions, and do not use Canvas messages.\nDo not email me your private stories. Keep your email brief, and you will receive a response from me within 48 hours, except for the weekends. Similarly, if you receive an email from me, you are also expected to respond within 48 hours. Set up an individual appointment to discuss such things.\nFinally, if you are experiencing situations that negatively impact your overall student life, you should immediately contact the Office of Undergraduate Education.",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "syllabus.html#regarding-absences",
    "href": "syllabus.html#regarding-absences",
    "title": "Syllabus: QTM 350 - Data Science Computing",
    "section": "Regarding absences",
    "text": "Regarding absences\n\nIf you miss a lecture for any reasons, understand that you are still responsible for the missed course materials. First, review the missed materials, then you may attend the instructor office hours to ask specific questions.\nAttendance is not monitored in lecture except on the exam dates.\nEmory College of Arts and Sciences policy states, “A student who fails to take any required midterm or final examination at the scheduled time may not make up the examination without written permission from a dean in the Office for Undergraduate Education. Permission will be granted only for illness or other compelling reasons, such as participation in scheduled events off-campus as an official representative of the University.",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "syllabus.html#access-and-disability-resources",
    "href": "syllabus.html#access-and-disability-resources",
    "title": "Syllabus: QTM 350 - Data Science Computing",
    "section": "Access and Disability Resources",
    "text": "Access and Disability Resources\nStudents with medical/health conditions that might impact academic success should visit the Department of Accessibility Services (DAS) to determine eligibility for appropriate accommodations. Students who receive accommodations must contact the instructor with an Accommodation Letter from the DAS at the beginning of the semester, or as soon as the accommodation is granted. If you have DAS accommodations, you must inform the instructor after confirming that your accommodation letter is available in the DAS web portal. The instructor will respond to your email confirming which accommodations you will receive for this class. If you wish to do so, you may request an individual meeting to further discuss the specific accommodations.",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "syllabus.html#subject-to-change-policy",
    "href": "syllabus.html#subject-to-change-policy",
    "title": "Syllabus: QTM 350 - Data Science Computing",
    "section": "Subject to Change Policy",
    "text": "Subject to Change Policy\nWhile I will try to adhere to the course schedule as much as possible, I also want to adapt to your learning pace and style. The syllabus and course plan may change in the semester.",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "syllabus.html#schedule",
    "href": "syllabus.html#schedule",
    "title": "Syllabus: QTM 350 - Data Science Computing",
    "section": "Schedule",
    "text": "Schedule",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "slides/slides-topic-02-03.html#topic-overview",
    "href": "slides/slides-topic-02-03.html#topic-overview",
    "title": " QTM 350: Data Science Computing ",
    "section": "Topic Overview",
    "text": "Topic Overview\n\n\n\nComputational Literacy\n\nBinary and Hexadecimal numbers\nCharacters, ASCII, Unicode\nHigh vrs low level programming languages\nCompiled vs interpreted languages\n\n\n\n\nCommand Line\n\nShell basics\nHelp!\nNavigating your system\nManaging your files\nWorking with text files\nRedirects, pipes, and loops\nScripting\n\n\n\n\nVersion Control\n\nData Science Workflow\nReproducibility\nGit and GitHub\n\n\n\n\n\n\n\n\nthis lecture draws on materials from Simon Munzert Intro to Data Science."
  },
  {
    "objectID": "slides/slides-topic-02-03.html#taming-chaos",
    "href": "slides/slides-topic-02-03.html#taming-chaos",
    "title": " QTM 350: Data Science Computing ",
    "section": "Taming chaos",
    "text": "Taming chaos\n\n\nIn the data science workflow, there are two sorts of surprises and cognitive stress:\n\nAnalytical (often good)\nInfrastructural (almost always bad)\n\n\nAnalytical surprise is when you learn something from or about the data.\nInfrastructural surprise is when you discover that:\n\n\n\nYou can’t find what you did before.\nThe analysis code breaks.\nThe report doesn’t compile.\nThe collaborator can’t run your code.\n\n\n\nGood project management lets you focus on the right kind of stress."
  },
  {
    "objectID": "slides/slides-topic-02-03.html#a-computer-in-a-nutshell",
    "href": "slides/slides-topic-02-03.html#a-computer-in-a-nutshell",
    "title": " QTM 350: Data Science Computing ",
    "section": "A computer in a nutshell",
    "text": "A computer in a nutshell\n\n\n\n\nDave Kerr\n\n\n\n\n\nThe operating system (OS) is system software that interfaces with (and manages access to) a computer’s hardware. It also provides software resources.\nThe OS is divided into the kernel and user space.\nThe kernel is the core of the OS. It’s responsible for interfacing with hardware (drivers), managing resources etc. Running software in the kernel is extremely sensitive! That’s why users are kept away from it.\nThe user space provides an interface for users, who can run programs/applications on the machine. Hardware access of programs (e.g., memory usage) is managed by the kernel. Programs in user space are essentially in sandboxes, which sets a limit to how much damage they can do."
  },
  {
    "objectID": "slides/slides-topic-02-03.html#a-computer-in-a-nutshell-1",
    "href": "slides/slides-topic-02-03.html#a-computer-in-a-nutshell-1",
    "title": " QTM 350: Data Science Computing ",
    "section": "A computer in a nutshell",
    "text": "A computer in a nutshell\n\n\n\n\n\n\n\n\n\n\n\n\n\nCredit Dave Kerr/Kkchaudhary11\n\n\n\n\nThe shell is just a general name for any user space program that allows access to resources in the system, via some kind of interface.\nShells come in many different flavours but are generally provided to aid a human operator in accessing the system. This could be interactively, by typing at a terminal, or via scripts, which are files that contain a sequence of commands.\nModern computers use graphical user interfaces (GUIs) as the standard tool for human-computer interaction.\nWhy “kernel” and “shell”? The kernel is the soft, edible part of a nut or seed, which is surrounded by a shell to protect it. Useful metaphor, no?"
  },
  {
    "objectID": "slides/slides-topic-02-03.html#interacting-with-the-shell",
    "href": "slides/slides-topic-02-03.html#interacting-with-the-shell",
    "title": " QTM 350: Data Science Computing ",
    "section": "Interacting with the shell",
    "text": "Interacting with the shell\n\n\n\n\n\n\n\n \n\n\nCredit Dave Kerr/Rama/Musée Bolo/ClickRick\n\n\n\n\nThings are still a bit more complicated.\nWe’re not directly interacting with the “shell” but using a terminal.\nA terminal is just a program that reads input from the keyboard, passes that input to another program, and displays the results on the screen.\nA shell program on its own does not do this - it requires a terminal as an interface.\nWhy “terminal”? Back in the old days (even before computer screen existed), terminal machines (hardware!) were used to let humans interface with large machines (“mainframes”). Often many terminals were connected to a single machine.\nWhen you want to work with a computer in a data center (or remotely ~ cloud computing), you’ll still do pretty much the same."
  },
  {
    "objectID": "slides/slides-topic-02-03.html#interacting-with-the-shell-1",
    "href": "slides/slides-topic-02-03.html#interacting-with-the-shell-1",
    "title": " QTM 350: Data Science Computing ",
    "section": "Interacting with the shell",
    "text": "Interacting with the shell\n\n\n\n\n\n\n\n\nCredit Dave Kerr\n\n\n\nTerminals are really quite simple - they’re just interfaces.\nThe first thing that a terminal program will do is run a shell program - a program that we can use to operate the computer.\nBack to the shell: the shell usually takes input\n(a) interactively from the user via the terminal's **command line**.\n(b) executes scripts (without command line).\nIn interactive mode the shell then returns output\n(a) to the terminal where it is printed/shown.\n(b) to files or other locations.\nThe command line (or command prompt) represents what is shown and entered in the terminal. They can be customized (e.g., with color highlighting) to make interaction more convenient."
  },
  {
    "objectID": "slides/slides-topic-02-03.html#shell-variants",
    "href": "slides/slides-topic-02-03.html#shell-variants",
    "title": " QTM 350: Data Science Computing ",
    "section": "Shell variants",
    "text": "Shell variants\n\n\n\nLeft: Command Prompt, Right: Bash    Left: C Shell, Right: more shells     Credit Read-back spider/Dave Kerr\n\n\n\n\nIt is important to note that there are many different shell programs, and they differ in terms of functionality.\nOn most Unix-like systems, the default shell is a program called bash, which stands for “Bourne Again Shell”.\nOther examples are the Z Shell (or zsh; default on MacOS), Windows Command Prompt (cmd.exe, the default CLI on MS Windows), Windows PowerShell, C Shell, and many more.\nWhen a terminal opens, it will immediately start the user’s preferred shell program. (This can be changed.)"
  },
  {
    "objectID": "slides/slides-topic-02-03.html#why-bother-with-the-shell-1",
    "href": "slides/slides-topic-02-03.html#why-bother-with-the-shell-1",
    "title": " QTM 350: Data Science Computing ",
    "section": "Why bother with the shell?",
    "text": "Why bother with the shell?\n\n\n\n\nWhy using this…\n\n\n\n\n\n\n\n\n\n… instead of this?"
  },
  {
    "objectID": "slides/slides-topic-02-03.html#why-bother-with-the-shell-2",
    "href": "slides/slides-topic-02-03.html#why-bother-with-the-shell-2",
    "title": " QTM 350: Data Science Computing ",
    "section": "Why bother with the shell?",
    "text": "Why bother with the shell?\n\nSpeed. Typing is fast: A skilled shell user can manipulate a system at dazzling speeds just using a keyboard. Typing commands is generally much faster than exploring through user interfaces with a mouse.\nPower. Both for executing commands and for fixing problems. There are some things you just can’t do in an IDE or GUI. It also avoids memory complications associated with certain applications and/or IDEs.\nReproducibility. Scripting is reproducible, while clicking is not.\nPortability. A shell can be used to interface to almost any type of computer, from a mainframe to a Raspberry Pi, in a very similar way. The shell is often the only game in town for high performance computing (interacting with servers and super computers).\nAutomation. Shells are programmable: Working in the shell allows you to program workflows, that is create scripts to automate time-consuming or repetitive processes.\nBecome a marketable data scientist. Modern programming is often polyglot. The shell provides a common interface for tooling. Modern solutions are often built to run in containers on Linux. In this environment shell knowledge has become very valuable. In short, the shell is having a renaissance in the age of data science."
  },
  {
    "objectID": "slides/slides-topic-02-03.html#the-unix-philosophy-1",
    "href": "slides/slides-topic-02-03.html#the-unix-philosophy-1",
    "title": " QTM 350: Data Science Computing ",
    "section": "The Unix philosophy",
    "text": "The Unix philosophy\nThe shell tools that we’re going to be using have their roots in the Unix family of operating systems originally developed at Bells Labs in the 1970s.\nBesides paying homage, acknowledging the Unix lineage is important because these tools still embody the “Unix philosophy”:\n\nDo One Thing And Do It Well\n\n\nBy pairing and chaining well-designed individual components, we can build powerful and much more complex larger systems.\nYou can see why the Unix philosophy is also referred to as “minimalist and modular”.\nAgain, this philosophy is very clearly expressed in the design and functionality of the Unix shell."
  },
  {
    "objectID": "slides/slides-topic-02-03.html#things-to-use-the-shell-for",
    "href": "slides/slides-topic-02-03.html#things-to-use-the-shell-for",
    "title": " QTM 350: Data Science Computing ",
    "section": "Things to use the shell for",
    "text": "Things to use the shell for\n\nVersion control with Git\nRenaming and moving files en masse\nFinding things on your computer\nCombining and manipulating PDFs\nInstalling and updating software\nScheduling tasks\nMonitoring system resources\nConnecting to cloud environments\nRunning analyses (“jobs”) on super computers\netc."
  },
  {
    "objectID": "slides/slides-topic-02-03.html#shell-first-look",
    "href": "slides/slides-topic-02-03.html#shell-first-look",
    "title": " QTM 350: Data Science Computing ",
    "section": "Shell: First look",
    "text": "Shell: First look\nLet’s open up our shell.\nA convenient way to do this is through RStudio’s built-in Terminal.\nHitting Shift+Alt+T (or Shift+⌥+R on a Mac) will cause a “Terminal” tab to open up next to the “Console” tab.\nYour system default shell is loaded. To find out what that is, type:\necho $SHELL\n\n\n\n/bin/zsh\n\n\n\nIt’s Z bash in my case.\n\nOf course, it’s always possible to open up the Shell directly if you prefer. It’s your turn!\n\nLinux\nMac\nWindows"
  },
  {
    "objectID": "slides/slides-topic-02-03.html#shell-first-look-1",
    "href": "slides/slides-topic-02-03.html#shell-first-look-1",
    "title": " QTM 350: Data Science Computing ",
    "section": "Shell: First look",
    "text": "Shell: First look\nYou should see something like:\n username@hostname:~$\nThis is shell-speak for: “Who am I and where am I?” \n\nusername denotes a specific user (one of potentially many on this computer).\n@hostname denotes the name of the computer or server.\n:~ denotes the directory path (where ~ signifies the user’s home directory).\n$ (or maybe %) denotes the start of the command prompt.\n\n(For a special “superuser” called root, the dollar sign will change to a #)."
  },
  {
    "objectID": "slides/slides-topic-02-03.html#useful-keyboard-shortcuts",
    "href": "slides/slides-topic-02-03.html#useful-keyboard-shortcuts",
    "title": " QTM 350: Data Science Computing ",
    "section": "Useful keyboard shortcuts",
    "text": "Useful keyboard shortcuts\n\nTab completion.\nUse the ↑ (and ↓) keys to scroll through previous commands.\nCtrl+→ (and Ctrl+←) to skip whole words at a time.\nCtrl+a moves the cursor to the beginning of the line.\nCtrl+e moves the cursor to the end of the line.\nCtrl+k deletes everything to the right of the cursor.\nCtrl+u deletes everything to the left of the cursor.\nCtrl+Shift+c to copy and Ctrl+Shift+v to paste (or just ⌘+ c/v on a Mac).\nCtrl+l clears your terminal."
  },
  {
    "objectID": "slides/slides-topic-02-03.html#syntax-1",
    "href": "slides/slides-topic-02-03.html#syntax-1",
    "title": " QTM 350: Data Science Computing ",
    "section": "Syntax",
    "text": "Syntax\n\n\n All Bash commands have the same basic syntax:\n\ncommand option(s) argument(s)\n\nExamples: \n$ ls -lh ~/Documents/\n\n$ sort -u myfile.txt\n\n\nCommands \n\nYou don’t always need options or arguments.\nFor example:\n\n$ ls ~/Documents/ and $ ls -lh are both valid commands that will yield output.\n\n\n\n\nHowever, you always need a command."
  },
  {
    "objectID": "slides/slides-topic-02-03.html#syntax-2",
    "href": "slides/slides-topic-02-03.html#syntax-2",
    "title": " QTM 350: Data Science Computing ",
    "section": "Syntax",
    "text": "Syntax\n\n\n All Bash commands have the same basic syntax:\n\ncommand option(s) argument(s)\n\nExamples: \n$ ls `-lh` ~/Documents/\n\n$ sort `-u` myfile.txt\n\n\nOptions (also called Flags)\n\nStart with a dash.\nUsually one letter.\nMultiple options can be chained under a single dash.\n$ ls -l -a -h /var/log ## This works\n$ ls -lah /var/log ## So does this\nAn exception is with (rarer) options requiring two dashes.\n$ ls --group-directories-first --human-readable /var/log\nl: Use a long listing format. This option shows detailed information about the files and directories.\nh: With -l, print sizes in human-readable format (e.g., KB, MB).\nu: Unique, sort will write only one of two lines that compare equal. It filters out the duplicate entries in the output.\nThink it’s difficult to memorize what the individual letters stand for? You’re totally right."
  },
  {
    "objectID": "slides/slides-topic-02-03.html#syntax-3",
    "href": "slides/slides-topic-02-03.html#syntax-3",
    "title": " QTM 350: Data Science Computing ",
    "section": "Syntax",
    "text": "Syntax\n\n\n All Bash commands have the same basic syntax:\n\ncommand option(s) argument(s)\n\nExamples: \n$ ls -lh `~/Documents/`\n\n$ sort -u `myfile.txt`\n\nArguments \n\nTell the command what to operate on.\nTotally depends on the command what legit inputs are.\nCan be a file, path, a set of files and folders, a string, and more\nSometimes more than just one argument is needed:\n$ mv figs/cat.JPG best-figs/cat.jpeg"
  },
  {
    "objectID": "slides/slides-topic-02-03.html#multiple-ways-to-get-help",
    "href": "slides/slides-topic-02-03.html#multiple-ways-to-get-help",
    "title": " QTM 350: Data Science Computing ",
    "section": "Multiple ways to get help",
    "text": "Multiple ways to get help\n\n\n\nThe man tool can be used to look at the manual page for a topic.\nThe man pages are grouped into sections, we can see them with man man.\nThe tldr tool shows a very short description of a tool, which covers the most common use cases only.\nThe cht.sh website can be used directly from the shell to get help on tools or even ask specific questions. (Or install cheat.)\nFor more info on how to get help, see here.\nActually, typing man bash and reading/skimming the whole thing might be a good start to learn basic command line speak."
  },
  {
    "objectID": "slides/slides-topic-02-03.html#getting-help-with-man",
    "href": "slides/slides-topic-02-03.html#getting-help-with-man",
    "title": " QTM 350: Data Science Computing ",
    "section": "Getting help with man",
    "text": "Getting help with man\n\nThe man command (“manual pages”) is your friend if you need help.\nman ls\n\n\n\nLS(1)                       General Commands Manual                      LS(1)\n\nN\bNA\bAM\bME\bE\n     l\bls\bs – list directory contents\n\nS\bSY\bYN\bNO\bOP\bPS\bSI\bIS\bS\n     l\bls\bs [-\b-@\b@A\bAB\bBC\bCF\bFG\bGH\bHI\bIL\bLO\bOP\bPR\bRS\bST\bTU\bUW\bWa\bab\bbc\bcd\bde\bef\bfg\bgh\bhi\bik\bkl\blm\bmn\bno\bop\bpq\bqr\brs\bst\btu\buv\bvw\bwx\bxy\by1\b1%\b%,\b,] [-\b--\b-c\bco\bol\blo\bor\br=_\bw_\bh_\be_\bn]\n        [-\b-D\bD _\bf_\bo_\br_\bm_\ba_\bt] [_\bf_\bi_\bl_\be _\b._\b._\b.]\n\nD\bDE\bES\bSC\bCR\bRI\bIP\bPT\bTI\bIO\bON\bN\n     For each operand that names a _\bf_\bi_\bl_\be of a type other than directory, l\bls\bs\n     displays its name as well as any requested, associated information.  For\n     each operand that names a _\bf_\bi_\bl_\be of type directory, l\bls\bs displays the names\n     of files contained within that directory, as well as any requested,\n     associated information.\n\n     If no operands are given, the contents of the current directory are\n     displayed.  If more than one operand is given, non-directory operands are\n     displayed first; directory and non-directory operands are sorted\n     separately and in lexicographical order.\n\n     The following options are available:\n\n     -\b-@\b@      Display extended attribute keys and sizes in long (-\b-l\bl) output.\n\n     -\b-A\bA      Include directory entries whose names begin with a dot (‘_\b.’)\n             except for _\b. and _\b._\b..  Automatically set for the super-user unless\n             -\b-I\bI is specified.\n\n     -\b-B\bB      Force printing of non-printable characters (as defined by\n             ctype(3) and current locale settings) in file names as \\_\bx_\bx_\bx,\n             where _\bx_\bx_\bx is the numeric value of the character in octal.  This\n             option is not defined in IEEE Std 1003.1-2008 (“POSIX.1”).\n\n     -\b-C\bC      Force multi-column output; this is the default when output is to\n             a terminal.\n\n     -\b-D\bD _\bf_\bo_\br_\bm_\ba_\bt\n             When printing in the long (-\b-l\bl) format, use _\bf_\bo_\br_\bm_\ba_\bt to format the\n             date and time output.  The argument _\bf_\bo_\br_\bm_\ba_\bt is a string used by\n             strftime(3).  Depending on the choice of format string, this may\n             result in a different number of columns in the output.  This\n             option overrides the -\b-T\bT option.  This option is not defined in\n             IEEE Std 1003.1-2008 (“POSIX.1”).\n\n     -\b-F\bF      Display a slash (‘/’) immediately after each pathname that is a\n             directory, an asterisk (‘*’) after each that is executable, an at\n             sign (‘@’) after each symbolic link, an equals sign (‘=’) after\n             each socket, a percent sign (‘%’) after each whiteout, and a\n             vertical bar (‘|’) after each that is a FIFO.\n\n     -\b-G\bG      Enable colorized output.  This option is equivalent to defining\n             CLICOLOR or COLORTERM in the environment and setting\n             -\b--\b-c\bco\bol\blo\bor\br=_\ba_\bu_\bt_\bo.  (See below.)  This functionality can be compiled\n             out by removing the definition of COLORLS.  This option is not\n             defined in IEEE Std 1003.1-2008 (“POSIX.1”).\n\n     -\b-H\bH      Symbolic links on the command line are followed.  This option is\n             assumed if none of the -\b-F\bF, -\b-d\bd, or -\b-l\bl options are specified.\n\n     -\b-I\bI      Prevent -\b-A\bA from being automatically set for the super-user.  This\n             option is not defined in IEEE Std 1003.1-2008 (“POSIX.1”).\n\n     -\b-L\bL      Follow all symbolic links to final target and list the file or\n             directory the link references rather than the link itself.  This\n             option cancels the -\b-P\bP option.\n\n     -\b-O\bO      Include the file flags in a long (-\b-l\bl) output.  This option is\n             incompatible with IEEE Std 1003.1-2008 (“POSIX.1”).  See\n             chflags(1) for a list of file flags and their meanings.\n\n     -\b-P\bP      If argument is a symbolic link, list the link itself rather than\n             the object the link references.  This option cancels the -\b-H\bH and\n             -\b-L\bL options.\n\n     -\b-R\bR      Recursively list subdirectories encountered.\n\n     -\b-S\bS      Sort by size (largest file first) before sorting the operands in\n             lexicographical order.\n\n     -\b-T\bT      When printing in the long (-\b-l\bl) format, display complete time\n             information for the file, including month, day, hour, minute,\n             second, and year.  The -\b-D\bD option gives even more control over the\n             output format.  This option is not defined in IEEE Std\n             1003.1-2008 (“POSIX.1”).\n\n     -\b-U\bU      Use time when file was created for sorting or printing.  This\n             option is not defined in IEEE Std 1003.1-2008 (“POSIX.1”).\n\n     -\b-W\bW      Display whiteouts when scanning directories.  This option is not\n             defined in IEEE Std 1003.1-2008 (“POSIX.1”).\n\n     -\b-a\ba      Include directory entries whose names begin with a dot (‘_\b.’).\n\n     -\b-b\bb      As -\b-B\bB, but use C escape codes whenever possible.  This option is\n             not defined in IEEE Std 1003.1-2008 (“POSIX.1”).\n\n     -\b-c\bc      Use time when file status was last changed for sorting or\n             printing.\n\n     -\b--\b-c\bco\bol\blo\bor\br=_\bw_\bh_\be_\bn\n             Output colored escape sequences based on _\bw_\bh_\be_\bn, which may be set\n             to either a\bal\blw\bwa\bay\bys\bs, a\bau\but\bto\bo, or n\bne\bev\bve\ber\br.\n\n             a\bal\blw\bwa\bay\bys\bs will make l\bls\bs always output color.  If TERM is unset or set\n             to an invalid terminal, then l\bls\bs will fall back to explicit ANSI\n             escape sequences without the help of termcap(5).  a\bal\blw\bwa\bay\bys\bs is the\n             default if -\b--\b-c\bco\bol\blo\bor\br is specified without an argument.\n\n             a\bau\but\bto\bo will make l\bls\bs output escape sequences based on termcap(5),\n             but only if stdout is a tty and either the -\b-G\bG flag is specified\n             or the COLORTERM environment variable is set and not empty.\n\n             n\bne\bev\bve\ber\br will disable color regardless of environment variables.\n             n\bne\bev\bve\ber\br is the default when neither -\b--\b-c\bco\bol\blo\bor\br nor -\b-G\bG is specified.\n\n             For compatibility with GNU coreutils, l\bls\bs supports y\bye\bes\bs or f\bfo\bor\brc\bce\be as\n             equivalent to a\bal\blw\bwa\bay\bys\bs, n\bno\bo or n\bno\bon\bne\be as equivalent to n\bne\bev\bve\ber\br, and t\btt\bty\by\n             or i\bif\bf-\b-t\btt\bty\by as equivalent to a\bau\but\bto\bo.\n\n     -\b-d\bd      Directories are listed as plain files (not searched recursively).\n\n     -\b-e\be      Print the Access Control List (ACL) associated with the file, if\n             present, in long (-\b-l\bl) output.\n\n     -\b-f\bf      Output is not sorted.  This option turns on -\b-a\ba.  It also negates\n             the effect of the -\b-r\br, -\b-S\bS and -\b-t\bt options.  As allowed by IEEE Std\n             1003.1-2008 (“POSIX.1”), this option has no effect on the -\b-d\bd, -\b-l\bl,\n             -\b-R\bR and -\b-s\bs options.\n\n     -\b-g\bg      This option has no effect.  It is only available for\n             compatibility with 4.3BSD, where it was used to display the group\n             name in the long (-\b-l\bl) format output.  This option is incompatible\n             with IEEE Std 1003.1-2008 (“POSIX.1”).\n\n     -\b-h\bh      When used with the -\b-l\bl option, use unit suffixes: Byte, Kilobyte,\n             Megabyte, Gigabyte, Terabyte and Petabyte in order to reduce the\n             number of digits to four or fewer using base 2 for sizes.  This\n             option is not defined in IEEE Std 1003.1-2008 (“POSIX.1”).\n\n     -\b-i\bi      For each file, print the file's file serial number (inode\n             number).\n\n     -\b-k\bk      This has the same effect as setting environment variable\n             BLOCKSIZE to 1024, except that it also nullifies any -\b-h\bh options\n             to its left.\n\n     -\b-l\bl      (The lowercase letter “ell”.) List files in the long format, as\n             described in the _\bT_\bh_\be _\bL_\bo_\bn_\bg _\bF_\bo_\br_\bm_\ba_\bt subsection below.\n\n     -\b-m\bm      Stream output format; list files across the page, separated by\n             commas.\n\n     -\b-n\bn      Display user and group IDs numerically rather than converting to\n             a user or group name in a long (-\b-l\bl) output.  This option turns on\n             the -\b-l\bl option.\n\n     -\b-o\bo      List in long format, but omit the group id.\n\n     -\b-p\bp      Write a slash (‘/’) after each filename if that file is a\n             directory.\n\n     -\b-q\bq      Force printing of non-graphic characters in file names as the\n             character ‘?’; this is the default when output is to a terminal.\n\n     -\b-r\br      Reverse the order of the sort.\n\n     -\b-s\bs      Display the number of blocks used in the file system by each\n             file.  Block sizes and directory totals are handled as described\n             in _\bT_\bh_\be _\bL_\bo_\bn_\bg _\bF_\bo_\br_\bm_\ba_\bt subsection below, except (if the long format\n             is not also requested) the directory totals are not output when\n             the output is in a single column, even if multi-column output is\n             requested.  (-\b-l\bl) format, display complete time information for\n             the file, including month, day, hour, minute, second, and year.\n             The -\b-D\bD option gives even more control over the output format.\n             This option is not defined in IEEE Std 1003.1-2008 (“POSIX.1”).\n\n     -\b-t\bt      Sort by descending time modified (most recently modified first).\n             If two files have the same modification timestamp, sort their\n             names in ascending lexicographical order.  The -\b-r\br option reverses\n             both of these sort orders.\n\n             Note that these sort orders are contradictory: the time sequence\n             is in descending order, the lexicographical sort is in ascending\n             order.  This behavior is mandated by IEEE Std 1003.2 (“POSIX.2”).\n             This feature can cause problems listing files stored with\n             sequential names on FAT file systems, such as from digital\n             cameras, where it is possible to have more than one image with\n             the same timestamp.  In such a case, the photos cannot be listed\n             in the sequence in which they were taken.  To ensure the same\n             sort order for time and for lexicographical sorting, set the\n             environment variable LS_SAMESORT or use the -\b-y\by option.  This\n             causes l\bls\bs to reverse the lexicographical sort order when sorting\n             files with the same modification timestamp.\n\n     -\b-u\bu      Use time of last access, instead of time of last modification of\n             the file for sorting (-\b-t\bt) or long printing (-\b-l\bl).\n\n     -\b-v\bv      Force unedited printing of non-graphic characters; this is the\n             default when output is not to a terminal.\n\n     -\b-w\bw      Force raw printing of non-printable characters.  This is the\n             default when output is not to a terminal.  This option is not\n             defined in IEEE Std 1003.1-2001 (“POSIX.1”).\n\n     -\b-x\bx      The same as -\b-C\bC, except that the multi-column output is produced\n             with entries sorted across, rather than down, the columns.\n\n     -\b-y\by      When the -\b-t\bt option is set, sort the alphabetical output in the\n             same order as the time output.  This has the same effect as\n             setting LS_SAMESORT.  See the description of the -\b-t\bt option for\n             more details.  This option is not defined in IEEE Std 1003.1-2001\n             (“POSIX.1”).\n\n     -\b-%\b%      Distinguish dataless files and directories with a '%' character\n             in long (-\b-l\bl) output, and don't materialize dataless directories\n             when listing them.\n\n     -\b-1\b1      (The numeric digit “one”.) Force output to be one entry per line.\n             This is the default when output is not to a terminal.\n\n     -\b-,      (Comma) When the -\b-l\bl option is set, print file sizes grouped and\n             separated by thousands using the non-monetary separator returned\n             by localeconv(3), typically a comma or period.  If no locale is\n             set, or the locale does not have a non-monetary separator, this\n             option has no effect.  This option is not defined in IEEE Std\n             1003.1-2001 (“POSIX.1”).\n\n     The -\b-1\b1, -\b-C\bC, -\b-x\bx, and -\b-l\bl options all override each other; the last one\n     specified determines the format used.\n\n     The -\b-c\bc, -\b-u\bu, and -\b-U\bU options all override each other; the last one\n     specified determines the file time used.\n\n     The -\b-S\bS and -\b-t\bt options override each other; the last one specified\n     determines the sort order used.\n\n     The -\b-B\bB, -\b-b\bb, -\b-w\bw, and -\b-q\bq options all override each other; the last one\n     specified determines the format used for non-printable characters.\n\n     The -\b-H\bH, -\b-L\bL and -\b-P\bP options all override each other (either partially or\n     fully); they are applied in the order specified.\n\n     By default, l\bls\bs lists one entry per line to standard output; the\n     exceptions are to terminals or when the -\b-C\bC or -\b-x\bx options are specified.\n\n     File information is displayed with one or more ⟨blank⟩s separating the\n     information associated with the -\b-i\bi, -\b-s\bs, and -\b-l\bl options.\n\n   T\bTh\bhe\be L\bLo\bon\bng\bg F\bFo\bor\brm\bma\bat\bt\n     If the -\b-l\bl option is given, the following information is displayed for\n     each file: file mode, number of links, owner name, group name, number of\n     bytes in the file, abbreviated month, day-of-month file was last\n     modified, hour file last modified, minute file last modified, and the\n     pathname.  If the file or directory has extended attributes, the\n     permissions field printed by the -\b-l\bl option is followed by a '@'\n     character.  Otherwise, if the file or directory has extended security\n     information (such as an access control list), the permissions field\n     printed by the -\b-l\bl option is followed by a '+' character.  If the -\b-%\b%\n     option is given, a '%' character follows the permissions field for\n     dataless files and directories, possibly replacing the '@' or '+'\n     character.\n\n     If the modification time of the file is more than 6 months in the past or\n     future, and the -\b-D\bD or -\b-T\bT are not specified, then the year of the last\n     modification is displayed in place of the hour and minute fields.\n\n     If the owner or group names are not a known user or group name, or the -\b-n\bn\n     option is given, the numeric ID's are displayed.\n\n     If the file is a character special or block special file, the device\n     number for the file is displayed in the size field.  If the file is a\n     symbolic link the pathname of the linked-to file is preceded by “-&gt;”.\n\n     The listing of a directory's contents is preceded by a labeled total\n     number of blocks used in the file system by the files which are listed as\n     the directory's contents (which may or may not include _\b. and _\b._\b. and other\n     files which start with a dot, depending on other options).\n\n     The default block size is 512 bytes.  The block size may be set with\n     option -\b-k\bk or environment variable BLOCKSIZE.  Numbers of blocks in the\n     output will have been rounded up so the numbers of bytes is at least as\n     many as used by the corresponding file system blocks (which might have a\n     different size).\n\n     The file mode printed under the -\b-l\bl option consists of the entry type and\n     the permissions.  The entry type character describes the type of file, as\n     follows:\n\n           -\b-     Regular file.\n           b\bb     Block special file.\n           c\bc     Character special file.\n           d\bd     Directory.\n           l\bl     Symbolic link.\n           p\bp     FIFO.\n           s\bs     Socket.\n           w\bw     Whiteout.\n\n     The next three fields are three characters each: owner permissions, group\n     permissions, and other permissions.  Each field has three character\n     positions:\n\n           1.   If r\br, the file is readable; if -\b-, it is not readable.\n\n           2.   If w\bw, the file is writable; if -\b-, it is not writable.\n\n           3.   The first of the following that applies:\n\n                      S\bS     If in the owner permissions, the file is not\n                            executable and set-user-ID mode is set.  If in the\n                            group permissions, the file is not executable and\n                            set-group-ID mode is set.\n\n                      s\bs     If in the owner permissions, the file is\n                            executable and set-user-ID mode is set.  If in the\n                            group permissions, the file is executable and\n                            setgroup-ID mode is set.\n\n                      x\bx     The file is executable or the directory is\n                            searchable.\n\n                      -\b-     The file is neither readable, writable,\n                            executable, nor set-user-ID nor set-group-ID mode,\n                            nor sticky.  (See below.)\n\n                These next two apply only to the third character in the last\n                group (other permissions).\n\n                      T\bT     The sticky bit is set (mode 1000), but not execute\n                            or search permission.  (See chmod(1) or\n                            sticky(7).)\n\n                      t\bt     The sticky bit is set (mode 1000), and is\n                            searchable or executable.  (See chmod(1) or\n                            sticky(7).)\n\n     The next field contains a plus (‘+’) character if the file has an ACL, or\n     a space (‘ ’) if it does not.  The l\bls\bs utility does not show the actual\n     ACL unless the -\b-e\be option is used in conjunction with the -\b-l\bl option.\n\nE\bEN\bNV\bVI\bIR\bRO\bON\bNM\bME\bEN\bNT\bT\n     The following environment variables affect the execution of l\bls\bs:\n\n     BLOCKSIZE           If this is set, its value, rounded up to 512 or down\n                         to a multiple of 512, will be used as the block size\n                         in bytes by the -\b-l\bl and -\b-s\bs options.  See _\bT_\bh_\be _\bL_\bo_\bn_\bg\n                         _\bF_\bo_\br_\bm_\ba_\bt subsection for more information.\n\n     CLICOLOR            Use ANSI color sequences to distinguish file types.\n                         See LSCOLORS below.  In addition to the file types\n                         mentioned in the -\b-F\bF option some extra attributes\n                         (setuid bit set, etc.) are also displayed.  The\n                         colorization is dependent on a terminal type with the\n                         proper termcap(5) capabilities.  The default “cons25”\n                         console has the proper capabilities, but to display\n                         the colors in an xterm(1), for example, the TERM\n                         variable must be set to “xterm-color”.  Other\n                         terminal types may require similar adjustments.\n                         Colorization is silently disabled if the output is\n                         not directed to a terminal unless the CLICOLOR_FORCE\n                         variable is defined or -\b--\b-c\bco\bol\blo\bor\br is set to “always”.\n\n     CLICOLOR_FORCE      Color sequences are normally disabled if the output\n                         is not directed to a terminal.  This can be\n                         overridden by setting this variable.  The TERM\n                         variable still needs to reference a color capable\n                         terminal however otherwise it is not possible to\n                         determine which color sequences to use.\n\n     COLORTERM           See description for CLICOLOR above.\n\n     COLUMNS             If this variable contains a string representing a\n                         decimal integer, it is used as the column position\n                         width for displaying multiple-text-column output.\n                         The l\bls\bs utility calculates how many pathname text\n                         columns to display based on the width provided.  (See\n                         -\b-C\bC and -\b-x\bx.)\n\n     LANG                The locale to use when determining the order of day\n                         and month in the long -\b-l\bl format output.  See\n                         environ(7) for more information.\n\n     LSCOLORS            The value of this variable describes what color to\n                         use for which attribute when colors are enabled with\n                         CLICOLOR or COLORTERM.  This string is a\n                         concatenation of pairs of the format _\bf_\bb, where _\bf is\n                         the foreground color and _\bb is the background color.\n\n                         The color designators are as follows:\n\n                               a\ba     black\n                               b\bb     red\n                               c\bc     green\n                               d\bd     brown\n                               e\be     blue\n                               f\bf     magenta\n                               g\bg     cyan\n                               h\bh     light grey\n                               A\bA     bold black, usually shows up as dark grey\n                               B\bB     bold red\n                               C\bC     bold green\n                               D\bD     bold brown, usually shows up as yellow\n                               E\bE     bold blue\n                               F\bF     bold magenta\n                               G\bG     bold cyan\n                               H\bH     bold light grey; looks like bright white\n                               x\bx     default foreground or background\n\n                         Note that the above are standard ANSI colors.  The\n                         actual display may differ depending on the color\n                         capabilities of the terminal in use.\n\n                         The order of the attributes are as follows:\n\n                               1.   directory\n                               2.   symbolic link\n                               3.   socket\n                               4.   pipe\n                               5.   executable\n                               6.   block special\n                               7.   character special\n                               8.   executable with setuid bit set\n                               9.   executable with setgid bit set\n                               10.  directory writable to others, with sticky\n                                    bit\n                               11.  directory writable to others, without\n                                    sticky bit\n\n                         The default is \"exfxcxdxbxegedabagacad\", i.e., blue\n                         foreground and default background for regular\n                         directories, black foreground and red background for\n                         setuid executables, etc.\n\n     LS_COLWIDTHS        If this variable is set, it is considered to be a\n                         colon-delimited list of minimum column widths.\n                         Unreasonable and insufficient widths are ignored\n                         (thus zero signifies a dynamically sized column).\n                         Not all columns have changeable widths.  The fields\n                         are, in order: inode, block count, number of links,\n                         user name, group name, flags, file size, file name.\n\n     LS_SAMESORT         If this variable is set, the -\b-t\bt option sorts the\n                         names of files with the same modification timestamp\n                         in the same sense as the time sort.  See the\n                         description of the -\b-t\bt option for more details.\n\n     TERM                The CLICOLOR and COLORTERM functionality depends on a\n                         terminal type with color capabilities.\n\n     TZ                  The timezone to use when displaying dates.  See\n                         environ(7) for more information.\n\nE\bEX\bXI\bIT\bT S\bST\bTA\bAT\bTU\bUS\bS\n     The l\bls\bs utility exits 0 on success, and &gt;0 if an error occurs.\n\nE\bEX\bXA\bAM\bMP\bPL\bLE\bES\bS\n     List the contents of the current working directory in long format:\n\n           $ ls -l\n\n     In addition to listing the contents of the current working directory in\n     long format, show inode numbers, file flags (see chflags(1)), and suffix\n     each filename with a symbol representing its file type:\n\n           $ ls -lioF\n\n     List the files in _\b/_\bv_\ba_\br_\b/_\bl_\bo_\bg, sorting the output such that the most\n     recently modified entries are printed first:\n\n           $ ls -lt /var/log\n\nC\bCO\bOM\bMP\bPA\bAT\bTI\bIB\bBI\bIL\bLI\bIT\bTY\bY\n     The group field is now automatically included in the long listing for\n     files in order to be compatible with the IEEE Std 1003.2 (“POSIX.2”)\n     specification.\n\nL\bLE\bEG\bGA\bAC\bCY\bY D\bDE\bES\bSC\bCR\bRI\bIP\bPT\bTI\bIO\bON\bN\n     In legacy mode, the -\b-f\bf option does not turn on the -\b-a\ba option and the -\b-g\bg,\n     -\b-n\bn, and -\b-o\bo options do not turn on the -\b-l\bl option.\n\n     Also, the -\b-o\bo option causes the file flags to be included in a long (-l)\n     output; there is no -\b-O\bO option.\n\n     When -\b-H\bH is specified (and not overridden by -\b-L\bL or -\b-P\bP) and a file argument\n     is a symlink that resolves to a non-directory file, the output will\n     reflect the nature of the link, rather than that of the file.  In legacy\n     operation, the output will describe the file.\n\n     For more information about legacy mode, see compat(5).\n\nS\bSE\bEE\bE A\bAL\bLS\bSO\bO\n     chflags(1), chmod(1), sort(1), xterm(1), localeconv(3), strftime(3),\n     strmode(3), compat(5), termcap(5), sticky(7), symlink(7)\n\nS\bST\bTA\bAN\bND\bDA\bAR\bRD\bDS\bS\n     With the exception of options -\b-g\bg, -\b-n\bn and -\b-o\bo, the l\bls\bs utility conforms to\n     IEEE Std 1003.1-2001 (“POSIX.1”) and IEEE Std 1003.1-2008 (“POSIX.1”).\n     The options -\b-B\bB, -\b-D\bD, -\b-G\bG, -\b-I\bI, -\b-T\bT, -\b-U\bU, -\b-W\bW, -\b-Z\bZ, -\b-b\bb, -\b-h\bh, -\b-w\bw, -\b-y\by and -\b-, are\n     non-standard extensions.\n\n     The ACL support is compatible with IEEE Std 1003.2c (“POSIX.2c”) Draft 17\n     (withdrawn).\n\nH\bHI\bIS\bST\bTO\bOR\bRY\bY\n     An l\bls\bs command appeared in Version 1 AT&T UNIX.\n\nB\bBU\bUG\bGS\bS\n     To maintain backward compatibility, the relationships between the many\n     options are quite complex.\n\n     The exception mentioned in the -\b-s\bs option description might be a feature\n     that was based on the fact that single-column output usually goes to\n     something other than a terminal.  It is debatable whether this is a\n     design bug.\n\n     IEEE Std 1003.2 (“POSIX.2”) mandates opposite sort orders for files with\n     the same timestamp when sorting with the -\b-t\bt option.\n\nmacOS 14.2                      August 31, 2020                     macOS 14.2"
  },
  {
    "objectID": "slides/slides-topic-02-03.html#getting-help-with-man-1",
    "href": "slides/slides-topic-02-03.html#getting-help-with-man-1",
    "title": " QTM 350: Data Science Computing ",
    "section": "Getting help with man",
    "text": "Getting help with man\n\n\n Manual pages are shown in the shell pager. Here are the essentials to navigate through contents presented in the pager:\n\nd - Scroll down half a page\nu - Scroll up half a page\nj / k - Scroll down or up a line. You can also use the arrow keys for this\nq - Quit\n/pattern - Search for text provided as “pattern”\nn - When searching, find the next occurrence\nN - When searching, find the previous occurrence\nThese and other man tricks are detailed in the help pages (hit “h” when you’re in the pager for an overview).\n\n\n\n\n\n\n\n\nRTFM\n\n\nAlways check the documentation!"
  },
  {
    "objectID": "slides/slides-topic-02-03.html#help-practice",
    "href": "slides/slides-topic-02-03.html#help-practice",
    "title": " QTM 350: Data Science Computing ",
    "section": "Help practice!",
    "text": "Help practice!\n\n\nIn your Terminal, access the man and explore the document. I want you to share with a colleague your first impression and five commands you found interesting.\nPlease present your own (first impression + five commands) and colleague (first impression and five commands) views in the lecture quiz!"
  },
  {
    "objectID": "slides/slides-topic-02-03.html#help-cheat-tldr-cheat.sh",
    "href": "slides/slides-topic-02-03.html#help-cheat-tldr-cheat.sh",
    "title": " QTM 350: Data Science Computing ",
    "section": "Help: cheat, tldr, cheat.sh",
    "text": "Help: cheat, tldr, cheat.sh\nThere are various other utilities which provide more readable summaries/cheatsheets of various commands. Those include\n\ncheat\ncheat.sh\ntldr\n\n\nThe first two need to be installed first. cheat.sh sheets are accessible via:\ncurl cheat.sh/ls  \n# List files one per line:\nls -1\n\n# List all files, including hidden files:\nls -a\n\n# List all files, with trailing `/` added to directory names:\nls -F\n\n# Long format list with size displayed using human readable units (KB, MB, GB):\nls -lh"
  },
  {
    "objectID": "slides/slides-topic-02-03.html#navigating-your-file-system-1",
    "href": "slides/slides-topic-02-03.html#navigating-your-file-system-1",
    "title": " QTM 350: Data Science Computing ",
    "section": "Navigating your file system",
    "text": "Navigating your file system\n\n\n\n\nWe’re all so used to a graphical user interface that switching to the shell can take some time to get used to.\nModern operating systems increasingly abstract away from underlying file systems (think about iOS, Android).\nFor data science operations it is key that you’re able to efficiently navigate your system to get information on files and folders.\nSome questions that will pop up:\n\nWhat is my home directory?\nIn which directory am I currently operating?\nWhere is my stuff?\nWhere do I want to put my stuff?\nHow do I navigate from here to there?"
  },
  {
    "objectID": "slides/slides-topic-02-03.html#navigation",
    "href": "slides/slides-topic-02-03.html#navigation",
    "title": " QTM 350: Data Science Computing ",
    "section": "Navigation",
    "text": "Navigation\n\nKey navigation commands are:\n\npwd to print (the current) working directory.\ncd to change directory.\n\n\npwd\n\n\n\n/Users/dcorde3/Library/CloudStorage/Dropbox/academic/cursos/cursos-davi/data_science_computing/2024S_dsc_emory_qtm_350/slides"
  },
  {
    "objectID": "slides/slides-topic-02-03.html#navigation-1",
    "href": "slides/slides-topic-02-03.html#navigation-1",
    "title": " QTM 350: Data Science Computing ",
    "section": "Navigation",
    "text": "Navigation\n\nYou can use absolute paths, but it’s better to use relative paths and invoke special symbols for a user’s home folder (~), current directory (.), and parent directory (..) as needed.\n\ncd slides-topic-02-02-examples ## Move into the \"slides-topic-02-02-examples\" sub-directory of this lecture directory.\ncd ../.. ## Now go back up two directories.\npwd\n\n\nTerminal!"
  },
  {
    "objectID": "slides/slides-topic-02-03.html#navigation-2",
    "href": "slides/slides-topic-02-03.html#navigation-2",
    "title": " QTM 350: Data Science Computing ",
    "section": "Navigation",
    "text": "Navigation\n\n\n Beware of directory names that contain spaces. Say you have a directory called “My Documents”. (I’m looking at you, Windows.)\n\nWhy won’t $ cd My Documents work?\nBash syntax is super pedantic about spaces and ordering. Here it thinks that “My” and “Documents” are separate arguments.\nHow to deal with it:\n\nUse quotation marks: $ cd \"My Documents\".\nUse Tab completion to automatically “escape” the space: $ cd My\\ Documents.\nDon’t use spaces in file and folder names. Just don’t.\nI’ve developed the habit to name files and folders\n\nalways lowercase and\nusing dashes or snake_case, as in assignment-05 or assignment_05. These are useful conventions!"
  },
  {
    "objectID": "slides/slides-topic-02-03.html#listing-files-and-their-properties",
    "href": "slides/slides-topic-02-03.html#listing-files-and-their-properties",
    "title": " QTM 350: Data Science Computing ",
    "section": "Listing files and their properties",
    "text": "Listing files and their properties\n\n\nWe’re about to go into more depth about the ls (list) command. It shows the contents of the current (or given) directory:\nls\n\n\n\n_slides-topic-02-02.html    libs\n_slides-topic-02-02_files   slides-topic-01.qmd\n_slides-topic-02.html       slides-topic-02-01.qmd\n_slides-topic-02_aux.qmd    slides-topic-02-02-examples\n_slides-topic-02_files      slides-topic-02-02.qmd\ncustom.css                  slides-topic-02-03.ipynb\ncustom.scss                 slides-topic-02-03.qmd\nfigs                        survive.txt\n\n\n\n\n\n\nNow we list the contents of the slides-topic-02-02-examples/ sub-directory with the -lh option (“long format”, “human readable file size unit suffixes”; again, check out man ls for the details):\nls -lh slides-topic-02-02-examples\n\n\n\ntotal 280\ndrwxrwxr-x@  3 dcorde3  206888963    96B Nov 27 09:51 ABC\ndrwxr-xr-x@  3 dcorde3  206888963    96B Jan 22 09:27 copies\n-rw-rw-r--@  1 dcorde3  206888963   149B Nov 27 09:51 hello.R\n-rwxr-xr-x@  1 dcorde3  206888963    34B Nov 27 09:51 hello.sh\ndrwxrwxr-x@ 10 dcorde3  206888963   320B Jan 22 11:15 meals\n-rw-rw-r--@  1 dcorde3  206888963    32B Nov 27 09:51 nursery.txt\n-rw-rw-r--@  1 dcorde3  206888963    38B Nov 27 09:51 nursery2.txt\n-rwxr-xr-x@  1 dcorde3  206888963   153B Nov 27 09:51 reps.txt\n-rw-rw-r--@  1 dcorde3  206888963   117K Nov 27 09:51 sonnets.txt"
  },
  {
    "objectID": "slides/slides-topic-02-03.html#listing-files-and-their-properties-1",
    "href": "slides/slides-topic-02-03.html#listing-files-and-their-properties-1",
    "title": " QTM 350: Data Science Computing ",
    "section": "Listing files and their properties",
    "text": "Listing files and their properties\n\n\nNow we list the contents of the slides-topic-02-02-examples/ sub-directory with the -lh option (“long format”, “human readable file size unit suffixes”; again, check out man ls for the details):\nls -lh slides-topic-02-02-examples\n\n\n\ntotal 280\ndrwxrwxr-x@  3 dcorde3  206888963    96B Nov 27 09:51 ABC\ndrwxr-xr-x@  3 dcorde3  206888963    96B Jan 22 09:27 copies\n-rw-rw-r--@  1 dcorde3  206888963   149B Nov 27 09:51 hello.R\n-rwxr-xr-x@  1 dcorde3  206888963    34B Nov 27 09:51 hello.sh\ndrwxrwxr-x@ 10 dcorde3  206888963   320B Jan 22 11:15 meals\n-rw-rw-r--@  1 dcorde3  206888963    32B Nov 27 09:51 nursery.txt\n-rw-rw-r--@  1 dcorde3  206888963    38B Nov 27 09:51 nursery2.txt\n-rwxr-xr-x@  1 dcorde3  206888963   153B Nov 27 09:51 reps.txt\n-rw-rw-r--@  1 dcorde3  206888963   117K Nov 27 09:51 sonnets.txt\n\n\n\n\nWhat does this all mean? Let’s focus on the top line.\ndrwxrwxr-x@ 3 dcorde3  206888963    96B Nov 27 09:51 ABC\n\nThe first column denotes the object type:\n\nd (directory or folder), l (link), or - (file)\n\nNext, we see the permissions associated with the object’s three possible user types: 1) owner, 2) the owner’s group, and 3) all other users.\n\nPermissions reflect r (read), w (write), or x (execute) access.\n- denotes missing permissions for a class of operations.\n\nThe number of hard links to the object.\nWe also see the identity of the object’s owner and their group.\nFinally, we see some descriptive elements about the object:\n\nSize, date and time of creation, and the object name."
  },
  {
    "objectID": "slides/slides-topic-02-03.html#summary-1",
    "href": "slides/slides-topic-02-03.html#summary-1",
    "title": " QTM 350: Data Science Computing ",
    "section": "Summary",
    "text": "Summary\n\nProject Management is a central practice in Data Science Projects\nKeep Future-you Happy!\nThe Folder Structure must be respected.\nGuidelines for naming scripts, modularizing code, and structuring your code effectively for future readability and usability.\nVersion Control helps to track changes in files and coordinate work among multiple people.\nGit and GitHub are the current main tools for Version Control and Data Science project collaboration\nThere is no unique Collaborating Workflow, but one of them can fit your team!"
  },
  {
    "objectID": "slides/slides-topic-02-03.html#managing-your-files-1",
    "href": "slides/slides-topic-02-03.html#managing-your-files-1",
    "title": " QTM 350: Data Science Computing ",
    "section": "Managing your files",
    "text": "Managing your files\n\n\n\nThe obvious next step after navigating the file system is managing files.\nThere’s a lot you can do with files, including downloading, unzipping, copying, moving, renaming and deleting.\nAgain, doing this in a GUI is intuitive but usually scales badly.\nWe’ll learn how to do these operations at scale using the shell.\nBe careful when handling files in the shell though! Don’t expect friendly reminders such as “Do you really want to delete this folder of pictures from your anniversary?”"
  },
  {
    "objectID": "slides/slides-topic-02-03.html#create-touch-and-mkdir",
    "href": "slides/slides-topic-02-03.html#create-touch-and-mkdir",
    "title": " QTM 350: Data Science Computing ",
    "section": "Create: touch and mkdir",
    "text": "Create: touch and mkdir\nOne of the most common shell tasks is object creation (files, directories, etc.).\nWe use mkdir to create directories. E.g., to create a new “testing” directory we do:\nmkdir testing\n\n\nWe use touch to create (empty) files. If the file(s) already exist, touch changes a file’s “Access”, “Modify” and “Change” timestamps to the current time and date. To add some files to our new directory, we do:\ntouch testing/test1.txt testing/test2.txt testing/test3.txt\n\n\n\nCheck that it worked:\nls testing\n\n\n\ntest1.txt test2.txt test3.txt"
  },
  {
    "objectID": "slides/slides-topic-02-03.html#remove-rm-and-rmdir",
    "href": "slides/slides-topic-02-03.html#remove-rm-and-rmdir",
    "title": " QTM 350: Data Science Computing ",
    "section": "Remove: rm and rmdir",
    "text": "Remove: rm and rmdir\nLet’s delete the objects that we just created. Start with one of the .txt files, by using rm. - We could delete all the files at the same time, but you’ll see why I want to keep some.\nrm testing/test1.txt\n\n\nThe equivalent command for directories is rmdir.\nrmdir testing\n\n\n\nrmdir: testing: Directory not empty\n\n\n\n\nUh oh… It won’t let us delete the directory while it still has files inside of it. The solution is to use the rm command again with the “recursive” (-r or -R) and “force” (-f) options. - Excluding the -f option is safer, but will trigger a confirmation prompt for every file, which I’d rather avoid here.\nrm -rf testing ## Success"
  },
  {
    "objectID": "slides/slides-topic-02-03.html#copy-cp",
    "href": "slides/slides-topic-02-03.html#copy-cp",
    "title": " QTM 350: Data Science Computing ",
    "section": "Copy: cp",
    "text": "Copy: cp\n\n\nThe syntax for copying is $ cp object path/copyname.\n\nIf you don’t provide a new name for the copied object, it will just take the old name.\nHowever, if there is already an object with the same name in the target destination, then you’ll have to use -f to force an overwrite.\n\n\n## Create new \"copies\" sub-directory\nmkdir slides-topic-02-02-examples/copies\n\n## Now copy across a file (with a new name)\ncp slides-topic-02-02-examples/reps.txt slides-topic-02-02-examples/copies/reps-copy.txt\n\n## Show that we were successful\nls slides-topic-02-02-examples/copies\n\nTerminal!\n\n\n\nYou can use cp to copy directories, although you’ll need the -r flag if you want to recursively copy over everything inside of it too:\ncp -r slides-topic-02-02-examples/meals slides-topic-02-02-examples/copies\nrm -rf slides-topic-02-02-examples/copies/meals\n\nTerminal!"
  },
  {
    "objectID": "slides/slides-topic-02-03.html#move-and-rename-mv",
    "href": "slides/slides-topic-02-03.html#move-and-rename-mv",
    "title": " QTM 350: Data Science Computing ",
    "section": "Move (and rename): mv",
    "text": "Move (and rename): mv\nThe syntax for moving is $ mv object path/newobjectname\n ## Move the abc.txt file and show that it worked\nmv slides-topic-02-02-examples/ABC/abc.txt examples\nls slides-topic-02-02-examples/ABC ## empty\n\n## Move it back again\nmv slides-topic-02-02-examples/abc.txt slides-topic-02-02-examples/ABC\nls slides-topic-02-02-examples/ABC ## not empty\n\nTerminal!\n\n\nNote that “moving” an object within the same directory, but with specifying newobjectname, is effectively the same as renaming it.\n ## Rename reps-copy to reps2 by \"moving\" it with a new name\nmv slides-topic-02-02-examples/copies/reps-copy.txt slides-topic-02-02-examples/copies/reps2.txt\nls slides-topic-02-02-examples/copies\n\nTerminal!"
  },
  {
    "objectID": "slides/slides-topic-02-03.html#rename-en-masse-zmv",
    "href": "slides/slides-topic-02-03.html#rename-en-masse-zmv",
    "title": " QTM 350: Data Science Computing ",
    "section": "Rename en masse : zmv",
    "text": "Rename en masse : zmv\nA more convenient way to do renaming in zsh is with zmv. It has to be installed and autoloaded first:\nautoload -U zmv\n\nTerminal!\n\n\nThe syntax is zmv &lt;options&gt; &lt;old-files-pattern&gt; &lt;new-files-pattern&gt;\nFor example, say we want to change the file type (i.e. extension) of a set of files in the slides-topic-02-02-examples/meals directory, we do:\ncd slides-topic-02-02-examples/meals\nzmv -n -W  \"*.csv\" \"*.txt\"\n\nTerminal!\n\n\n\nLet’s look at the expression s/Jack/Bill/g in detail:\n\nThe s indicates that we are going to run the substitute function, which is used to replace text.\nThe / indicates the start of the pattern we are searching for - Bill in this case.\nThe second / indicates the start of the replacement we will make when the pattern is found.\nThe final / indicates the end of the replacement - we can also optionally put flags after this slash. Here, g ensures global replacement (not just replacement of the first match)."
  },
  {
    "objectID": "slides/slides-topic-02-03.html#summary-3",
    "href": "slides/slides-topic-02-03.html#summary-3",
    "title": " QTM 350: Data Science Computing ",
    "section": "Summary",
    "text": "Summary\n\n\n\nhead will show the first ten lines of a file.\nhead -n 30 will show the first thirty lines of a file, using the -n flag to specify the number of lines.\ntail will show the final ten lines of a file.\ntail -n 3 uses the -n flag to specify three lines only.\ntr 'a' 'b' is the translate characters command, which turns one set of characters into another.\ncut can be used to extract parts of a line of text.\ncut -d',' -f 3 shows how the -d or delimiter flag is used to specify the delimiter to cut on and how the -f or field flag specifies which of the fields the text has been cut into is printed.\ncut -c 2-4 uses the -c or characters flag to specify that we are extracting a subset of characters in the line, in this case characters two to four.\nrev reverses text - by reversing, cutting and then re-reversing you can quickly extract text from the end of a line.\nsort sorts the incoming text alphabetically. The -r flag for sort reverses the sort order.\nThe uniq command removes duplicate lines - but only when they are next to each other, so you’ll often use it in combination with sort.\nYour pager, for example the less program can be useful when inspecting the output of your text transformation commands.\n\n\nFor a more detailed overview, click here."
  },
  {
    "objectID": "slides/slides-topic-02-03.html#also-make-sure-to-master-regular-expressions",
    "href": "slides/slides-topic-02-03.html#also-make-sure-to-master-regular-expressions",
    "title": " QTM 350: Data Science Computing ",
    "section": "Also, make sure to master regular expressions!",
    "text": "Also, make sure to master regular expressions!\n\n\n\nGood starting points are:\n\nThis chapter discussing regex in the context of the shell\nRegular Expression in Python\nThis base R regex intro"
  },
  {
    "objectID": "slides/slides-topic-02-03.html#redirects-pipes-and-loops-1",
    "href": "slides/slides-topic-02-03.html#redirects-pipes-and-loops-1",
    "title": " QTM 350: Data Science Computing ",
    "section": "Redirects, pipes, and loops",
    "text": "Redirects, pipes, and loops\n\n\n\n\nYou have learned about pipes (%&gt;% or |&gt;) in R already.\nUnderstanding the concept of pipelines in the shell, as well as how input and output work for command line programs is critical to be able to use the shell effectively.\nThink again of the Unix philosophy of “doing one thing, but doing it well” and combining multiple of these modules.\nAlso, often you’ll want to dump output in a file as part of your workflow.\nLet’s learn how all this works."
  },
  {
    "objectID": "slides/slides-topic-02-03.html#redirect",
    "href": "slides/slides-topic-02-03.html#redirect",
    "title": " QTM 350: Data Science Computing ",
    "section": "Redirect: >",
    "text": "Redirect: &gt;\n\nYou can send output from the shell to a file using the redirect operator &gt;.\nFor example, let’s print a message to the shell using the echo command.\necho \"At first, I was afraid, I was petrified\"\n\n\nAt first, I was afraid, I was petrified\n\n\n\n\nIf you wanted to save this output to a file, you need simply redirect it to the filename of choice.\necho \"At first, I was afraid, I was petrified\" &gt; survive.txt\nfind survive.txt ## Show that it now exists\n\n\nsurvive.txt"
  },
  {
    "objectID": "slides/slides-topic-02-03.html#redirect-1",
    "href": "slides/slides-topic-02-03.html#redirect-1",
    "title": " QTM 350: Data Science Computing ",
    "section": "Redirect: >",
    "text": "Redirect: &gt;\n\nIf you want to append text to an existing file, then you should use &gt;&gt;.\n\nUsing &gt; will try to overwrite the existing file contents.\n\n\necho \"'Kept thinking I could never live without you by my side\" &gt;&gt; survive.txt\ncat survive.txt\n\n\n\nAt first, I was afraid, I was petrified\n'Kept thinking I could never live without you by my side\n\n\n\n\nAn example use case is when adding rules to your .gitignore, e.g. $ echo \"*.csv\" &gt;&gt;  .gitignore."
  },
  {
    "objectID": "slides/slides-topic-02-03.html#pipes",
    "href": "slides/slides-topic-02-03.html#pipes",
    "title": " QTM 350: Data Science Computing ",
    "section": "Pipes: |",
    "text": "Pipes: |\nThe pipe operator | is one of the coolest features in Bash.\n\nIt allows us to chain (i.e. “pipe”) together a sequence of simple operations and thereby implement a more complex operation.\n\n\n\n\nHere’s a simple example:\ncat -n slides-topic-02-02-examples/sonnets.txt 2&gt;/dev/null | head -n100 | tail -n10\n\n\n    91    Despite of wrinkles this thy golden time.\n    92      But if thou live, remember'd not to be,\n    93      Die single and thine image dies with thee.\n    94  \n    95    IV\n    96  \n    97    Unthrifty loveliness, why dost thou spend\n    98    Upon thy self thy beauty's legacy?\n    99    Nature's bequest gives nothing, but doth lend,\n   100    And being frank she lends to those are free:\n\n\n\n\nThis command sequence:\n\nIt reads the file sonnets.txt, numbering each line of the text.\nAny errors that might occur during this process are ignored (not printed to the terminal).\nIt then takes only the first 100 lines of the numbered text.\nFrom those 100 lines, it then takes only the last 10 lines.\nThe final output displayed in the terminal will be lines 91 to 100 of the sonnets.txt file, along with their corresponding line numbers.\n\n\n\ncat -n slides-topic-02-02-examples/sonnets.txt\n\ncat is used to concatenate and display files.\nThe -n option of cat numbers all output lines starting with line 1.\nslides-topic-02-02-examples/sonnets.txt is the file path to the text file being read. This file presumably contains sonnets or other text.\n\n\n\n\n2&gt;/dev/null\n\n2&gt; is used to redirect the standard error (stderr) output stream.\n/dev/null is a special file that discards all data written to it.\nThis redirection sends all error messages from cat (like file not found, no read permission, etc.) to /dev/null, effectively silencing any errors that cat might produce.\n\n| head -n100\n\nThe pipe | passes the output of the previous command (cat -n) to the next command as input.\nhead is used to output the first part of files.\nThe -n100 option tells head to print the first 100 lines of its input.\n\n| tail -n10\n\nAnother pipe | passes the output of head -n100 to the next command as input.\ntail outputs the last part of files.\nThe -n10 option tells tail to print the last 10 lines of its input."
  },
  {
    "objectID": "slides/slides-topic-02-03.html#iteration-with-for-loops",
    "href": "slides/slides-topic-02-03.html#iteration-with-for-loops",
    "title": " QTM 350: Data Science Computing ",
    "section": "Iteration with for loops",
    "text": "Iteration with for loops\n\nSometimes you want to loop an operation over certain parameters. for loops in Bash/Z shell work similarly to other programming languages that you are probably familiar with.\n\nThe basic syntax is:\nfor i in LIST\ndo \n  OPERATION $i ## the $ sign indicates a variable in bash\ndone\n\nWe can also condense things into a single line by using ;.\nfor i in LIST; do OPERATION $i; done\nNote: Using ; isn’t limited to for loops. Semicolons are a standard way to denote line endings in Bash/Z shell."
  },
  {
    "objectID": "slides/slides-topic-02-03.html#example-1-print-a-sequence-of-numbers",
    "href": "slides/slides-topic-02-03.html#example-1-print-a-sequence-of-numbers",
    "title": " QTM 350: Data Science Computing ",
    "section": "Example 1: Print a sequence of numbers",
    "text": "Example 1: Print a sequence of numbers\nTo help make things concrete, here’s a simple for loop in action.\nfor i in 1 2 3 4 5; do echo $i; done\n\n\n1\n2\n3\n4\n5\n\n\n\nFWIW (For What It’s Worth), we can use bash’s brace expansion ({1..n}) to save us from having to write out a long sequence of numbers.\nfor i in {1..5}; do echo $i; done"
  },
  {
    "objectID": "slides/slides-topic-02-03.html#example-2-combine-csvs",
    "href": "slides/slides-topic-02-03.html#example-2-combine-csvs",
    "title": " QTM 350: Data Science Computing ",
    "section": "Example 2: Combine CSVs",
    "text": "Example 2: Combine CSVs\nHere’s a more realistic for loop use-case: Combining (i.e. concatenating) multiple CSVs.\nSay we want to combine all the “daily” files in the /meals directory into a single CSV, which I’ll call mealplan.csv. Here’s one attempt that incorporates various bash commands and tricks that we’ve learned so far. The basic idea is:\n\nCreate a new (empty) CSV\nThen, loop over the relevant input files, appending their contents to our new CSV\n\n\n## create an empty CSV\ntouch slides-topic-02-02-examples/meals/mealplan.csv\n## loop over the input files and append their contents to our new CSV\nfor i in $(ls slides-topic-02-02-examples/meals/*day.csv)\n  do \n   cat $i &gt;&gt; slides-topic-02-02-examples/meals/mealplan.csv\ndone\n\nTerminal!\n\n\n\n\nDid it work?"
  },
  {
    "objectID": "slides/slides-topic-02-03.html#example-2-combine-csvs-1",
    "href": "slides/slides-topic-02-03.html#example-2-combine-csvs-1",
    "title": " QTM 350: Data Science Computing ",
    "section": "Example 2: Combine CSVs",
    "text": "Example 2: Combine CSVs\n\ncat slides-topic-02-02-examples/meals/mealplan.csv\n\nTerminal!\n\n\n\n\nHmmm. Sort of, but we need to get rid of the repeating header.\n\n\n\nCan you think of a way? (Hint: tail and head…)"
  },
  {
    "objectID": "slides/slides-topic-02-03.html#example-2-combine-csvs-2",
    "href": "slides/slides-topic-02-03.html#example-2-combine-csvs-2",
    "title": " QTM 350: Data Science Computing ",
    "section": "Example 2: Combine CSVs",
    "text": "Example 2: Combine CSVs\n\nLet’s try again. First delete the old file so we can start afresh.\nrm -f slides-topic-02-02-examples/meals/mealplan.csv ## delete old file\n\nTerminal!\n\n\nHere’s our adapted gameplan:\n\nFirst, create the new file by grabbing the header (i.e. top line) from any of the input files and redirecting it. No need for touch this time.\nNext, loop over all the input files as before, but this time only append everything after the top line.\n\n\n\n## create a new CSV by redirecting the top line of any file\nhead -1 slides-topic-02-02-examples/meals/monday.csv &gt; slides-topic-02-02-examples/meals/mealplan.csv\n## loop over the input files, appending everything after the top line\nfor i in $(ls slides-topic-02-02-examples/meals/*day.csv)\n do \n   tail -n +2 $i &gt;&gt; slides-topic-02-02-examples/meals/mealplan.csv\ndone\n\nTerminal!"
  },
  {
    "objectID": "slides/slides-topic-02-03.html#example-2-combine-csvs-3",
    "href": "slides/slides-topic-02-03.html#example-2-combine-csvs-3",
    "title": " QTM 350: Data Science Computing ",
    "section": "Example 2: Combine CSVs",
    "text": "Example 2: Combine CSVs\n\nIt worked!\ncat slides-topic-02-02-examples/meals/mealplan.csv\n\nTerminal!\n\n\n\nWe still have to sort the correct week order, but that’s an easy job in R or Python.\n\nThe explicit benefit of doing the concatenating in the shell is that it can be much more efficient, since all the files don’t simultaneously have to be held in memory (i.e RAM).\nThis doesn’t matter here, but can make a dramatic difference once we start working with lots of files (or even a few really big ones)."
  },
  {
    "objectID": "slides/slides-topic-02-03.html#scripting-1",
    "href": "slides/slides-topic-02-03.html#scripting-1",
    "title": " QTM 350: Data Science Computing ",
    "section": "Scripting",
    "text": "Scripting\n\n\n\nWriting code interactively in the shell makes a lot of sense when you are exploring data, file structures, etc.\nHowever, it’s also possible (and often desirable) to write reproducible shell scripts that combine a sequence of commands.\nThese scripts are demarcated by their .sh file extension.\nLet’s look at the contents of a short shell script, hello.sh, that is included in the examples folder:\ncat slides-topic-02-02-examples/hello.sh\n What does this script do?"
  },
  {
    "objectID": "slides/slides-topic-02-03.html#hello-world",
    "href": "slides/slides-topic-02-03.html#hello-world",
    "title": " QTM 350: Data Science Computing ",
    "section": "Hello World!",
    "text": "Hello World!\n\n#!/bin/sh\necho \"\\nHello World!\\n\"\n\n#!/bin/sh is a shebang, indicating which program to run the command with (here: any Bash-compatible shell). However, it is typically ignored (note that it begins with the hash comment character.)\necho \"\\nHello World!\\n\" is the actual command that we want to run.\n\n\nTo run this simple script, you can just type in the file name and press enter.\nslides-topic-02-02-examples/hello.sh\n# bash slides-topic-02-02-examples/hello.sh ## Also works\n\n\n\nHello World!"
  },
  {
    "objectID": "slides/slides-topic-02-03.html#things-we-didnt-cover-here",
    "href": "slides/slides-topic-02-03.html#things-we-didnt-cover-here",
    "title": " QTM 350: Data Science Computing ",
    "section": "Things we didn’t cover here",
    "text": "Things we didn’t cover here\nI hope that I’ve given you a sense of how the shell works and how powerful it is. My main goal has been to “demystify” the shell, so that you aren’t intimidated when we use shell commands later on.\nWe didn’t cover many things:\n\nUser roles and file permissions, environment variables, SSH, memory management (e.g. top and htop), GNU parallel, etc.\nAutomation; see here, here, and here are great places to start learning about automation on your own."
  },
  {
    "objectID": "slides/slides-topic-02-03.html#additional-material",
    "href": "slides/slides-topic-02-03.html#additional-material",
    "title": " QTM 350: Data Science Computing ",
    "section": "Additional material",
    "text": "Additional material\nIf you want to dig deeper, check out\n\nThe Unix Shell (Software Carpentery)\nThe Unix Workbench (Sean Kross)\nData Science at the Command Line (Jeroen Janssens)\nEffective Shell (Dave Kerr)\nEfficient Way To Process Large Text/Log Files Using Awk With Python\nUsing AWK and R to parse 25tb (Nick Strayer)\n./jq\nawk"
  },
  {
    "objectID": "slides/slides-topic-02-03.html#keeping-future-you-happy",
    "href": "slides/slides-topic-02-03.html#keeping-future-you-happy",
    "title": " QTM 350: Data Science Computing ",
    "section": "Keeping Future-you happy",
    "text": "Keeping Future-you happy\n\nIt’s often tempting to set up a project assuming that you will be the only person working on it, e.g. as homework.\nThat’s almost never true.\nCoauthors and collaborators happen to the best of us.\nEven if not, there’s someone else who you always have to keep happy: Future-you.\nFuture-you is really the one you organize your projects for.\nMost importantly, they are who will enjoy the fruits of your data science labor, or have to fight back your chaos.\nSo, be kind to Future-you. Establish a good workflow. You’ll thank yourself later."
  },
  {
    "objectID": "slides/slides-topic-02-03.html#project-setup",
    "href": "slides/slides-topic-02-03.html#project-setup",
    "title": " QTM 350: Data Science Computing ",
    "section": "Project setup",
    "text": "Project setup\nYou should always think in terms of projects.\nA project is a self-contained unit of data science work that can be\n\nShared\nRecreated by others\nPackaged\nDumped\n\n\nA project contains\n\nContent, e.g., raw data, processed data, scripts, functions, documents and other output\nMetadata, e.g., information about tools for running it (required libraries, compilers), version history\n\n\n\nFor R projects for example:\n\nProjects are folders/directories.\nMetadata is the RStudio project (.Rproj) files (perhaps augmented with the output of renv for dependency management) and .git."
  },
  {
    "objectID": "slides/slides-topic-02-03.html#setup-the-folder-structure",
    "href": "slides/slides-topic-02-03.html#setup-the-folder-structure",
    "title": " QTM 350: Data Science Computing ",
    "section": "Setup: the folder structure",
    "text": "Setup: the folder structure\n\n\nStructuring your working directory\n\nOne folder contains everything inside it.\nDirectories keep things separate that should be separated.\nYou decide on the fundamental structure. The project decides on the details.\n\n\nFurther thoughts\n\nIdeally, your project folder can be relocated without problem.\nKeep input separate from output. Definitely separate raw from processed data!\nStructure should be capable of evolution. More data, cases, models, output formats shouldn’t be a problem.\n\n\n\n\n\n\n\n\n\n\n\n\nChris/r-bloggers.com"
  },
  {
    "objectID": "slides/slides-topic-02-03.html#setup-the-paths",
    "href": "slides/slides-topic-02-03.html#setup-the-paths",
    "title": " QTM 350: Data Science Computing ",
    "section": "Setup: the paths",
    "text": "Setup: the paths\n\n\nGood paths\n\nAll internal paths are relative.\nThey are invariant to moving/sharing the project.\nExamples:\n\n\"preprocessing.py\"\n\"figures/model-1.png\"\n\"../data/survey..csv\"\n\n\n\nBad paths\n\nAbsolute paths are bad paths. Don’t feed functions with paths like \"/Users/me/data/thing.sav\".\nThose paths will not work outside your computer (or maybe not even there, some days/weeks/months ahead).\n\n\n\n\nThe working directory\n\nIf you use VS, open the folder/directory where your project is.\nIf you use RStudio, open it with clicking on the script you want to work with. This will set the location of the script as working directory (which should be your working assumption, too).\nEven better yet, have the metadata set it for you:\n\nOpen your session by opening (choosing, clicking on) myproject.Rproj\nThen you’ll get the path set for you."
  },
  {
    "objectID": "slides/slides-topic-02-03.html#xxxxx",
    "href": "slides/slides-topic-02-03.html#xxxxx",
    "title": " QTM 350: Data Science Computing ",
    "section": "XXXXX",
    "text": "XXXXX\n\n\n\nXXX\n\n\nXXXX\n\n\n\n\n\n\n\n—&gt;"
  },
  {
    "objectID": "slides/slides-topic-02-03.html#setup-the-code-structure",
    "href": "slides/slides-topic-02-03.html#setup-the-code-structure",
    "title": " QTM 350: Data Science Computing ",
    "section": "Setup: the code structure",
    "text": "Setup: the code structure\n\n\nNaming scripts\n\n\nFiles should have short, descriptive names that indicate their purpose.\nI recommend the use of telling verbs.\nNames should only include letters and numbers with dashes - or underscores _ to separate words.\nUse numbering to indicate the order in which files should be run:\n\n00-setup.py\n01-import-data.py\n02-preprocess-data.py\n03-describe-uptake.py\n04-analyze-uptake.py\n05-analyze-experiment.py\n\n\n\n\n\nModularizing scripts\n\nWrite short, modular scripts. Every script serves a purpose in your pipeline.\nThis makes things easier to debug.\nAt the beginning of a script you might want to document input and output."
  },
  {
    "objectID": "slides/slides-topic-02-03.html#setup-the-code-structure-1",
    "href": "slides/slides-topic-02-03.html#setup-the-code-structure-1",
    "title": " QTM 350: Data Science Computing ",
    "section": "Setup: the code structure",
    "text": "Setup: the code structure\n\n\n\nTalk to Future-you\n\nDescribe your code, e.g. by starting with a description of what it does. If you comment/describe a lot, consider using an R Markdown (.Rmd) file instead of a simple .R script.\nPut the setup first (e.g., library() and source()).\nYou might want to outsource the loading of packages to a separate script that is imported in the first step (source(\"functions.R\")) or just declared the first script in the pipeline.\nAlways comment more than you usually do.\n\n\n\n\nStructuring your code\n\nEven with modularized code, scripts can become long. Structure helps to keep an overview.\nUse commented lines as section/subsection heads. Many IDEs have features that help with it\nRStudio, for exemple, creates a “table of contents” when you name your code chunks as follows (# followed by title and ---):\n\n\n\n# Import data --------------\n\ndat &lt;- read_csv(\"dat.csv\")"
  },
  {
    "objectID": "slides/slides-topic-02-03.html#setup-the-rest",
    "href": "slides/slides-topic-02-03.html#setup-the-rest",
    "title": " QTM 350: Data Science Computing ",
    "section": "Setup: the rest",
    "text": "Setup: the rest\n\n\nMore things to consider\n\n\nThere’d be more to say on how to establish a good project workflow, including how to\n\nstore/organize raw and derived data,\ndeal with output in form of graphs and tables,\nlink everything together from start (project setup) to finish (knitting the report)\nseparate coding for the record and experimental coding.\n\nThere’s limited value in teaching you all that upfront.\nThe truth is: You’ll likely refine your own workflow over time. Hopefully, I just saved you some initial pain.\nDo check out other people’s experiences and opinions, e.g., here or here or here.\n\n\n\n\n\n\n\nManaging your project in two simple steps"
  },
  {
    "objectID": "slides/slides-topic-02-03.html#why-version-control",
    "href": "slides/slides-topic-02-03.html#why-version-control",
    "title": " QTM 350: Data Science Computing ",
    "section": "Why version control?",
    "text": "Why version control?\n\n\n\n\nphdcomics.com"
  },
  {
    "objectID": "slides/slides-topic-02-03.html#more-reasons-to-do-version-control",
    "href": "slides/slides-topic-02-03.html#more-reasons-to-do-version-control",
    "title": " QTM 350: Data Science Computing ",
    "section": "More reasons to do version control",
    "text": "More reasons to do version control\n\n\nHave you ever…\n\n\nChanged your code, realized it was a mistake and wanted to revert back?\nLost code or had a backup that was too old?\nWanted to see the difference between different versions of your code?\nWanted to review the history of some code?\nWanted to submit a change to someone else’s code?\nWanted to share your code, or let other people work on your code?\nWanted to see how much work is being done, when, and by whom?\nWanted to experiment with but not interfering with working code?\n\n\n\n\nsi618/Stackoverflow\n\n\n\n\n\n\n\nbhimanshukalra/devrant.com"
  },
  {
    "objectID": "slides/slides-topic-02-03.html#github-solves-this-problem",
    "href": "slides/slides-topic-02-03.html#github-solves-this-problem",
    "title": " QTM 350: Data Science Computing ",
    "section": "Git(Hub) solves this problem",
    "text": "Git(Hub) solves this problem\n\n\n\n\n\n\n\n\nGit is a distributed version control system.\nImagine if your Dropbox (or Google Drive, or MS OneDrive for that matter) and the “Track changes” feature in MS Word had a baby.\nIn fact, it’s even better than that because Git is optimized for the things that data scientists spend a lot of time working on - code!\nThere is a learning curve, but it’s worth it.\nBeing familiar with Git is taken for granted when you interact with other data scientists.\nIt is by far not the only version control software, but certainly the most popular one.\nAccording to StackOverflow’s 2021 Developer Survey, more than 93% of respondents report to use Git - more than any other tool.\n\n\n\n\n\n\n\n\n\n\nIt’s important to realize that Git and GitHub are distinct things.\nGitHub is an online hosting platform that allows you to host your code online.\nIt relies on Git and makes some of its functionality more accessible.\nAlso, it provides many more useful features to collaborate with others. (Similar platforms include Bitbucket and GitLab.)\nJust like we don’t need Rstudio to run R code, we don’t need GitHub to use Git… But it will make our lives easier."
  },
  {
    "objectID": "slides/slides-topic-02-03.html#git-some-background",
    "href": "slides/slides-topic-02-03.html#git-some-background",
    "title": " QTM 350: Data Science Computing ",
    "section": "Git: some background",
    "text": "Git: some background\n\n\n\nWhere does Git come from?\n\nGit was created in 2005 by Linux creator Linus Torvalds.\nThe initial motivation was to have a non-proprietary version control system to manage Linux kernel development.\nCheck out this (quite opinionated) talk by Linus Torvalds on Git two years after its creation.\n\n\nWhat’s the meaning of Git?\n\nAnything, apparently.\nAlso, it’s pronounced [ɡɪt], not [d͡ʒɪt].\n\n\n\nHow to interact with Git?\n\nThere are many Git GUIs, giving you the option to use git without the shell (often with reduced functionality). Popular choices are the GitHub Desktop, and the Git integration into the RStudio IDE.\n\n\n\n\n\n\n\n\nLinus Torvalds"
  },
  {
    "objectID": "slides/slides-topic-02-03.html#github-some-background",
    "href": "slides/slides-topic-02-03.html#github-some-background",
    "title": " QTM 350: Data Science Computing ",
    "section": "GitHub: some background",
    "text": "GitHub: some background\n\n\n\n\nWhere does GitHub come from?\n\nGitHub.com launched in April 2008 by Tom Preston-Werner, Chris Wanstrath, P.J. Hyett and Scott Chacon.\nIn 2018, Microsoft acquired the company for more than US$7 billion.\n\n\n\nWhat’s the business model?\n\nGitHub offers various subscription plans and has expanded its services beyond hosting Git-based version control.\n\n\n\nSome interesting facts\n\nGitHub’s mascot is “Octocat”, a human-cat-octopus hybrid with five arms.\nThere are 56m+ developers on Github, with 60m+ new repositories created in 2020 alone.\nPart of GitHub’s history are controversies around issues like harassment allegations or incidences of censorship.\n\n\n\n\n\n\n\n\nScreenshot"
  },
  {
    "objectID": "slides/slides-topic-02-03.html#github-for-scientific-research",
    "href": "slides/slides-topic-02-03.html#github-for-scientific-research",
    "title": " QTM 350: Data Science Computing ",
    "section": "Git(Hub) for scientific research",
    "text": "Git(Hub) for scientific research\n\n\n\nFrom software development…\n\nGit and GitHub’s role in global software development is not in question.\nThere’s a high probability that your favourite app, program or package is built using Git-based tools. (RStudio is a case in point.)\n\n\n… to scientific research\n\nData science involves product building, collaboration, transparency. GH helps with all that.\nJournals have increasingly strict requirements regarding reproducibility and access. GH makes this easy (DOI integration, off-the-shelf licenses, etc.).\nMy website lives there. And this course does, too.\n\n\n\n\n\n\n\n\n“Democratic databases: science on GitHub” (Perkel, 2016, Nature)."
  },
  {
    "objectID": "slides/slides-topic-02-03.html#first-step-register-a-github-account",
    "href": "slides/slides-topic-02-03.html#first-step-register-a-github-account",
    "title": " QTM 350: Data Science Computing ",
    "section": "First step: register a GitHub account",
    "text": "First step: register a GitHub account\n\n\n\nGood news: It’s free!\nSimply go to https://github.com to sign up.\n\nSome things to consider:\n\nAs a student, you qualify for a free GitHub Pro account.\nThe Pro account comes with a couple of additional features.\nRegister for a free account first, then pursue the special offers.\nChoose your username wisely. This isn’t Instagram, so maybe avoid puns and “funny” nicknames."
  },
  {
    "objectID": "slides/slides-topic-02-03.html#second-step-install-git",
    "href": "slides/slides-topic-02-03.html#second-step-install-git",
    "title": " QTM 350: Data Science Computing ",
    "section": "Second step: install Git",
    "text": "Second step: install Git\nAgain, Git is an independent piece of software. You need to have it installed on your machine to call it from the Command Line or RStudio.\n\nChances are that that’s already the case. Here’s how you can check using the command line:\n\nwhich git\n\n/usr/bin/git\n\n\n\n\nAnd here’s how you can check the version:\n\ngit --version\n\ngit version 2.39.3 (Apple Git-145)\n\n\n\n\nIf you want to install (or update) Git on your Mac/Linux machine, I recommend using Homebrew, “the missing package manager for macOS (or Linux)”:\n\nbrew install git\n\n\n\nTo install/update Git for Windows, check out happygitwithr.com."
  },
  {
    "objectID": "slides/slides-topic-02-03.html#third-step-introduce-yourself-to-git",
    "href": "slides/slides-topic-02-03.html#third-step-introduce-yourself-to-git",
    "title": " QTM 350: Data Science Computing ",
    "section": "Third step: introduce yourself to Git",
    "text": "Third step: introduce yourself to Git\nThis is particularly important when you work with Git but without the GitHub overhead. The idea is to define how your commits are labelled. Others should easily identify your commits as coming from you.\n\nHave you already introduced yourself to Git? Find it out:\n\ngit config --list\n\n\n\nStill have to introduce yourself? To that end, we set our user name and email address like this:\n\ngit config --global user.name 'davimoreira'\ngit config --global user.email 'davi.moreira@example.com'\n\n\n\nThe user name can be (but does not have to be) your GitHub user name. The email address should definitely be the one associated with your GitHub account.\n\n\nCheck out these setup instructions from Software Carpentry to learn about more configuration options."
  },
  {
    "objectID": "slides/slides-topic-02-03.html#why-bother-with-the-shell",
    "href": "slides/slides-topic-02-03.html#why-bother-with-the-shell",
    "title": " QTM 350: Data Science Computing ",
    "section": "Why bother with the shell?",
    "text": "Why bother with the shell?\n\n\n\nSome benefits of the shell:\n\nThe shell is powerful and flexible. It lets you do things that the RStudio Git GUI can’t (we will see it later).\nWorking in the shell is potentially more appropriate for projects that aren’t primarily based in R.\nKnowing the basic Git commands in the shell is a good thing for a data scientist."
  },
  {
    "objectID": "slides/slides-topic-02-03.html#what-is-version-control-1",
    "href": "slides/slides-topic-02-03.html#what-is-version-control-1",
    "title": " QTM 350: Data Science Computing ",
    "section": "What is Version Control?",
    "text": "What is Version Control?\n\n\n\n\nVersion Control is a way to track your files\nIt is usually saved in a series of snapshots and branches, which you can move back and forth between\nVersion Control allows you to view how project has progressed over time\nIt allows you to:\n\nDistribute your file changes over time\nPrevent against data loss/damage by creating backup snapshots\nManage complex project structures (e.g. Linux)\n\n\n\n\nXXXX"
  },
  {
    "objectID": "slides/slides-topic-02-03.html#what-is-version-control",
    "href": "slides/slides-topic-02-03.html#what-is-version-control",
    "title": " QTM 350: Data Science Computing ",
    "section": "What is Version Control?",
    "text": "What is Version Control?\n\n\n\n\nVersion Control is a way to track your files\nIt is usually saved in a series of snapshots and branches, which you can move back and forth between\nVersion Control allows you to view how project has progressed over time\nIt allows you to:\n\nDistribute your file changes over time\nPrevent against data loss/damage by creating backup snapshots\nManage complex project structures (e.g. Linux)"
  },
  {
    "objectID": "slides/slides-topic-02-03.html#the-git-workflow",
    "href": "slides/slides-topic-02-03.html#the-git-workflow",
    "title": " QTM 350: Data Science Computing ",
    "section": "The Git Workflow",
    "text": "The Git Workflow\n\n\n\n\nGit goes through a long chain of operations and tasks before tracking a change.\nMany of these tasks are user controlled, and are required for changes to be tracked correctly.\n\n\n\n\n\n\n\nGit Cheatsheet"
  },
  {
    "objectID": "slides/slides-topic-02-03.html#repositories",
    "href": "slides/slides-topic-02-03.html#repositories",
    "title": " QTM 350: Data Science Computing ",
    "section": "Repositories",
    "text": "Repositories\n\n\n\n\nRepositories, usually called ‘repos’, store the full history and source control of a project.\nThey can either be hosted locally, or on a shared server, such as GitHub.\nMost repositories are stored on GitHub, while core contributors make copies of the repository on their machine and update the repository using the push/pull system.\nAny repository stored somewhere other than locally is called a ‘remote repository’."
  },
  {
    "objectID": "slides/slides-topic-02-03.html#repos-vs-directories",
    "href": "slides/slides-topic-02-03.html#repos-vs-directories",
    "title": " QTM 350: Data Science Computing ",
    "section": "Repos vs Directories",
    "text": "Repos vs Directories\n\n\n\n\nRepositories are timelines of the entire project, including all\nDirectories, or ‘working directories’ are projects at their current state in time.\nAny local directory interacting with a repository is technically a repository itself, however, it is better to call these directories ‘local repositories’, as they are instances of a remote repository."
  },
  {
    "objectID": "slides/slides-topic-02-03.html#texto",
    "href": "slides/slides-topic-02-03.html#texto",
    "title": " QTM 350: Data Science Computing ",
    "section": "texto",
    "text": "texto\n\n\n\nXXX\n\n\nXXXX"
  },
  {
    "objectID": "slides/slides-topic-02-03.html#texto-1",
    "href": "slides/slides-topic-02-03.html#texto-1",
    "title": " QTM 350: Data Science Computing ",
    "section": "texto",
    "text": "texto\n\n\n\nXXX\n\n\nXXXX"
  },
  {
    "objectID": "slides/slides-topic-02-03.html#workflow-diagram",
    "href": "slides/slides-topic-02-03.html#workflow-diagram",
    "title": " QTM 350: Data Science Computing ",
    "section": "Workflow Diagram",
    "text": "Workflow Diagram\n\n\n\n\n\nThis diagram shows a little bit about how the basic Git workflow process works\nThe staging area is the bundle of all the modifications to the project that are going to be committed.\nA ‘commit’ is similar to taking a snapshot of the current state of the project, then storing it on a timeline."
  },
  {
    "objectID": "slides/slides-topic-02-03.html#hands-on-creating-a-new-repository",
    "href": "slides/slides-topic-02-03.html#hands-on-creating-a-new-repository",
    "title": " QTM 350: Data Science Computing ",
    "section": "Hands on! Creating a New Repository",
    "text": "Hands on! Creating a New Repository\n\n\n\n\nI will create a new folder/directory in my computer: my_project\nOpen the bash Terminal and move to the my_project directory\nI will copy the my_project directory path into a text document\nI will try to add this folder to the staging area.\n\n\n\ngit add .\n\n\n\nError!\nWe need to initialize the repository. Do not do that in your root directory!\n\n\n\ngit init"
  },
  {
    "objectID": "slides/slides-topic-02-03.html#hands-on-addingremoving-files-from-the-repo",
    "href": "slides/slides-topic-02-03.html#hands-on-addingremoving-files-from-the-repo",
    "title": " QTM 350: Data Science Computing ",
    "section": "Hands on! Adding/Removing files from the repo",
    "text": "Hands on! Adding/Removing files from the repo\n\n\n\n\nOpen the bash Terminal and move to the my_project directory\nTo check the staging area status.\n\n\n\ngit status\n\n\n\nLet’s add the path file to the staging area. Then, check its status.\n\n\n\ngit add path.txt\ngit status"
  },
  {
    "objectID": "slides/slides-topic-02-03.html#hands-on-addingremoving-files-from-the-repo-1",
    "href": "slides/slides-topic-02-03.html#hands-on-addingremoving-files-from-the-repo-1",
    "title": " QTM 350: Data Science Computing ",
    "section": "Hands on! Adding/Removing files from the repo",
    "text": "Hands on! Adding/Removing files from the repo\n\n\n\n\nLet’s create new files in the project and check staging area status:\n\n\n\ntouch file.txt\ntouch script.py\ntouch report.html\ntouch style.css\ngit status"
  },
  {
    "objectID": "slides/slides-topic-02-03.html#hands-on-addingremoving-files-from-the-repo-2",
    "href": "slides/slides-topic-02-03.html#hands-on-addingremoving-files-from-the-repo-2",
    "title": " QTM 350: Data Science Computing ",
    "section": "Hands on! Adding/Removing files from the repo",
    "text": "Hands on! Adding/Removing files from the repo\n\n\n\n\nInstead of adding each file to the staging area at once. We can do add all them together:\n\n\n\ngit add .\ngit status"
  },
  {
    "objectID": "slides/slides-topic-02-03.html#hands-on-addingremoving-files-from-the-repo-3",
    "href": "slides/slides-topic-02-03.html#hands-on-addingremoving-files-from-the-repo-3",
    "title": " QTM 350: Data Science Computing ",
    "section": "Hands on! Adding/Removing files from the repo",
    "text": "Hands on! Adding/Removing files from the repo\n\n\n\n\nIn the directory, let’s delete the .py and the .css files. Check the status:\n\n\n\nrm -f script.py\nrm -f style.css\ngit status"
  },
  {
    "objectID": "slides/slides-topic-02-03.html#hands-on-first-commit",
    "href": "slides/slides-topic-02-03.html#hands-on-first-commit",
    "title": " QTM 350: Data Science Computing ",
    "section": "Hands on! First Commit",
    "text": "Hands on! First Commit\n\n\n\n\n(cont.) In the directory, let’s do our “initial commit” :\n\n\n\ngit commit -m \"initial commit\""
  },
  {
    "objectID": "slides/slides-topic-02-03.html#hands-on-first-commit-1",
    "href": "slides/slides-topic-02-03.html#hands-on-first-commit-1",
    "title": " QTM 350: Data Science Computing ",
    "section": "Hands on! First Commit",
    "text": "Hands on! First Commit\n\n\n\n\nTo check all commits in your repo:\n\n\n\ngit log\n\n\n\nMost important things here are:\n\ncommit id;\ndate/time;\nbranch;\ncommit message;"
  },
  {
    "objectID": "slides/slides-topic-02-03.html#hands-on-git-checkout",
    "href": "slides/slides-topic-02-03.html#hands-on-git-checkout",
    "title": " QTM 350: Data Science Computing ",
    "section": "Hands on! Git Checkout",
    "text": "Hands on! Git Checkout\n\n\n\n\nFirst, let’s make new commits in our repo:\n\n\n\ntouch script.py  # new file\ntouch webpage.html. # new file\ntouch style.css  # new file\ngit add . # add files to the staging area\ngit commit -m \"adding files\" # new commit\necho \"Hello you\" &gt;&gt; file.txt   # edit .txt file\ngit add . # add files to the staging area\ngit commit -m \"edditing file.txt\". # new commit\nrm -f file.txt. # remove file\ngit commit -a -m \"delete file.txt\" # new commit\ngit log  # lets check"
  },
  {
    "objectID": "slides/slides-topic-02-03.html#hands-on-git-checkout-1",
    "href": "slides/slides-topic-02-03.html#hands-on-git-checkout-1",
    "title": " QTM 350: Data Science Computing ",
    "section": "Hands on! Git Checkout",
    "text": "Hands on! Git Checkout\n\n\n\n\nWe use checkout to go back in time to a given commit. Let’s go back to the “initial commit”:\n\n\n\ngit checkout 2b543ff2b3423a6d01727a11603792783315680d\ngit log\n\n\n\nCheck your folder/directory!\nImportant: doing this does not delete our commits. We just move back in time!"
  },
  {
    "objectID": "slides/slides-topic-02-03.html#hands-on-reverse-and-reset",
    "href": "slides/slides-topic-02-03.html#hands-on-reverse-and-reset",
    "title": " QTM 350: Data Science Computing ",
    "section": "Hands on! Reverse and Reset",
    "text": "Hands on! Reverse and Reset\n\n\n\n\nWe use checkout to go back in time to a given commit. Let’s go back to the “initial commit”:\n\n\n\ngit checkout 2b543ff2b3423a6d01727a11603792783315680d\ngit log\n\n\n\nCheck your folder/directory!\nImportant: doing this does not delete our commits. We just move back in time!"
  },
  {
    "objectID": "slides/slides-topic-02-03.html#hands-on-reverse-and-reset-1",
    "href": "slides/slides-topic-02-03.html#hands-on-reverse-and-reset-1",
    "title": " QTM 350: Data Science Computing ",
    "section": "Hands on! Reverse and Reset",
    "text": "Hands on! Reverse and Reset\n\n\n\n\nTo “move back to the future”, the most recent commit, we just need to go back to the main branch:\n\n\ngit checkout main\ngit log\n\n\nCheck your folder/directory!\nImportant: doing this does not delete our commits. We just move back and forth in time!"
  },
  {
    "objectID": "slides/slides-topic-02-03.html#hands-on-.gitignore",
    "href": "slides/slides-topic-02-03.html#hands-on-.gitignore",
    "title": " QTM 350: Data Science Computing ",
    "section": "Hands on! .gitignore",
    "text": "Hands on! .gitignore\n\n\n\n\nLet’s create a new text file, notes.txt, and make some edits.\n\n\n\ntouch notes.txt   \necho \"Welcome to Data Science Computing\" &gt;&gt; notes.txt\ngit status\ngit add .\ngit status\necho \"I hope you enjoy\" &gt;&gt; notes.txt\ngit status"
  },
  {
    "objectID": "slides/slides-topic-02-03.html#hands-on-.gitignore-1",
    "href": "slides/slides-topic-02-03.html#hands-on-.gitignore-1",
    "title": " QTM 350: Data Science Computing ",
    "section": "Hands on! .gitignore",
    "text": "Hands on! .gitignore\n\n\n\n\nLet’s say we do not want to track this file (can be a folder or many files).\nTo do so, we tell Git to ignore those files or folders. We create a .gitignore file.\n\n\n\ntouch .gitignore\n\n\n\nIn the .gitignore we list everything we want Git to ignore."
  },
  {
    "objectID": "slides/slides-topic-02-03.html#hands-on-.gitignore-2",
    "href": "slides/slides-topic-02-03.html#hands-on-.gitignore-2",
    "title": " QTM 350: Data Science Computing ",
    "section": "Hands on! .gitignore",
    "text": "Hands on! .gitignore\n\n\n\n\nLet’s add them to the staging area and do a new commit.\n\n\n\ngit status\ngit add .\ngit status\ngit commit -m \"added gitignore\""
  },
  {
    "objectID": "slides/slides-topic-02-03.html#hands-on-.gitignore-3",
    "href": "slides/slides-topic-02-03.html#hands-on-.gitignore-3",
    "title": " QTM 350: Data Science Computing ",
    "section": "Hands on! .gitignore",
    "text": "Hands on! .gitignore\n\n\n\n\nNow, let’s edit the notes.txt file.\nCheck git status\nWe need to update the cached files list, commit these updates and…\nLet’s edit the notes.txt file one more time.\nFinally, let’s check if the notes.txt file is being tracked.\n\n\n\necho \"New line in the file\" &gt;&gt; notes.txt\ngit status\ngit rm -r --cached .\ngit add .\ngit commit -m \"fixed file tracking\"\necho \"The previous edition was not the last one\" &gt;&gt; notes.txt\ngit status"
  },
  {
    "objectID": "slides/slides-topic-02-03.html#hands-on-.gitignore-4",
    "href": "slides/slides-topic-02-03.html#hands-on-.gitignore-4",
    "title": " QTM 350: Data Science Computing ",
    "section": "Hands on! .gitignore",
    "text": "Hands on! .gitignore\n\n\n\n\nLet’s add them to the staging area and do a new commit.\n\n\n\ngit status\ngit add .\ngit status\ngit commit -m \"added gitignore\""
  },
  {
    "objectID": "slides/slides-topic-02-03.html#hands-on-.gitignore-5",
    "href": "slides/slides-topic-02-03.html#hands-on-.gitignore-5",
    "title": " QTM 350: Data Science Computing ",
    "section": "Hands on! .gitignore",
    "text": "Hands on! .gitignore\n\n\n\n\nNow, let’s edit the notes.txt file.\nCheck git status\nWe need to update the cached files list, commit these updates and…\nLet’s edit the notes.txt file one more time.\nFinally, let’s check if the notes.txt file is being tracked.\n\n\necho \"New line in the file\" &gt;&gt; notes.txt\ngit status\ngit rm -r --cached .\ngit add .\ngit commit -m \"fixed file tracking\"\necho \"The previous edition was not the last one\" &gt;&gt; notes.txt\ngit status"
  },
  {
    "objectID": "slides/slides-topic-02-03.html#git-branches",
    "href": "slides/slides-topic-02-03.html#git-branches",
    "title": " QTM 350: Data Science Computing ",
    "section": "Git branches",
    "text": "Git branches"
  },
  {
    "objectID": "slides/slides-topic-02-03.html#git-branches-1",
    "href": "slides/slides-topic-02-03.html#git-branches-1",
    "title": " QTM 350: Data Science Computing ",
    "section": "Git branches",
    "text": "Git branches\n\n\n\n\n\nGit branches are a way to create separate development paths without overriding or creating copies of your project.\nBranches can be added, deleted, and merged, just like regular commits.\n\n\n\n\n\n\n\nTechnical Foundations of Informatics"
  },
  {
    "objectID": "slides/slides-topic-02-03.html#git-branches-2",
    "href": "slides/slides-topic-02-03.html#git-branches-2",
    "title": " QTM 350: Data Science Computing ",
    "section": "Git branches",
    "text": "Git branches\n\n\n\nBranches can be used to:\n\nCreate separate development paths without overriding progress\nSeparate different end goals of your project\nCreates separate branches for each stage of development (release, development, fixes, master)\nCreates separate branches for project collaboration!"
  },
  {
    "objectID": "slides/slides-topic-02-03.html#git-branches-hands-on",
    "href": "slides/slides-topic-02-03.html#git-branches-hands-on",
    "title": " QTM 350: Data Science Computing ",
    "section": "Git branches: Hands on!",
    "text": "Git branches: Hands on!\n\n\n\n\nLet’s create a new_project directory.\n\n\n\nmkdir new_project\ngit init\nmkdir src\nmkdir lib\ncd src/\ntouch file.txt\ntouch script.js\ncd ..\ncd lib/\ntouch lib.py\ntouch file2.txt\ncd ..\ngit status"
  },
  {
    "objectID": "slides/slides-topic-02-03.html#git-branches-hands-on-1",
    "href": "slides/slides-topic-02-03.html#git-branches-hands-on-1",
    "title": " QTM 350: Data Science Computing ",
    "section": "Git branches: Hands on!",
    "text": "Git branches: Hands on!\n\n\n\n\nLet’s do our initial commit, create a new branch dev, and switch to the new branch.\nThen, let’s go back to the main branch, create a new one bugs, and list them\n\n\n\ngit add .\ngit commit -m \"initial commit\"\ngit checkout -b dev \ngit add .\ngit commit -m \"initial commit\"\ngit checkout main\ngit branch bugs\ngit branch -a\ngit branch -d bugs # to delete"
  },
  {
    "objectID": "slides/slides-topic-02-03.html#git-branches-hands-on-2",
    "href": "slides/slides-topic-02-03.html#git-branches-hands-on-2",
    "title": " QTM 350: Data Science Computing ",
    "section": "Git branches: Hands on!",
    "text": "Git branches: Hands on!\n\n\n\n\nLet’s work on our dev branch.\nAdd a version.txt file\nThen, let’s merge our branches.\nTo move on in our workflow, we can move back to the dev branch and do a new commit and keep working in the dev branch.\n\n\n\ngit checkout dev\necho \"new text\" &gt;&gt; file.txt\ngit add .\ngit commit -m \"new file.txt content\"\necho \"new text\" &gt;&gt; myfile.txt\ngit add .\ngit commit -m \"new myfile.txt content\"\ngit log\ntouch version.txt\necho \"1.0\" &gt;&gt; version.txt\ngit status\ngit add .\ngit commit -m \"release v1.0\"\ngit checkout main\ngit merge dev\ngit log\ngit checkout dev\ngit add .\ngit commit -m \"starting new version\"\ngit log\n\n\nCheck this material for more on Merge & Branches."
  },
  {
    "objectID": "slides/slides-topic-02-03.html#github-creating-a-new-repository",
    "href": "slides/slides-topic-02-03.html#github-creating-a-new-repository",
    "title": " QTM 350: Data Science Computing ",
    "section": "GitHub: Creating a New Repository",
    "text": "GitHub: Creating a New Repository\n\nFirst, we create a new repo on GitHub"
  },
  {
    "objectID": "slides/slides-topic-02-03.html#github-creating-a-new-repository-1",
    "href": "slides/slides-topic-02-03.html#github-creating-a-new-repository-1",
    "title": " QTM 350: Data Science Computing ",
    "section": "GitHub: Creating a New Repository",
    "text": "GitHub: Creating a New Repository\n\nWe copy the remote repo address."
  },
  {
    "objectID": "slides/slides-topic-02-03.html#the-push-and-pull-system",
    "href": "slides/slides-topic-02-03.html#the-push-and-pull-system",
    "title": " QTM 350: Data Science Computing ",
    "section": "The Push and Pull System",
    "text": "The Push and Pull System\n\n\n\n\nThe Git/GitHub push and pull system is central to collaborating on coding projects. It allows multiple developers to work on the same project without conflicts.\nThe Push Operation: Sends your local commits to the remote repository.\n\ngit push origin main - pushes commits from your local main branch to the remote main branch.\n\nThe Pull Operation: Fetches the latest changes from the remote repository and merges them into your local repository.\n\ngit pull origin main - pulls changes from the remote main branch and merges them into your local main branch.\n\nBest Practices:\n\nPull often to keep your local repository up-to-date.\nPush regularly to share your contributions with the team."
  },
  {
    "objectID": "slides/slides-topic-02-03.html#the-push-and-pull-system-1",
    "href": "slides/slides-topic-02-03.html#the-push-and-pull-system-1",
    "title": " QTM 350: Data Science Computing ",
    "section": "The Push and Pull System",
    "text": "The Push and Pull System\n\nStarting with the Pull request\nLet’s create a README.md file in the remote repo and commit:"
  },
  {
    "objectID": "slides/slides-topic-02-03.html#the-push-and-pull-system-2",
    "href": "slides/slides-topic-02-03.html#the-push-and-pull-system-2",
    "title": " QTM 350: Data Science Computing ",
    "section": "The Push and Pull System",
    "text": "The Push and Pull System\n\nLet’s create a README.md file in the remote repo and commit:"
  },
  {
    "objectID": "slides/slides-topic-02-03.html#the-push-and-pull-system-3",
    "href": "slides/slides-topic-02-03.html#the-push-and-pull-system-3",
    "title": " QTM 350: Data Science Computing ",
    "section": "The Push and Pull System",
    "text": "The Push and Pull System\n\nLet’s create a LICENSE and .gitignore files in the remote repo and commit:"
  },
  {
    "objectID": "slides/slides-topic-02-03.html#xxxxx-parei-aqui",
    "href": "slides/slides-topic-02-03.html#xxxxx-parei-aqui",
    "title": " QTM 350: Data Science Computing ",
    "section": "XXXXX PAREI AQUI",
    "text": "XXXXX PAREI AQUI\n\n\n\nXXX PAREI AQUI FALTA FALAR DO R RSTUDIO E DE COLLABORATION!\n\n\nXXXX"
  },
  {
    "objectID": "lecture_material/material-topic-02/command_line_activity.html",
    "href": "lecture_material/material-topic-02/command_line_activity.html",
    "title": "Topic 2: In-Class Activity - Exploring the Command Line",
    "section": "",
    "text": "In-Class Activity: Exploring the Command Line\nObjective: The goal of this activity is to put into practice the shell commands learned in class, including file navigation, file manipulation, and simple scripting.\nInstructions:\n\nShell Basics:\n\nOpen your terminal or command line interface.\nIdentify which shell you are using with the command echo $SHELL.\nUse man or --help to look up the manual for the ls command.\n\nHelp!:\n\nFor each of the following commands, use --help or man to find out what they do: cd, mkdir, rm.\n\nNavigating Your System:\n\nNavigate to your home directory using cd.\nList all the files and directories in your home directory with a detailed view using ls -l.\nCreate a new directory called ds_activities.\n\nManaging Your Files:\n\nInside ds_activities, create a new file called my_script.sh.\nCopy any text file from your system into this directory and rename it to sample.txt.\n\nWorking with Text Files:\n\nUse cat to display the contents of sample.txt.\nUse head and tail to display the first and last 10 lines of sample.txt.\n\nRedirects, Pipes, and Loops:\n\nRedirect the output of ls -l to a file named directory_list.txt.\nUse a pipe to sort directory_list.txt alphabetically and display the results with less.\n\nScripting:\n\nEdit my_script.sh to include a bash script that prints “Hello, Data Science!” to the terminal.\nMake my_script.sh executable with chmod and run it.\n\n\nSubmission: - Compress the ds_activities directory with all created files into a .zip file and submit it through Gradescope in the Lecture Quiz 06. - Name the zip file FirstName_LastName_ds_activities.zip.\nNote: Remember to replace FirstName and LastName with your actual last and first names."
  },
  {
    "objectID": "slides/slides-topic-02-02-examples/naive_bayes.html#what-is-a-classification-problem-and-why-do-we-use-machine-learning-in-classification",
    "href": "slides/slides-topic-02-02-examples/naive_bayes.html#what-is-a-classification-problem-and-why-do-we-use-machine-learning-in-classification",
    "title": "Today’s Summary and Learning Objectives",
    "section": "What is a Classification Problem and Why do we use Machine Learning in Classification?",
    "text": "What is a Classification Problem and Why do we use Machine Learning in Classification?\nClassification involves categorizing data into predefined classes or groups based on their features. The goal is to accurately assign new data points to one of these categories."
  },
  {
    "objectID": "slides/slides-topic-02-02-examples/naive_bayes.html#real-world-examples",
    "href": "slides/slides-topic-02-02-examples/naive_bayes.html#real-world-examples",
    "title": "Today’s Summary and Learning Objectives",
    "section": "Real-World Examples",
    "text": "Real-World Examples\n\nBusiness: From customer segmentation to fraud detection, classification drives smarter business decisions.\nHealthcare: Predicting disease outbreaks, patient diagnosis, and treatment planning.\nTechnology: Image and Voice recognition.\nPolitical Science: Policy Expressed Agendas."
  },
  {
    "objectID": "slides/slides-topic-02-02-examples/naive_bayes.html#advantages-of-machine-learning-for-classification",
    "href": "slides/slides-topic-02-02-examples/naive_bayes.html#advantages-of-machine-learning-for-classification",
    "title": "Today’s Summary and Learning Objectives",
    "section": "Advantages of Machine Learning for Classification",
    "text": "Advantages of Machine Learning for Classification\n\nEfficiency at Scale: Machine learning algorithms can quickly classify large volumes of data with high accuracy.\nPattern Recognition: ML models excel at recognizing complex patterns in data that are not easily discernible by humans.\nAdaptability: ML classifiers can adapt to new, unseen data, making them ideal for dynamic environments.\nAutomation: Automates the decision-making process in real-time applications, like spam detection or medical diagnoses.\nContinuous Improvement: ML models can learn from new data over time, improving their accuracy and robustness.\n\nMachine learning has transformed the landscape of classification, providing tools that offer precision, speed, and flexibility, which are unparalleled by traditional human and statistical methods.\n#\n\nWhat is Naive Bayes?"
  },
  {
    "objectID": "slides/slides-topic-02-02-examples/naive_bayes.html#from-conditional-probability-to-bayes-theorem",
    "href": "slides/slides-topic-02-02-examples/naive_bayes.html#from-conditional-probability-to-bayes-theorem",
    "title": "Today’s Summary and Learning Objectives",
    "section": "From Conditional Probability to Bayes’ Theorem",
    "text": "From Conditional Probability to Bayes’ Theorem\nGiven that the definition of Conditional Probability is:\n\\[ P(A|B) = \\frac{P(A \\cap B)}{P(B)} \\]\nAnd knowing:\n\\[ P(A \\cap B) = P(B|A) \\cdot P(A) \\]\nWe can substitute to get:\n\\[ P(A|B) = \\frac{P(B|A) \\cdot P(A)}{P(B)} \\]\n###\n\nThis is Bayes’ Theorem!"
  },
  {
    "objectID": "slides/slides-topic-02-02-examples/naive_bayes.html#example-medical-diagnosis",
    "href": "slides/slides-topic-02-02-examples/naive_bayes.html#example-medical-diagnosis",
    "title": "Today’s Summary and Learning Objectives",
    "section": "Example: Medical Diagnosis",
    "text": "Example: Medical Diagnosis\n\nWhat is the probability that a person has the disease if they tested positive?\n\nConsider a test for a particular disease, which has the following characteristics:\n\n\nDisease Prevalence (Prior Probability): 0.1%, \\(P(Disease) = 0.001\\).\n\n\n\nTest Sensitivity (True Positive Rate): 99%, \\(P(Pos | Disease) = 0.99\\).\n\n\n\nTest Specificity (True Negative Rate): 95%, \\(P(Neg | NoDisease) = 0.95\\)."
  },
  {
    "objectID": "slides/slides-topic-02-02-examples/naive_bayes.html#understanding-our-priors",
    "href": "slides/slides-topic-02-02-examples/naive_bayes.html#understanding-our-priors",
    "title": "Today’s Summary and Learning Objectives",
    "section": "Understanding Our Priors",
    "text": "Understanding Our Priors\n\n\nPrior Probability of Having the Disease: \\(P(Disease) = 0.001\\)\n\n\n\nPrior Probability of Not Having the Disease: \\(P(NoDisease) = 1 - P(Disease) = 0.999\\)\n\n\nThese priors are essential for our Bayes’ Theorem calculation."
  },
  {
    "objectID": "slides/slides-topic-02-02-examples/naive_bayes.html#applying-bayes-theorem",
    "href": "slides/slides-topic-02-02-examples/naive_bayes.html#applying-bayes-theorem",
    "title": "Today’s Summary and Learning Objectives",
    "section": "Applying Bayes’ Theorem",
    "text": "Applying Bayes’ Theorem\n\nTo find the posterior probability \\(P(Disease | Pos)\\), we apply Bayes’ Theorem:\n\\[ P(Disease | Pos) = \\frac{P(Pos | Disease) \\cdot P(Disease)}{P(Pos)} \\]\n\nWhere \\(P(Pos)\\) can be found using the law of total probability:\n\\[ P(Pos) = P(Pos | Disease) \\cdot P(Disease) + P(Pos | NoDisease) \\cdot P(NoDisease) \\]\n\nThe law of total probability is a fundamental rule relating marginal probabilities to conditional probabilities. It states that the probability of an event can be found by considering all possible ways that the event can occur."
  },
  {
    "objectID": "slides/slides-topic-02-02-examples/naive_bayes.html#finding-ppos",
    "href": "slides/slides-topic-02-02-examples/naive_bayes.html#finding-ppos",
    "title": "Today’s Summary and Learning Objectives",
    "section": "Finding \\(P(Pos)\\)",
    "text": "Finding \\(P(Pos)\\)\n\nGiven our test specificity is 95%, the false positive rate is 5% (\\(P(Pos | NoDisease) = 0.05\\)).\n\\[ P(Pos) = (0.99 \\times 0.001) + (0.05 \\times 0.999) \\] \\[ P(Pos) = 0.051 \\]"
  },
  {
    "objectID": "slides/slides-topic-02-02-examples/naive_bayes.html#the-posterior-probability",
    "href": "slides/slides-topic-02-02-examples/naive_bayes.html#the-posterior-probability",
    "title": "Today’s Summary and Learning Objectives",
    "section": "The Posterior Probability",
    "text": "The Posterior Probability\n\n\nGiven: \\(P(Pos | Disease) = 0.99\\), \\(P(Disease) = 0.001\\), and our calculated \\(P(Pos) = 0.051\\).\n\n\n\\[ P(Disease | Pos) = \\frac{0.99 \\times 0.001}{0.051 } \\]\n\n\\[ P(Disease | Pos) = 0.019 \\]\nDespite testing positive, an individual has only a \\(1.9\\%\\) chance of having the disease. This result might seem counterintuitive given the high test sensitivity (99%), but it is largely due to the low prevalence of the disease (0.1%) and the impact of false positives in the wider population.\n\nImplications: This underscores a crucial aspect of diagnostic tests - a high sensitivity rate does not guarantee a high probability of having the disease upon testing positive, especially when the disease prevalence is low. The relatively low posterior probability highlights the importance of considering both the characteristics of the test (such as sensitivity and specificity) and the prevalence of the condition in the population when interpreting test results.\n\n#\n\nApplying Bayes’ Theorem for Classification"
  },
  {
    "objectID": "slides/slides-topic-02-02-examples/naive_bayes.html#applying-bayes-theorem-for-classification",
    "href": "slides/slides-topic-02-02-examples/naive_bayes.html#applying-bayes-theorem-for-classification",
    "title": "Today’s Summary and Learning Objectives",
    "section": "Applying Bayes’ Theorem for Classification",
    "text": "Applying Bayes’ Theorem for Classification\n\nGiven a set of features \\(X = (x_1, x_2, ..., x_n)\\), we want to predict the class \\(C_k\\) out of \\(m\\) possible classes.\nThe goal is to find:\n\\[ P(C_k|X) = \\frac{P(X|C_k) \\cdot P(C_k)}{P(X)} \\]\n\n\\(P(C_k|X)\\) is the posterior probability: Probability of class \\(C_k\\) given features \\(X\\).\n\\(P(C_k)\\) is the prior probability: Probability of class \\(C_k\\).\n\\(P(X|C_k)\\) is the likelihood: Likelihood of features \\(X\\) given class \\(C_k\\).\n\\(P(X)\\) is the marginal probability: Evidence, the total probability of observing features \\(X\\).\n\n\nHow do we deal with \\(X\\) being multidimensional?"
  },
  {
    "objectID": "slides/slides-topic-02-02-examples/naive_bayes.html#the-complexity-of-high-dimensionality",
    "href": "slides/slides-topic-02-02-examples/naive_bayes.html#the-complexity-of-high-dimensionality",
    "title": "Today’s Summary and Learning Objectives",
    "section": "The Complexity of High Dimensionality",
    "text": "The Complexity of High Dimensionality\n\nWhen applying Bayes’ Theorem to classification:\n\n\nWe encounter multidimensional feature vectors \\(X = (x_1, x_2, ..., x_n)\\).\n\n\n\nCalculating the likelihood, \\(P(X|C_k)\\), directly becomes impractical due to the curse of dimensionality.\n\n\n\nHigh-dimensional spaces increase the data requirement exponentially.\n\n\n\nDirect calculation of \\(P(X|C_k)\\) involves understanding complex relationships among all features."
  },
  {
    "objectID": "slides/slides-topic-02-02-examples/naive_bayes.html#example-the-challenge-of-high-dimensionality-in-spam-detection",
    "href": "slides/slides-topic-02-02-examples/naive_bayes.html#example-the-challenge-of-high-dimensionality-in-spam-detection",
    "title": "Today’s Summary and Learning Objectives",
    "section": "Example: The Challenge of High Dimensionality in Spam Detection",
    "text": "Example: The Challenge of High Dimensionality in Spam Detection\n\n\nContext: Email spam detection based on multidimensional feature vectors \\(X = (x_1, x_2, ..., x_n)\\).\nGoal: Classify emails into spam (\\(C_1\\)) or not spam (\\(C_2\\))."
  },
  {
    "objectID": "slides/slides-topic-02-02-examples/naive_bayes.html#multidimensional-features",
    "href": "slides/slides-topic-02-02-examples/naive_bayes.html#multidimensional-features",
    "title": "Today’s Summary and Learning Objectives",
    "section": "Multidimensional Features",
    "text": "Multidimensional Features\n\nFrequency of specific keywords (e.g., “offer”, “free”).\nEmail length.\nUse of capital letters.\nPresence of attachments.\nTime of day the email was sent.\n\nEach feature contributes to identifying spam."
  },
  {
    "objectID": "slides/slides-topic-02-02-examples/naive_bayes.html#example-the-challenge-of-high-dimensionality-in-spam-detection-1",
    "href": "slides/slides-topic-02-02-examples/naive_bayes.html#example-the-challenge-of-high-dimensionality-in-spam-detection-1",
    "title": "Today’s Summary and Learning Objectives",
    "section": "Example: The Challenge of High Dimensionality in Spam Detection",
    "text": "Example: The Challenge of High Dimensionality in Spam Detection"
  },
  {
    "objectID": "slides/slides-topic-02-02-examples/naive_bayes.html#complexity-of-direct-calculation-pxc_k",
    "href": "slides/slides-topic-02-02-examples/naive_bayes.html#complexity-of-direct-calculation-pxc_k",
    "title": "Today’s Summary and Learning Objectives",
    "section": "Complexity of Direct Calculation \\(P(X|C_k)\\)",
    "text": "Complexity of Direct Calculation \\(P(X|C_k)\\)\n\n\nDirectly calculating \\(P(X|C_k)\\) requires assessing how all features \\(x_1, x_2, ..., x_n\\) collectively influence the likelihood of an email being spam.\n\n\n\nWith 10 binary features, there are \\(2^{10} = 1024\\) possible combinations.\n\n\n\nAccurately estimating \\(P(X|C_k)\\) for all combinations requires a vast dataset, often impractical to obtain.\n\n#\n\nThe Naive Assumption"
  },
  {
    "objectID": "slides/slides-topic-02-02-examples/naive_bayes.html#where-is-naive-bayes-used",
    "href": "slides/slides-topic-02-02-examples/naive_bayes.html#where-is-naive-bayes-used",
    "title": "Today’s Summary and Learning Objectives",
    "section": "Where is Naive Bayes Used?",
    "text": "Where is Naive Bayes Used?\n\nSpam detection in emails.\nSentiment analysis in social media.\nDocument classification.\nMedical diagnosis.\n\n#\n\nStatistical Learning Models"
  },
  {
    "objectID": "slides/slides-topic-02-02-examples/naive_bayes.html#supervised-learning",
    "href": "slides/slides-topic-02-02-examples/naive_bayes.html#supervised-learning",
    "title": "Today’s Summary and Learning Objectives",
    "section": "Supervised Learning",
    "text": "Supervised Learning\nModels are trained on labeled data. Each training example includes an input and a corresponding output label. The goal is to learn a mapping function from inputs to outputs to make predictions on new, unseen data.\n\nExamples\n\nLinear Regression: Predicts a continuous output. Common in predicting housing prices, stock market trends, etc.\nNaive Bayes Classifiers: Suitable for classification tasks like: image recognition, spam detection, and document categorization.\nRandom Forests: Versatile for classification and regression tasks. Used in customer segmentation, medical diagnosis, and more.\nSupport Vector Machines (SVM): Effective in high-dimensional spaces for classification tasks such as image recognition and text categorization."
  },
  {
    "objectID": "slides/slides-topic-02-02-examples/naive_bayes.html#unsupervised-learning",
    "href": "slides/slides-topic-02-02-examples/naive_bayes.html#unsupervised-learning",
    "title": "Today’s Summary and Learning Objectives",
    "section": "Unsupervised Learning",
    "text": "Unsupervised Learning\nModels work with unlabeled data, focusing on identifying patterns, clusters, or relationships within the data without predefined labels.\n\nExamples\n\nK-Means Clustering: Identifies clusters within the data. Applied in market segmentation, gene sequence analysis, etc.\nPrincipal Component Analysis (PCA): A dimensionality reduction technique used to reduce the dimensionality of large data sets.\nTopic Models (e.g., Latent Dirichlet Allocation - LDA): Used to discover the abstract “topics” that occur in a collection of documents. Topic modeling is widely used in text mining for uncovering hidden thematic structures in text data, such as finding trends in scientific literature, organizing large archives of documents, or enhancing search engines."
  },
  {
    "objectID": "slides/slides-topic-02-02-examples/naive_bayes.html#generative-vs.-discriminative-models",
    "href": "slides/slides-topic-02-02-examples/naive_bayes.html#generative-vs.-discriminative-models",
    "title": "Today’s Summary and Learning Objectives",
    "section": "Generative vs. Discriminative Models",
    "text": "Generative vs. Discriminative Models\nWithin the supervised and unsupervised paradigm, models can be further categorized into generative and discriminative types:\n\nGenerative Models\n\nApproach: Learn the joint probability distribution \\(P(X, Y)\\) and use it to calculate the conditional probability \\(P(Y|X)\\) for prediction.\nGoal: To model how data is generated by estimating the underlying probability distribution.\nUse: Common in supervised learning, especially when predicting class probabilities is important.\nExamples: Naive Bayes, Linear Discriminant Analysis, Quadratic Discriminant Analysis.\n\n\n\nDiscriminative Models\n\nApproach: Directly learn the conditional probability \\(P(Y|X)\\) or decision boundary between classes without assuming anything about the joint distribution.\nGoal: To find a division in the feature space that separates classes.\nUse: Typically used in supervised learning to classify data into labeled categories.\nExamples: Logistic Regression, Support Vector Machines, Decision Trees.\n\nUnderstanding the distinctions between these paradigms and model types is crucial for selecting the appropriate approach for a given machine learning task."
  },
  {
    "objectID": "slides/slides-topic-02-02-examples/naive_bayes.html#why-generative",
    "href": "slides/slides-topic-02-02-examples/naive_bayes.html#why-generative",
    "title": "Today’s Summary and Learning Objectives",
    "section": "Why Generative?",
    "text": "Why Generative?\n\nBy learning the distribution of each class \\(P(X|C_k)\\) and the prior \\(P(C_k)\\), Naive Bayes models the generation process of the data.\nThis allows not only for classification but also for generating new data samples based on the learned distributions."
  },
  {
    "objectID": "slides/slides-topic-02-02-examples/naive_bayes.html#the-role-of-naive-bayes-in-machine-learning",
    "href": "slides/slides-topic-02-02-examples/naive_bayes.html#the-role-of-naive-bayes-in-machine-learning",
    "title": "Today’s Summary and Learning Objectives",
    "section": "The Role of Naive Bayes in Machine Learning",
    "text": "The Role of Naive Bayes in Machine Learning\n\nNaive Bayes exemplifies the power and simplicity of generative models.\nProvides a foundation for understanding more complex generative approaches.\nRemains a go-to method for many classification tasks due to its interpretability and efficiency.\n\n#\n\nNaive Bayes Classifiers"
  },
  {
    "objectID": "slides/slides-topic-02-02-examples/naive_bayes.html#overview-of-naive-bayes-classifiers",
    "href": "slides/slides-topic-02-02-examples/naive_bayes.html#overview-of-naive-bayes-classifiers",
    "title": "Today’s Summary and Learning Objectives",
    "section": "Overview of Naive Bayes Classifiers",
    "text": "Overview of Naive Bayes Classifiers\nNaive Bayes classifiers vary mainly by the distribution they assume for the feature data.\n\nGaussian Naive Bayes\n\nUsed for features with a normal distribution.\nSuitable for continuous data.\n\n\n\nMultinomial Naive Bayes\n\nUsed for discrete data.\nIdeal for features that represent counts (e.g., word counts in text classification).\n\n\n\nBernoulli Naive Bayes\n\nUsed for binary/boolean features.\nAppropriate when features are independent and follow a binomial distribution.\n\n\n\nAlso:\n\nComplement Naive Bayes: A version of Multinomial Naive Bayes that is particularly suited for imbalanced data sets.\nCategorical Naive Bayes: Assumes that each feature has its own categorical distribution.\n\nEach variant is best suited to different types of data and it’s important to choose based on the nature of your features."
  },
  {
    "objectID": "slides/slides-topic-02-02-examples/naive_bayes.html#choosing-the-right-naive-bayes-classifier",
    "href": "slides/slides-topic-02-02-examples/naive_bayes.html#choosing-the-right-naive-bayes-classifier",
    "title": "Today’s Summary and Learning Objectives",
    "section": "Choosing the Right Naive Bayes Classifier",
    "text": "Choosing the Right Naive Bayes Classifier\nDifferent Naive Bayes classifiers are suited to different types of data distributions.\n\nSelection Strategy\n\nAnalyze Features: Understand the distribution of your data (plot your data!).\nPreprocess: Tailor preprocessing to fit the model’s assumptions (e.g. log transformations).\nDomain Knowledge: Let insights from the domain guide your choice.\nModel Comparison: Apply different models and evaluate their performance with cross-validation.\nHyperparameter Tuning: For Naive Bayes models, particularly Multinomial and Bernoulli, the alpha parameter is crucial. Correctly tuning the alpha parameter is a form of regularization that enhances the model’s accuracy and robustness, especially important for sparse or imbalanced datasets.\n\nThe best classifier aligns with the statistical properties of your data and performs best empirically."
  },
  {
    "objectID": "slides/slides-topic-02-02-examples/naive_bayes.html#understanding-model-performance",
    "href": "slides/slides-topic-02-02-examples/naive_bayes.html#understanding-model-performance",
    "title": "Today’s Summary and Learning Objectives",
    "section": "Understanding Model Performance",
    "text": "Understanding Model Performance\n\n\nImbalanced Classes: Precision, Recall, and F1 score are crucial in the presence of imbalanced classes.\nModel Objective: Prioritize metrics based on the application needs, e.g., Recall over Precision in medical diagnostics.\n\nThe confusion matrix offers a comprehensive way to evaluate and improve classification models by providing insights into their specific strengths and weaknesses.\n\n\n\n\nPredicted: 0\nPredicted: 1\n\n\n\n\nActual: 0\nTrue Negative\nFalse Positive\n\n\nActual: 1\nFalse Negative\nTrue Positive\n\n\n\n#\n\nLet’s Practice!"
  },
  {
    "objectID": "slides/slides-topic-02-02-examples/naive_bayes.html#practice-gaussian-naive-bayes",
    "href": "slides/slides-topic-02-02-examples/naive_bayes.html#practice-gaussian-naive-bayes",
    "title": "Today’s Summary and Learning Objectives",
    "section": "Practice: Gaussian Naive Bayes",
    "text": "Practice: Gaussian Naive Bayes"
  },
  {
    "objectID": "slides/slides-topic-02-02-examples/naive_bayes.html#pima-indians-diabetes-database-overview",
    "href": "slides/slides-topic-02-02-examples/naive_bayes.html#pima-indians-diabetes-database-overview",
    "title": "Today’s Summary and Learning Objectives",
    "section": "Pima Indians Diabetes Database Overview",
    "text": "Pima Indians Diabetes Database Overview\n\nContext\n\nThis dataset (Kaggle Dataset Link) originates from the National Institute of Diabetes and Digestive and Kidney Diseases.\nThe aim is to predict whether a patient has diabetes based on diagnostic measurements.\nAll patients are females of at least 21 years old of Pima Indian heritage, selected under specific constraints for this study.\n\n\n\nContent\nThe dataset features several medical predictor variables alongside one target variable, Outcome. Predictor variables include:\n\nNumber of pregnancies\nBMI (Body Mass Index)\nInsulin level\nAge\n…among others.\n\nThese variables assist in diagnostically predicting diabetes presence.\n\n\nStep 0: Import libraries and Dataset\n\n# Importing libraries\nimport pandas as pd\nfrom pandas.plotting import scatter_matrix\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport itertools\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report\nfrom sklearn.model_selection import train_test_split, cross_val_score\n\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Importing dataset\ndf = pd.read_csv('diabetes.csv')\n\n\n\nStep 1: Descriptive Statistics\n\n# Preview data\ndf.head()\n\n\n\n\n\n\n\n\nPregnancies\nGlucose\nBloodPressure\nSkinThickness\nInsulin\nBMI\nDiabetesPedigreeFunction\nAge\nOutcome\n\n\n\n\n0\n6\n148\n72\n35\n0\n33.6\n0.627\n50\n1\n\n\n1\n1\n85\n66\n29\n0\n26.6\n0.351\n31\n0\n\n\n2\n8\n183\n64\n0\n0\n23.3\n0.672\n32\n1\n\n\n3\n1\n89\n66\n23\n94\n28.1\n0.167\n21\n0\n\n\n4\n0\n137\n40\n35\n168\n43.1\n2.288\n33\n1\n\n\n\n\n\n\n\n\n# Dataset dimensions - (rows, columns)\ndf.shape\n\n(768, 9)\n\n\n\n# Features data-type\ndf.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 768 entries, 0 to 767\nData columns (total 9 columns):\n #   Column                    Non-Null Count  Dtype  \n---  ------                    --------------  -----  \n 0   Pregnancies               768 non-null    int64  \n 1   Glucose                   768 non-null    int64  \n 2   BloodPressure             768 non-null    int64  \n 3   SkinThickness             768 non-null    int64  \n 4   Insulin                   768 non-null    int64  \n 5   BMI                       768 non-null    float64\n 6   DiabetesPedigreeFunction  768 non-null    float64\n 7   Age                       768 non-null    int64  \n 8   Outcome                   768 non-null    int64  \ndtypes: float64(2), int64(7)\nmemory usage: 54.1 KB\n\n\n\n# Statistical summary\ndf.describe().T\n\n\n\n\n\n\n\n\ncount\nmean\nstd\nmin\n25%\n50%\n75%\nmax\n\n\n\n\nPregnancies\n768.0\n3.845052\n3.369578\n0.000\n1.00000\n3.0000\n6.00000\n17.00\n\n\nGlucose\n768.0\n120.894531\n31.972618\n0.000\n99.00000\n117.0000\n140.25000\n199.00\n\n\nBloodPressure\n768.0\n69.105469\n19.355807\n0.000\n62.00000\n72.0000\n80.00000\n122.00\n\n\nSkinThickness\n768.0\n20.536458\n15.952218\n0.000\n0.00000\n23.0000\n32.00000\n99.00\n\n\nInsulin\n768.0\n79.799479\n115.244002\n0.000\n0.00000\n30.5000\n127.25000\n846.00\n\n\nBMI\n768.0\n31.992578\n7.884160\n0.000\n27.30000\n32.0000\n36.60000\n67.10\n\n\nDiabetesPedigreeFunction\n768.0\n0.471876\n0.331329\n0.078\n0.24375\n0.3725\n0.62625\n2.42\n\n\nAge\n768.0\n33.240885\n11.760232\n21.000\n24.00000\n29.0000\n41.00000\n81.00\n\n\nOutcome\n768.0\n0.348958\n0.476951\n0.000\n0.00000\n0.0000\n1.00000\n1.00\n\n\n\n\n\n\n\n\n# Count of null values\ndf.isnull().sum()\n\nPregnancies                 0\nGlucose                     0\nBloodPressure               0\nSkinThickness               0\nInsulin                     0\nBMI                         0\nDiabetesPedigreeFunction    0\nAge                         0\nOutcome                     0\ndtype: int64\n\n\n\n\nObservations:\n\nThere are a total of 768 records and 9 features in the dataset.\nEach feature can be either of integer or float dataype.\nSome features like Glucose, Blood pressure, Insulin, BMI have zero values which represent missing data.\nThere are zero NaN values in the dataset.\nIn the outcome column, 1 represents diabetes positive and 0 represents diabetes negative.\n\n\n# Outcome countplot\nsns.countplot(x = 'Outcome',data = dataset)\n\n\n\n\n\n\n\n\n\n# Histogram of each feature\n\ncol = df.columns[:8]\nplt.subplots(figsize = (20, 15))\nlength = len(col)\n\nfor i, j in itertools.zip_longest(col, range(length)):\n    plt.subplot((length//2), 3, j + 1)\n    plt.subplots_adjust(wspace = 0.1,hspace = 0.5)\n    df[i].hist(bins = 20)\n    plt.title(i)\nplt.show()\n\n\n\n\n\n\n\n\n\n# Scatter plot matrix \nscatter_matrix(df, figsize = (20, 20));\n\n\n\n\n\n\n\n\n\n# Pairplot \nsns.pairplot(data = df, hue = 'Outcome')\nplt.show()\n\n\n\n\n\n\n\n\n\n# Heatmap\nsns.heatmap(df.corr(), annot = True)\nplt.show()\n\n\n\n\n\n\n\n\n\n\nObservations:\n\nThe countplot tells us that the dataset is imbalanced, as number of patients who don’t have diabetes is more than those who do.\nFrom the correaltion heatmap, we can see that there is a high correlation between Outcome and [Glucose,BMI,Age,Insulin].\n\n\n\nStep 2: Data Preprocessing\n\ndf_new = df\n# list(df_new)\n# Preview data\ndf_new.head()\n\n\n\n\n\n\n\n\nPregnancies\nGlucose\nBloodPressure\nSkinThickness\nInsulin\nBMI\nDiabetesPedigreeFunction\nAge\nOutcome\n\n\n\n\n0\n6\n148\n72\n35\n0\n33.6\n0.627\n50\n1\n\n\n1\n1\n85\n66\n29\n0\n26.6\n0.351\n31\n0\n\n\n2\n8\n183\n64\n0\n0\n23.3\n0.672\n32\n1\n\n\n3\n1\n89\n66\n23\n94\n28.1\n0.167\n21\n0\n\n\n4\n0\n137\n40\n35\n168\n43.1\n2.288\n33\n1\n\n\n\n\n\n\n\n\n# checking zero values\n\n# np.where(df_new['Glucose'] == 0)[0].shape\n# np.where(df_new['BloodPressure'] == 0)[0].shape\n# np.where(df_new['SkinThickness'] == 0)[0].shape\nnp.where(df_new['Insulin'] == 0)[0].shape\n# np.where(df_new['BMI'] == 0)[0].shape\n# np.where(df_new['DiabetesPedigreeFunction'] == 0)[0].shape\n# np.where(df_new['Age'] == 0)[0].shape\n\n(374,)\n\n\n\n# Replacing zero values with NaN\ndf_new[['Glucose',\n 'BloodPressure',\n 'SkinThickness',\n 'Insulin',\n 'BMI',\n 'DiabetesPedigreeFunction',\n 'Age']] = df_new[['Glucose',\n 'BloodPressure',\n 'SkinThickness',\n 'Insulin',\n 'BMI',\n 'DiabetesPedigreeFunction',\n 'Age']].replace(0, np.NaN) \n\n\n# Count of NaN\ndf_new.isnull().sum()\n\nPregnancies                   0\nGlucose                       5\nBloodPressure                35\nSkinThickness               227\nInsulin                     374\nBMI                          11\nDiabetesPedigreeFunction      0\nAge                           0\nOutcome                       0\ndtype: int64\n\n\n\n# Removing Features with too many zeros NaNs\ndf_new = df_new.drop(['SkinThickness', 'Insulin'], axis = 1)\n\n# Removing Observations with NaNs\ndf_new = df_new.dropna(subset=['Glucose'])\ndf_new = df_new.dropna(subset=['BloodPressure'])\ndf_new = df_new.dropna(subset=['BMI'])\n\n#dataset_new = dataset_new[dataset_new['Glucose'] != 0]\n#dataset_new = dataset_new[dataset_new['BloodPressure'] != 0]\n#dataset_new = dataset_new[dataset_new['BMI'] != 0]\n\n\n# Statistical summary\ndf_new.describe().T\n\n\n\n\n\n\n\n\ncount\nmean\nstd\nmin\n25%\n50%\n75%\nmax\n\n\n\n\nPregnancies\n724.0\n3.866022\n3.362803\n0.000\n1.000\n3.000\n6.0000\n17.00\n\n\nGlucose\n724.0\n121.882597\n30.750030\n44.000\n99.750\n117.000\n142.0000\n199.00\n\n\nBloodPressure\n724.0\n72.400552\n12.379870\n24.000\n64.000\n72.000\n80.0000\n122.00\n\n\nBMI\n724.0\n32.467127\n6.888941\n18.200\n27.500\n32.400\n36.6000\n67.10\n\n\nDiabetesPedigreeFunction\n724.0\n0.474765\n0.332315\n0.078\n0.245\n0.379\n0.6275\n2.42\n\n\nAge\n724.0\n33.350829\n11.765393\n21.000\n24.000\n29.000\n41.0000\n81.00\n\n\nOutcome\n724.0\n0.343923\n0.475344\n0.000\n0.000\n0.000\n1.0000\n1.00\n\n\n\n\n\n\n\n\n# log transformation\ndf_new['LogPregnancies'] = np.log1p(df_new['Pregnancies'])\ndf_new['LogDiabetesPedigreeFunction'] = np.log1p(df_new['DiabetesPedigreeFunction'])\ndf_new['LogAge'] = np.log1p(df_new['Age'])\n\n# Statistical summary\ndf_new.describe().T\n\n\n\n\n\n\n\n\ncount\nmean\nstd\nmin\n25%\n50%\n75%\nmax\n\n\n\n\nPregnancies\n724.0\n3.866022\n3.362803\n0.000000\n1.000000\n3.000000\n6.000000\n17.000000\n\n\nGlucose\n724.0\n121.882597\n30.750030\n44.000000\n99.750000\n117.000000\n142.000000\n199.000000\n\n\nBloodPressure\n724.0\n72.400552\n12.379870\n24.000000\n64.000000\n72.000000\n80.000000\n122.000000\n\n\nBMI\n724.0\n32.467127\n6.888941\n18.200000\n27.500000\n32.400000\n36.600000\n67.100000\n\n\nDiabetesPedigreeFunction\n724.0\n0.474765\n0.332315\n0.078000\n0.245000\n0.379000\n0.627500\n2.420000\n\n\nAge\n724.0\n33.350829\n11.765393\n21.000000\n24.000000\n29.000000\n41.000000\n81.000000\n\n\nOutcome\n724.0\n0.343923\n0.475344\n0.000000\n0.000000\n0.000000\n1.000000\n1.000000\n\n\nLogPregnancies\n724.0\n1.319311\n0.762929\n0.000000\n0.693147\n1.386294\n1.945910\n2.890372\n\n\nLogDiabetesPedigreeFunction\n724.0\n0.367237\n0.198718\n0.075107\n0.219136\n0.321358\n0.487045\n1.229641\n\n\nLogAge\n724.0\n3.484730\n0.313971\n3.091042\n3.218876\n3.401197\n3.737670\n4.406719\n\n\n\n\n\n\n\n\n# Histogram of each feature\n\ncol = df_new.columns[:10]\nplt.subplots(figsize = (20, 15))\nlength = len(col)\n\nfor i, j in itertools.zip_longest(col, range(length)):\n    plt.subplot((length//2), 3, j + 1)\n    plt.subplots_adjust(wspace = 0.1,hspace = 0.5)\n    df_new[i].hist(bins = 20)\n    plt.title(i)\nplt.show()\n\n\n\n\n\n\n\n\n\n# Selecting features \nfeatures = [\n    'LogPregnancies',\n    'Glucose',\n    'BloodPressure',\n    'BMI',\n    'LogDiabetesPedigreeFunction',\n    'LogAge'\n]\n\n# Splitting X and Y\ndf_train, df_test = train_test_split(df_new, test_size = 0.20, random_state = 42, stratify = df_new['Outcome'] )\n\nX_train = df_train[features]\nY_train = df_train['Outcome']\nX_test = df_test[features]\nY_test = df_test['Outcome']\n\n\n# Checking dimensions\nprint(\"X_train shape:\", X_train.shape)\nprint(\"X_test shape:\", X_test.shape)\nprint(\"Y_train shape:\", Y_train.shape)\nprint(\"Y_test shape:\", Y_test.shape)\n\nX_train shape: (579, 6)\nX_test shape: (145, 6)\nY_train shape: (579,)\nY_test shape: (145,)"
  },
  {
    "objectID": "slides/slides-topic-02-02-examples/naive_bayes.html#practice-multinomial-naive-bayes-1",
    "href": "slides/slides-topic-02-02-examples/naive_bayes.html#practice-multinomial-naive-bayes-1",
    "title": "Today’s Summary and Learning Objectives",
    "section": "Practice: Multinomial Naive Bayes",
    "text": "Practice: Multinomial Naive Bayes"
  },
  {
    "objectID": "slides/slides-topic-02-02-examples/naive_bayes.html#bbc-full-text-document-classification",
    "href": "slides/slides-topic-02-02-examples/naive_bayes.html#bbc-full-text-document-classification",
    "title": "Today’s Summary and Learning Objectives",
    "section": "BBC Full Text Document Classification",
    "text": "BBC Full Text Document Classification\n\nContext\n\nThe original dataset (Kaggle Dataset Link) consists of 2225 documents (as text files) from the BBC news website corresponding to news articles in five topical areas:\n\nbusiness\nentertainment\npolitics\nsport\ntech\n\nThe aim is to predict which topic does a news article belong to based on its content.\n\n\n\nStep 0: Import Libraries and Dataset\n\nimport pandas as pd\nimport numpy as np\nfrom sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.metrics import accuracy_score, classification_report\nfrom sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay\nfrom sklearn.pipeline import make_pipeline\nfrom nltk.corpus import stopwords\nfrom nltk.stem import PorterStemmer\nfrom nltk.tokenize import word_tokenize\nimport nltk\nimport string\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Download necessary NLTK resources\nnltk.download('punkt')\nnltk.download('stopwords')\n\n# load data\ndf = pd.read_csv('bbc_text_cls.csv')\n\n[nltk_data] Downloading package punkt to /Users/dcorde3/nltk_data...\n[nltk_data]   Package punkt is already up-to-date!\n[nltk_data] Downloading package stopwords to\n[nltk_data]     /Users/dcorde3/nltk_data...\n[nltk_data]   Package stopwords is already up-to-date!\n\n\n\n# Preview data\ndf.head()\n\n# len(df)\n\n\n\n\n\n\n\n\ntext\nlabels\n\n\n\n\n0\nAd sales boost Time Warner profit\\n\\nQuarterly...\nbusiness\n\n\n1\nDollar gains on Greenspan speech\\n\\nThe dollar...\nbusiness\n\n\n2\nYukos unit buyer faces loan claim\\n\\nThe owner...\nbusiness\n\n\n3\nHigh fuel prices hit BA's profits\\n\\nBritish A...\nbusiness\n\n\n4\nPernod takeover talk lifts Domecq\\n\\nShares in...\nbusiness"
  },
  {
    "objectID": "slides/slides-topic-02-02-examples/naive_bayes.html#complement-naive-bayes",
    "href": "slides/slides-topic-02-02-examples/naive_bayes.html#complement-naive-bayes",
    "title": "Today’s Summary and Learning Objectives",
    "section": "Complement Naive Bayes",
    "text": "Complement Naive Bayes\nComplementNB implements the complement naive Bayes (CNB) algorithm. CNB is an adaptation of the standard multinomial naive Bayes (MNB) algorithm that is particularly suited for imbalanced data sets. Specifically, CNB uses statistics from the complement of each class to compute the model’s weights. The inventors of CNB show empirically that the parameter estimates for CNB are more stable than those for MNB. Further, CNB regularly outperforms MNB (often by a considerable margin) on text classification tasks.\nWeights calculation\nThe procedure for calculating the weights is as follows:\n\\[\n\\hat{\\theta}_{ci} = \\frac{\\alpha_i + \\sum_{j:y_j \\neq c} d_{ij}}\n                         {\\alpha + \\sum_{j:y_j \\neq c} \\sum_{k} d_{kj}}\n\\] \\[\nw_{ci} = \\log \\hat{\\theta}_{ci}\n\\] \\[\nw_{ci} = \\frac{w_{ci}}{\\sum_{j} |w_{cj}|}\n\\]\nwhere the summations are over all documents $ j $ not in class $ c \\(,\\) d_{ij} $ is either the count or tf-idf value of term $ i $ in document $ j $, $ i $ is a smoothing hyperparameter like that found in MNB, and $ = {i} _i $. The second normalization addresses the tendency for longer documents to dominate parameter estimates in MNB. The classification rule is:\n\\[\n\\hat{c} = \\arg\\min_c \\sum_{i} t_i w_{ci}\n\\]\ni.e., a document is assigned to the class that is the poorest complement match."
  },
  {
    "objectID": "slides/slides-topic-02-02-examples/naive_bayes.html#categorical-naive-bayes",
    "href": "slides/slides-topic-02-02-examples/naive_bayes.html#categorical-naive-bayes",
    "title": "Today’s Summary and Learning Objectives",
    "section": "Categorical Naive Bayes",
    "text": "Categorical Naive Bayes\nCategoricalNB implements the categorical naive Bayes algorithm for categorically distributed data. It assumes that each feature, which is described by the index $ i $, has its own categorical distribution.\nFor each feature $ i $ in the training set $ X \\(,\n`CategoricalNB` estimates a categorical distribution for each feature i\nof X conditioned on the class y. The index set of the samples is defined as\\) J = { 1, , m } $, with $ m $ as the number of samples.\nProbability calculation\nThe probability of category $ t $ in feature $ i $ given class $ c $ is estimated as:\n\\[\nP(x_i = t \\mid y = c \\: ;\\, \\alpha) = \\frac{ N_{tic} + \\alpha}{N_{c} +\n                                       \\alpha n_i},\n\\]\nwhere $ N_{tic} = |{j J x_{ij} = t, y_j = c}| $ is the number of times category $ t $ appears in the samples $ x_{i} $, which belong to class $ c $, $ N_{c} = |{ j Jy_j = c}| $ is the number of samples with class c, $ $ is a smoothing parameter and $ n_i $ is the number of available categories of feature $ i $.\nCategoricalNB assumes that the sample matrix $ X $ is encoded (for instance with the help of OrdinalEncoder) such that all categories for each feature $ i $ are represented with numbers $ 0, …, n_i - 1 $ where $ n_i $ is the number of available categories of feature $ i $."
  },
  {
    "objectID": "slides/slides-topic-02-02-examples/naive_bayes.html#out-of-core-naive-bayes-model-fitting",
    "href": "slides/slides-topic-02-02-examples/naive_bayes.html#out-of-core-naive-bayes-model-fitting",
    "title": "Today’s Summary and Learning Objectives",
    "section": "Out-of-core naive Bayes model fitting",
    "text": "Out-of-core naive Bayes model fitting\nNaive Bayes models can be used to tackle large scale classification problems for which the full training set might not fit in memory. To handle this case, MultinomialNB, BernoulliNB, and GaussianNB expose a partial_fit method that can be used incrementally as done with other classifiers as demonstrated in sphx_glr_auto_examples_applications_plot_out_of_core_classification.py. All naive Bayes classifiers support sample weighting.\nContrary to the fit method, the first call to partial_fit needs to be passed the list of all the expected class labels.\nFor an overview of available strategies in scikit-learn, see also the out-of-core learning documentation.\n\nNote\nThe partial_fit method call of naive Bayes models introduces some computational overhead. It is recommended to use data chunk sizes that are as large as possible, that is as the available RAM allows."
  },
  {
    "objectID": "lecture_material/material-topic-02/intro-to-quarto.html",
    "href": "lecture_material/material-topic-02/intro-to-quarto.html",
    "title": "Topic 1: Introduction to Quarto for Python",
    "section": "",
    "text": "The document offers a short guide on utilizing Quarto effectively for data science projects with R and Python.[1]"
  },
  {
    "objectID": "lecture_material/material-topic-02/intro-to-quarto.html#quick-tutorial-for-rstudio",
    "href": "lecture_material/material-topic-02/intro-to-quarto.html#quick-tutorial-for-rstudio",
    "title": "Topic 1: Introduction to Quarto for Python",
    "section": "Quick tutorial for RStudio",
    "text": "Quick tutorial for RStudio\nThis is what RStudio looks like when you open it for the first time.\n\n\n\n\n\n\n\n\n\nTop left pane (input/script)\nThis is your code editor. Here you enter code in any file type (.py, .r, .qmd) you are working on. If not working with notebooks, this is just gonna be a plain text file but with a extension that run the commands.\nFor example, enter 2 + 2 in your script and run a line of code by pressing command + enter (Mac) or Ctrl + enter (PC). This is a huge advantage of Rstudio over Jupyter. You can run your code line by line, instead of running the entire cell.\nBottom left pane (output/console)\nThis is the console. It is pretty much like when you open Python/R from the Command line.\nIn the console, the prompt &gt; looks like a greater than symbol. If your prompt begins to look like a + symbol by mistake, simply click in your console and press the esc key on your keyboard as many times as necessary to return to the prompt.\nRstudio uses + when code is broken up across multiple lines and is still expecting more code. A line of code does not usually end until Rstudio finds an appropriate stop parameter or punctuation that completes some code such as a closed round parenthesis ), square bracket ], curly brace }, or quotation mark '.\nIf the output in your console gets too messy, you can clear it by pressing control + l on both Mac and PC. This will not erase any saved data - it will simply make your console easier to read.\nTop right pane (global environment)\nThis is your environment pane. All objects you create will be displayed here.\nBottom right pane (files, plots, packages, and help)\nHere you find useful tabs for navigating your file system, displaying plots, installing packages, and viewing help pages. Press the control key and a number (1 through 9) on your keyboard to shortcut between these panes and tabs."
  },
  {
    "objectID": "slides/slides-topic-02-03.html",
    "href": "slides/slides-topic-02-03.html",
    "title": " QTM 350: Data Science Computing ",
    "section": "",
    "text": "Computational Literacy\n\nBinary and Hexadecimal numbers\nCharacters, ASCII, Unicode\nHigh vrs low level programming languages\nCompiled vs interpreted languages\n\n\n\n\nCommand Line\n\nShell basics\nHelp!\nNavigating your system\nManaging your files\nWorking with text files\nRedirects, pipes, and loops\nScripting\n\n\n\n\nVersion Control\n\nData Science Workflow\nReproducibility\nGit and GitHub\n\n\n\n\n\n\n\n\nthis lecture draws on materials from Simon Munzert Intro to Data Science."
  },
  {
    "objectID": "slides/slides-topic-02-03.html#rstudio-github-git-1",
    "href": "slides/slides-topic-02-03.html#rstudio-github-git-1",
    "title": " QTM 350: Data Science Computing ",
    "section": "RStudio + GitHub + Git",
    "text": "RStudio + GitHub + Git\n\n\n\n\n\nHappy Git and GitHub for the useR, Heaven King video"
  },
  {
    "objectID": "slides/slides-topic-02-03.html#rstudio-github-git-2",
    "href": "slides/slides-topic-02-03.html#rstudio-github-git-2",
    "title": " QTM 350: Data Science Computing ",
    "section": "RStudio + GitHub + Git",
    "text": "RStudio + GitHub + Git\n\nCreate a remote repo\nCreate an RStudio Project and connect with the remote repo\nCommit locally\nPush and Pull\nCreate a new branch\nMerge\nPush and Pull\nHave Fun!"
  },
  {
    "objectID": "slides/slides-topic-02-03.html#project-setup-and-organization",
    "href": "slides/slides-topic-02-03.html#project-setup-and-organization",
    "title": " QTM 350: Data Science Computing ",
    "section": "1. Project Setup and Organization",
    "text": "1. Project Setup and Organization\n\nRepository Setup: Centralize the codebase with a GitHub repository.\nDirectory Structure: Organize with folders like data, src, docs, notebooks.\nREADME File: Include project overview, setup instructions, and contribution guidelines."
  },
  {
    "objectID": "slides/slides-topic-02-03.html#version-control-best-practices",
    "href": "slides/slides-topic-02-03.html#version-control-best-practices",
    "title": " QTM 350: Data Science Computing ",
    "section": "2. Version Control Best Practices",
    "text": "2. Version Control Best Practices\n\nBranching Strategy: Adopt a strategy like “feature branch” workflow.\nCommit Messages: Write clear, descriptive commit messages."
  },
  {
    "objectID": "slides/slides-topic-02-03.html#code-reviews-and-pull-requests",
    "href": "slides/slides-topic-02-03.html#code-reviews-and-pull-requests",
    "title": " QTM 350: Data Science Computing ",
    "section": "3. Code Reviews and Pull Requests",
    "text": "3. Code Reviews and Pull Requests\n\nPull Requests: Use Pull Requests for code review before merging.\nCode Review: Encourage constructive feedback to improve code quality."
  },
  {
    "objectID": "slides/slides-topic-02-03.html#continuous-integration-and-continuous-deployment-cicd",
    "href": "slides/slides-topic-02-03.html#continuous-integration-and-continuous-deployment-cicd",
    "title": " QTM 350: Data Science Computing ",
    "section": "4. Continuous Integration and Continuous Deployment (CI/CD)",
    "text": "4. Continuous Integration and Continuous Deployment (CI/CD)\n\nAutomated Testing: Set up tests to run on each pull request.\nDeployment Pipeline: Automate deployment to environments with CI/CD tools."
  },
  {
    "objectID": "slides/slides-topic-02-03.html#issue-tracking-and-project-management",
    "href": "slides/slides-topic-02-03.html#issue-tracking-and-project-management",
    "title": " QTM 350: Data Science Computing ",
    "section": "5. Issue Tracking and Project Management",
    "text": "5. Issue Tracking and Project Management\n\nIssues: Use GitHub Issues for task and bug tracking.\nProject Boards: Visualize progress with GitHub Projects or similar tools."
  },
  {
    "objectID": "slides/slides-topic-02-03.html#documentation-and-knowledge-sharing",
    "href": "slides/slides-topic-02-03.html#documentation-and-knowledge-sharing",
    "title": " QTM 350: Data Science Computing ",
    "section": "6. Documentation and Knowledge Sharing",
    "text": "6. Documentation and Knowledge Sharing\n\nWiki: Document important info and setup guides in GitHub Wiki or docs.\nCode Comments: Encourage comments within the code for clarity."
  },
  {
    "objectID": "slides/slides-topic-02-03.html#access-control-and-security",
    "href": "slides/slides-topic-02-03.html#access-control-and-security",
    "title": " QTM 350: Data Science Computing ",
    "section": "7. Access Control and Security",
    "text": "7. Access Control and Security\n\nAccess Permissions: Manage roles like Read, Write, and Admin carefully.\nSecrets Management: Securely manage sensitive information with GitHub Secrets."
  },
  {
    "objectID": "slides/slides-topic-02-03.html#conclusion",
    "href": "slides/slides-topic-02-03.html#conclusion",
    "title": " QTM 350: Data Science Computing ",
    "section": "Conclusion",
    "text": "Conclusion\n\nEstablish guidelines early and adapt as necessary.\nEnsure regular communication and feedback among team members."
  },
  {
    "objectID": "slides/slides-topic-02-03.html#collaboration-1",
    "href": "slides/slides-topic-02-03.html#collaboration-1",
    "title": " QTM 350: Data Science Computing ",
    "section": "Collaboration",
    "text": "Collaboration\n\n\n\nXXX PAREI AQUI FALTA FALAR DO R RSTUDIO E DE COLLABORATION!\n\n\nXXXX"
  },
  {
    "objectID": "slides/slides-topic-02-03.html#hands-on-git-checkout-2",
    "href": "slides/slides-topic-02-03.html#hands-on-git-checkout-2",
    "title": " QTM 350: Data Science Computing ",
    "section": "Hands on! Git Checkout",
    "text": "Hands on! Git Checkout\n\n\n\n\nTo “move back to the future”, the most recent commit, we just need to go back to the main branch:\n\n\n\ngit checkout main\ngit log\n\n\n\nCheck your folder/directory!\nImportant: doing this does not delete our commits. We just move back and forth in time!"
  },
  {
    "objectID": "slides/slides-topic-02-03.html#github-creating-a-new-repository-2",
    "href": "slides/slides-topic-02-03.html#github-creating-a-new-repository-2",
    "title": " QTM 350: Data Science Computing ",
    "section": "GitHub: Creating a New Repository",
    "text": "GitHub: Creating a New Repository\n\n\n\n\nWe connect our local Git repo with the remote GitHub repo\n\n\n\n\ncd Desktop/qtm_350_24S_02\ngit init\ngit remote add origin https://github.com/davi-moreira/qtm_350_24S_02.git\ngit remote -v"
  },
  {
    "objectID": "slides/slides-topic-02-03.html#github-creating-a-new-repository-3",
    "href": "slides/slides-topic-02-03.html#github-creating-a-new-repository-3",
    "title": " QTM 350: Data Science Computing ",
    "section": "GitHub: Creating a New Repository",
    "text": "GitHub: Creating a New Repository\n\n\n\n\nWe connect our local Git repo with the remote GitHub repo\n\n\ncd Desktop/qtm_350_24S_02\ngit init\ngit remote add origin https://github.com/davi-moreira/qtm_350_24S_02.git\ngit remote -v\n\n\n\n\n\n\n\nxxx"
  },
  {
    "objectID": "slides/slides-topic-02-03.html#the-push-and-pull-system-4",
    "href": "slides/slides-topic-02-03.html#the-push-and-pull-system-4",
    "title": " QTM 350: Data Science Computing ",
    "section": "The Push and Pull System",
    "text": "The Push and Pull System\n\n\n\n\nNow we can make a Pull request\n\n\n\ngit pull origin main\ngit status\ngit log"
  },
  {
    "objectID": "slides/slides-topic-02-03.html#the-push-and-pull-system-5",
    "href": "slides/slides-topic-02-03.html#the-push-and-pull-system-5",
    "title": " QTM 350: Data Science Computing ",
    "section": "The Push and Pull System",
    "text": "The Push and Pull System\n\n\n\n\nNow let’s see the Push request.\nLet’s delete the LICENSE.md file locally and commit.\nNow we can make a Push request. Conditioned on your settings, it will requires your user name and password.\nLet’s check the remote repo on GitHub.\n\n\n\nrm -rf LICENSE\nls\ngit status\ngit add .\ngit commit -m \"remove LICENSE file\"\ngit log\ngit push -u origin main"
  },
  {
    "objectID": "slides/slides-topic-02-03.html#the-push-and-pull-system-6",
    "href": "slides/slides-topic-02-03.html#the-push-and-pull-system-6",
    "title": " QTM 350: Data Science Computing ",
    "section": "The Push and Pull System",
    "text": "The Push and Pull System\n\n\n\n\nNow let’s create a branch to correct the mistake in the README.md file.\n\n\n\n\ngit pull\ngit checkout -b err01\n# open the file and edit\ngit status\ngit add .\ngit commit -m \"fixed mistake in readme file\"\ngit checkout main\ngit merge err01\ngit log\ngit push\n# let's check the remote repo\ngit push origin err01\n# let's check the remote repo and check the commits\n# git push origin --delete err01 # to delete the branch in the remote repo"
  },
  {
    "objectID": "slides/slides-topic-02-03.html#the-push-and-pull-system-7",
    "href": "slides/slides-topic-02-03.html#the-push-and-pull-system-7",
    "title": " QTM 350: Data Science Computing ",
    "section": "The Push and Pull System",
    "text": "The Push and Pull System\nCan anybody push to my repository?\n\nNo, all repositories are read-only for anonymous users. By default only the owner of the repository has write access. If you can push to your own repo, it’s because you are using one of the supported authentification methods (HTTPS, SSH, …).\n\n\nIf you want to grant someone else privileges to push to your repo, you would need to configure that access in the project settings.\n\n\nTo contribute to projects in which you don’t have push access, you push to your own copy of the repo, then ask for a pull-request.\n\nsource: https://stackoverflow.com/questions/17442930/can-anybody-push-to-my-project-on-github"
  },
  {
    "objectID": "slides/slides-topic-02-03.html#collaboration",
    "href": "slides/slides-topic-02-03.html#collaboration",
    "title": " QTM 350: Data Science Computing ",
    "section": "Collaboration",
    "text": "Collaboration\n\n\n\nXXX PAREI AQUI FALTA FALAR DO R RSTUDIO E DE COLLABORATION!\n\n\nXXXX"
  },
  {
    "objectID": "slides/slides-topic-02-03.html#collaborating-workflows",
    "href": "slides/slides-topic-02-03.html#collaborating-workflows",
    "title": " QTM 350: Data Science Computing ",
    "section": "Collaborating Workflows",
    "text": "Collaborating Workflows\n\n\n\n\nThere is no one size fits all Git workflow.\nIt is important to develop a Git workflow that is a productivity enhancement for the team.\nA workflow should also complement business culture."
  },
  {
    "objectID": "slides/slides-topic-02-03.html#centralized-workflow",
    "href": "slides/slides-topic-02-03.html#centralized-workflow",
    "title": " QTM 350: Data Science Computing ",
    "section": "Centralized Workflow",
    "text": "Centralized Workflow\n\n\n\n\nUses a central repository to serve as the single point-of-entry for all changes to the project. The default development branch it the main branch and all changes are committed into this branch. This workflow doesn’t require any other branches besides main.\nAlso check:\n-Inviting collaborators to a personal repository\n\n\n\n\n\n\n\nCentralized workflow"
  },
  {
    "objectID": "slides/slides-topic-02-03.html#feature-branch-workflow",
    "href": "slides/slides-topic-02-03.html#feature-branch-workflow",
    "title": " QTM 350: Data Science Computing ",
    "section": "Feature Branch Workflow",
    "text": "Feature Branch Workflow\n\n\n\n\nAll feature development should take place in a dedicated branch instead of the main branch. This encapsulation makes it easy for multiple developers to work on a particular feature without disturbing the main codebase. It also means the main branch will never contain broken code, which is a huge advantage for continuous integration environments.\nAlso check:\n\nInviting collaborators to a personal repository\nResolving a merge conflict using the command line\nA Successful Git Branching Model -Learn Git Branching\n\n\n\n\n\n\n\n\nFeature Branch Workflow"
  },
  {
    "objectID": "slides/slides-topic-02-03.html#forking-workflow",
    "href": "slides/slides-topic-02-03.html#forking-workflow",
    "title": " QTM 350: Data Science Computing ",
    "section": "Forking Workflow",
    "text": "Forking Workflow\n\n\n\n\nInstead of using a single server-side repository to act as the “central” codebase, it gives every developer a server-side repository. This means that each contributor has not one, but two Git repositories: a private local one and a public server-side one.\nAlso check:\n\nCollaborating with pull requests\nMerging a pull request\nChecking out pull requests locally\n\n\n\n\n\n\n\n\nForking Workflow"
  },
  {
    "objectID": "slides/slides-topic-02-02-aux.html#topic-overview",
    "href": "slides/slides-topic-02-02-aux.html#topic-overview",
    "title": " QTM 350: Data Science Computing ",
    "section": "Topic Overview",
    "text": "Topic Overview\n\n\n\nComputational Literacy\n\nBinary and Hexadecimal numbers\nCharacters, ASCII, Unicode\nHigh vrs low level programming languages\nCompiled vs interpreted languages\n\n\n\n\nCommand Line\n\nShell basics\nHelp!\nNavigating your system\nManaging your files\nWorking with text files\nRedirects, pipes, and loops\nScripting\n\n\n\n\nVersion Control\n\nData Science Workflow\nReproducibility\nGit and GitHub\n\n\n\n\n\n\n\n\nthis lecture draws on materials from Simon Munzert Intro to Data Science."
  },
  {
    "objectID": "slides/slides-topic-02-02-aux.html#a-computer-in-a-nutshell",
    "href": "slides/slides-topic-02-02-aux.html#a-computer-in-a-nutshell",
    "title": " QTM 350: Data Science Computing ",
    "section": "A computer in a nutshell",
    "text": "A computer in a nutshell\n\n\n\n\nCredit Dave Kerr\n\n\n\n\n\nThe operating system (OS) is system software that interfaces with (and manages access to) a computer’s hardware. It also provides software resources.\nThe OS is divided into the kernel and user space.\nThe kernel is the core of the OS. It’s responsible for interfacing with hardware (drivers), managing resources etc. Running software in the kernel is extremely sensitive! That’s why users are kept away from it.\nThe user space provides an interface for users, who can run programs/applications on the machine. Hardware access of programs (e.g., memory usage) is managed by the kernel. Programs in user space are essentially in sandboxes, which sets a limit to how much damage they can do."
  },
  {
    "objectID": "slides/slides-topic-02-02-aux.html#a-computer-in-a-nutshell-1",
    "href": "slides/slides-topic-02-02-aux.html#a-computer-in-a-nutshell-1",
    "title": " QTM 350: Data Science Computing ",
    "section": "A computer in a nutshell",
    "text": "A computer in a nutshell\n\n\n\n\n\n\n\n\n\n\n\n\n\nCredit Dave Kerr/Kkchaudhary11\n\n\n\n\nThe shell is just a general name for any user space program that allows access to resources in the system, via some kind of interface.\nShells come in many different flavours but are generally provided to aid a human operator in accessing the system. This could be interactively, by typing at a terminal, or via scripts, which are files that contain a sequence of commands.\nModern computers use graphical user interfaces (GUIs) as the standard tool for human-computer interaction.\nWhy “kernel” and “shell”? The kernel is the soft, edible part of a nut or seed, which is surrounded by a shell to protect it. Useful metaphor, no?"
  },
  {
    "objectID": "slides/slides-topic-02-02-aux.html#interacting-with-the-shell",
    "href": "slides/slides-topic-02-02-aux.html#interacting-with-the-shell",
    "title": " QTM 350: Data Science Computing ",
    "section": "Interacting with the shell",
    "text": "Interacting with the shell\n\n\n\n\n\n\n\n \n\n\nCredit Dave Kerr/Rama/Musée Bolo/ClickRick\n\n\n\n\nThings are still a bit more complicated.\nWe’re not directly interacting with the “shell” but using a terminal.\nA terminal is just a program that reads input from the keyboard, passes that input to another program, and displays the results on the screen.\nA shell program on its own does not do this - it requires a terminal as an interface.\nWhy “terminal”? Back in the old days (even before computer screen existed), terminal machines (hardware!) were used to let humans interface with large machines (“mainframes”). Often many terminals were connected to a single machine.\nWhen you want to work with a computer in a data center (or remotely ~ cloud computing), you’ll still do pretty much the same."
  },
  {
    "objectID": "slides/slides-topic-02-02-aux.html#interacting-with-the-shell-1",
    "href": "slides/slides-topic-02-02-aux.html#interacting-with-the-shell-1",
    "title": " QTM 350: Data Science Computing ",
    "section": "Interacting with the shell",
    "text": "Interacting with the shell\n\n\n\n\n\n\n\n\nCredit Dave Kerr\n\n\n\nTerminals are really quite simple - they’re just interfaces.\nThe first thing that a terminal program will do is run a shell program - a program that we can use to operate the computer.\nBack to the shell: the shell usually takes input\n(a) interactively from the user via the terminal's **command line**.\n(b) executes scripts (without command line).\nIn interactive mode the shell then returns output\n(a) to the terminal where it is printed/shown.\n(b) to files or other locations.\nThe command line (or command prompt) represents what is shown and entered in the terminal. They can be customized (e.g., with color highlighting) to make interaction more convenient."
  },
  {
    "objectID": "slides/slides-topic-02-02-aux.html#shell-variants",
    "href": "slides/slides-topic-02-02-aux.html#shell-variants",
    "title": " QTM 350: Data Science Computing ",
    "section": "Shell variants",
    "text": "Shell variants\n\n\n\nLeft: Command Prompt, Right: Bash    Left: C Shell, Right: more shells     Credit Read-back spider/Dave Kerr\n\n\n\n\nIt is important to note that there are many different shell programs, and they differ in terms of functionality.\nOn most Unix-like systems, the default shell is a program called bash, which stands for “Bourne Again Shell”.\nOther examples are the Z Shell (or zsh; default on MacOS), Windows Command Prompt (cmd.exe, the default CLI on MS Windows), Windows PowerShell, C Shell, and many more.\nWhen a terminal opens, it will immediately start the user’s preferred shell program. (This can be changed.)"
  },
  {
    "objectID": "slides/slides-topic-02-02-aux.html#why-bother-with-the-shell-1",
    "href": "slides/slides-topic-02-02-aux.html#why-bother-with-the-shell-1",
    "title": " QTM 350: Data Science Computing ",
    "section": "Why bother with the shell?",
    "text": "Why bother with the shell?\n\n\n\n\nWhy using this…\n\n\n\n\n\n\n\n\n\n… instead of this?"
  },
  {
    "objectID": "slides/slides-topic-02-02-aux.html#why-bother-with-the-shell-2",
    "href": "slides/slides-topic-02-02-aux.html#why-bother-with-the-shell-2",
    "title": " QTM 350: Data Science Computing ",
    "section": "Why bother with the shell?",
    "text": "Why bother with the shell?\n\nSpeed. Typing is fast: A skilled shell user can manipulate a system at dazzling speeds just using a keyboard. Typing commands is generally much faster than exploring through user interfaces with a mouse.\nPower. Both for executing commands and for fixing problems. There are some things you just can’t do in an IDE or GUI. It also avoids memory complications associated with certain applications and/or IDEs.\nReproducibility. Scripting is reproducible, while clicking is not.\nPortability. A shell can be used to interface to almost any type of computer, from a mainframe to a Raspberry Pi, in a very similar way. The shell is often the only game in town for high performance computing (interacting with servers and super computers).\nAutomation. Shells are programmable: Working in the shell allows you to program workflows, that is create scripts to automate time-consuming or repetitive processes.\nBecome a marketable data scientist. Modern programming is often polyglot. The shell provides a common interface for tooling. Modern solutions are often built to run in containers on Linux. In this environment shell knowledge has become very valuable. In short, the shell is having a renaissance in the age of data science."
  },
  {
    "objectID": "slides/slides-topic-02-02-aux.html#the-unix-philosophy-1",
    "href": "slides/slides-topic-02-02-aux.html#the-unix-philosophy-1",
    "title": " QTM 350: Data Science Computing ",
    "section": "The Unix philosophy",
    "text": "The Unix philosophy\nThe shell tools that we’re going to be using have their roots in the Unix family of operating systems originally developed at Bells Labs in the 1970s.\nBesides paying homage, acknowledging the Unix lineage is important because these tools still embody the “Unix philosophy”:\n\nDo One Thing And Do It Well\n\n\nBy pairing and chaining well-designed individual components, we can build powerful and much more complex larger systems.\nYou can see why the Unix philosophy is also referred to as “minimalist and modular”.\nAgain, this philosophy is very clearly expressed in the design and functionality of the Unix shell."
  },
  {
    "objectID": "slides/slides-topic-02-02-aux.html#things-to-use-the-shell-for",
    "href": "slides/slides-topic-02-02-aux.html#things-to-use-the-shell-for",
    "title": " QTM 350: Data Science Computing ",
    "section": "Things to use the shell for",
    "text": "Things to use the shell for\n\nVersion control with Git\nRenaming and moving files en masse\nFinding things on your computer\nCombining and manipulating PDFs\nInstalling and updating software\nScheduling tasks\nMonitoring system resources\nConnecting to cloud environments\nRunning analyses (“jobs”) on super computers\netc."
  },
  {
    "objectID": "slides/slides-topic-02-02-aux.html#shell-first-look",
    "href": "slides/slides-topic-02-02-aux.html#shell-first-look",
    "title": " QTM 350: Data Science Computing ",
    "section": "Shell: First look",
    "text": "Shell: First look\nLet’s open up our shell.\nA convenient way to do this is through RStudio’s built-in Terminal.\nHitting Shift+Alt+T (or Shift+⌥+R on a Mac) will cause a “Terminal” tab to open up next to the “Console” tab.\nYour system default shell is loaded. To find out what that is, type:\necho $SHELL\n\n\n\n/bin/zsh\n\n\n\nIt’s Z bash in my case.\n\nOf course, it’s always possible to open up the Shell directly if you prefer. It’s your turn!\n\nLinux\nMac\nWindows"
  },
  {
    "objectID": "slides/slides-topic-02-02-aux.html#shell-first-look-1",
    "href": "slides/slides-topic-02-02-aux.html#shell-first-look-1",
    "title": " QTM 350: Data Science Computing ",
    "section": "Shell: First look",
    "text": "Shell: First look\nYou should see something like:\n username@hostname:~$\nThis is shell-speak for: “Who am I and where am I?” \n\nusername denotes a specific user (one of potentially many on this computer).\n@hostname denotes the name of the computer or server.\n:~ denotes the directory path (where ~ signifies the user’s home directory).\n$ (or maybe %) denotes the start of the command prompt.\n\n(For a special “superuser” called root, the dollar sign will change to a #)."
  },
  {
    "objectID": "slides/slides-topic-02-02-aux.html#useful-keyboard-shortcuts",
    "href": "slides/slides-topic-02-02-aux.html#useful-keyboard-shortcuts",
    "title": " QTM 350: Data Science Computing ",
    "section": "Useful keyboard shortcuts",
    "text": "Useful keyboard shortcuts\n\nTab completion.\nUse the ↑ (and ↓) keys to scroll through previous commands.\nCtrl+→ (and Ctrl+←) to skip whole words at a time.\nCtrl+a moves the cursor to the beginning of the line.\nCtrl+e moves the cursor to the end of the line.\nCtrl+k deletes everything to the right of the cursor.\nCtrl+u deletes everything to the left of the cursor.\nCtrl+Shift+c to copy and Ctrl+Shift+v to paste (or just ⌘+ c/v on a Mac).\nCtrl+l clears your terminal."
  },
  {
    "objectID": "slides/slides-topic-02-02-aux.html#syntax-1",
    "href": "slides/slides-topic-02-02-aux.html#syntax-1",
    "title": " QTM 350: Data Science Computing ",
    "section": "Syntax",
    "text": "Syntax\n\n\n All Bash commands have the same basic syntax:\n\ncommand option(s) argument(s)\n\nExamples: \n$ ls -lh ~/Documents/\n\n$ sort -u myfile.txt\n\n\nCommands \n\nYou don’t always need options or arguments.\nFor example:\n\n$ ls ~/Documents/ and $ ls -lh are both valid commands that will yield output.\n\n\n\n\nHowever, you always need a command."
  },
  {
    "objectID": "slides/slides-topic-02-02-aux.html#syntax-2",
    "href": "slides/slides-topic-02-02-aux.html#syntax-2",
    "title": " QTM 350: Data Science Computing ",
    "section": "Syntax",
    "text": "Syntax\n\n\n All Bash commands have the same basic syntax:\n\ncommand option(s) argument(s)\n\nExamples: \n$ ls `-lh` ~/Documents/\n\n$ sort `-u` myfile.txt\n\n\nOptions (also called Flags)\n\nStart with a dash.\nUsually one letter.\nMultiple options can be chained under a single dash.\n$ ls -l -a -h /var/log ## This works\n$ ls -lah /var/log ## So does this\nAn exception is with (rarer) options requiring two dashes.\n$ ls --group-directories-first --human-readable /var/log\nl: Use a long listing format. This option shows detailed information about the files and directories.\nh: With -l, print sizes in human-readable format (e.g., KB, MB).\nu: Unique, sort will write only one of two lines that compare equal. It filters out the duplicate entries in the output.\nThink it’s difficult to memorize what the individual letters stand for? You’re totally right."
  },
  {
    "objectID": "slides/slides-topic-02-02-aux.html#syntax-3",
    "href": "slides/slides-topic-02-02-aux.html#syntax-3",
    "title": " QTM 350: Data Science Computing ",
    "section": "Syntax",
    "text": "Syntax\n\n\n All Bash commands have the same basic syntax:\n\ncommand option(s) argument(s)\n\nExamples: \n$ ls -lh `~/Documents/`\n\n$ sort -u `myfile.txt`\n\nArguments \n\nTell the command what to operate on.\nTotally depends on the command what legit inputs are.\nCan be a file, path, a set of files and folders, a string, and more\nSometimes more than just one argument is needed:\n$ mv figs/cat.JPG best-figs/cat.jpeg"
  },
  {
    "objectID": "slides/slides-topic-02-02-aux.html#multiple-ways-to-get-help",
    "href": "slides/slides-topic-02-02-aux.html#multiple-ways-to-get-help",
    "title": " QTM 350: Data Science Computing ",
    "section": "Multiple ways to get help",
    "text": "Multiple ways to get help\n\n\n\nThe man tool can be used to look at the manual page for a topic.\nThe man pages are grouped into sections, we can see them with man man.\nThe tldr tool shows a very short description of a tool, which covers the most common use cases only.\nThe cht.sh website can be used directly from the shell to get help on tools or even ask specific questions. (Or install cheat.)\nFor more info on how to get help, see here.\nActually, typing man bash and reading/skimming the whole thing might be a good start to learn basic command line speak."
  },
  {
    "objectID": "slides/slides-topic-02-02-aux.html#getting-help-with-man",
    "href": "slides/slides-topic-02-02-aux.html#getting-help-with-man",
    "title": " QTM 350: Data Science Computing ",
    "section": "Getting help with man",
    "text": "Getting help with man\n\nThe man command (“manual pages”) is your friend if you need help.\nman ls\n\n\n\nLS(1)                       General Commands Manual                      LS(1)\n\nN\bNA\bAM\bME\bE\n     l\bls\bs – list directory contents\n\nS\bSY\bYN\bNO\bOP\bPS\bSI\bIS\bS\n     l\bls\bs [-\b-@\b@A\bAB\bBC\bCF\bFG\bGH\bHI\bIL\bLO\bOP\bPR\bRS\bST\bTU\bUW\bWa\bab\bbc\bcd\bde\bef\bfg\bgh\bhi\bik\bkl\blm\bmn\bno\bop\bpq\bqr\brs\bst\btu\buv\bvw\bwx\bxy\by1\b1%\b%,\b,] [-\b--\b-c\bco\bol\blo\bor\br=_\bw_\bh_\be_\bn]\n        [-\b-D\bD _\bf_\bo_\br_\bm_\ba_\bt] [_\bf_\bi_\bl_\be _\b._\b._\b.]\n\nD\bDE\bES\bSC\bCR\bRI\bIP\bPT\bTI\bIO\bON\bN\n     For each operand that names a _\bf_\bi_\bl_\be of a type other than directory, l\bls\bs\n     displays its name as well as any requested, associated information.  For\n     each operand that names a _\bf_\bi_\bl_\be of type directory, l\bls\bs displays the names\n     of files contained within that directory, as well as any requested,\n     associated information.\n\n     If no operands are given, the contents of the current directory are\n     displayed.  If more than one operand is given, non-directory operands are\n     displayed first; directory and non-directory operands are sorted\n     separately and in lexicographical order.\n\n     The following options are available:\n\n     -\b-@\b@      Display extended attribute keys and sizes in long (-\b-l\bl) output.\n\n     -\b-A\bA      Include directory entries whose names begin with a dot (‘_\b.’)\n             except for _\b. and _\b._\b..  Automatically set for the super-user unless\n             -\b-I\bI is specified.\n\n     -\b-B\bB      Force printing of non-printable characters (as defined by\n             ctype(3) and current locale settings) in file names as \\_\bx_\bx_\bx,\n             where _\bx_\bx_\bx is the numeric value of the character in octal.  This\n             option is not defined in IEEE Std 1003.1-2008 (“POSIX.1”).\n\n     -\b-C\bC      Force multi-column output; this is the default when output is to\n             a terminal.\n\n     -\b-D\bD _\bf_\bo_\br_\bm_\ba_\bt\n             When printing in the long (-\b-l\bl) format, use _\bf_\bo_\br_\bm_\ba_\bt to format the\n             date and time output.  The argument _\bf_\bo_\br_\bm_\ba_\bt is a string used by\n             strftime(3).  Depending on the choice of format string, this may\n             result in a different number of columns in the output.  This\n             option overrides the -\b-T\bT option.  This option is not defined in\n             IEEE Std 1003.1-2008 (“POSIX.1”).\n\n     -\b-F\bF      Display a slash (‘/’) immediately after each pathname that is a\n             directory, an asterisk (‘*’) after each that is executable, an at\n             sign (‘@’) after each symbolic link, an equals sign (‘=’) after\n             each socket, a percent sign (‘%’) after each whiteout, and a\n             vertical bar (‘|’) after each that is a FIFO.\n\n     -\b-G\bG      Enable colorized output.  This option is equivalent to defining\n             CLICOLOR or COLORTERM in the environment and setting\n             -\b--\b-c\bco\bol\blo\bor\br=_\ba_\bu_\bt_\bo.  (See below.)  This functionality can be compiled\n             out by removing the definition of COLORLS.  This option is not\n             defined in IEEE Std 1003.1-2008 (“POSIX.1”).\n\n     -\b-H\bH      Symbolic links on the command line are followed.  This option is\n             assumed if none of the -\b-F\bF, -\b-d\bd, or -\b-l\bl options are specified.\n\n     -\b-I\bI      Prevent -\b-A\bA from being automatically set for the super-user.  This\n             option is not defined in IEEE Std 1003.1-2008 (“POSIX.1”).\n\n     -\b-L\bL      Follow all symbolic links to final target and list the file or\n             directory the link references rather than the link itself.  This\n             option cancels the -\b-P\bP option.\n\n     -\b-O\bO      Include the file flags in a long (-\b-l\bl) output.  This option is\n             incompatible with IEEE Std 1003.1-2008 (“POSIX.1”).  See\n             chflags(1) for a list of file flags and their meanings.\n\n     -\b-P\bP      If argument is a symbolic link, list the link itself rather than\n             the object the link references.  This option cancels the -\b-H\bH and\n             -\b-L\bL options.\n\n     -\b-R\bR      Recursively list subdirectories encountered.\n\n     -\b-S\bS      Sort by size (largest file first) before sorting the operands in\n             lexicographical order.\n\n     -\b-T\bT      When printing in the long (-\b-l\bl) format, display complete time\n             information for the file, including month, day, hour, minute,\n             second, and year.  The -\b-D\bD option gives even more control over the\n             output format.  This option is not defined in IEEE Std\n             1003.1-2008 (“POSIX.1”).\n\n     -\b-U\bU      Use time when file was created for sorting or printing.  This\n             option is not defined in IEEE Std 1003.1-2008 (“POSIX.1”).\n\n     -\b-W\bW      Display whiteouts when scanning directories.  This option is not\n             defined in IEEE Std 1003.1-2008 (“POSIX.1”).\n\n     -\b-a\ba      Include directory entries whose names begin with a dot (‘_\b.’).\n\n     -\b-b\bb      As -\b-B\bB, but use C escape codes whenever possible.  This option is\n             not defined in IEEE Std 1003.1-2008 (“POSIX.1”).\n\n     -\b-c\bc      Use time when file status was last changed for sorting or\n             printing.\n\n     -\b--\b-c\bco\bol\blo\bor\br=_\bw_\bh_\be_\bn\n             Output colored escape sequences based on _\bw_\bh_\be_\bn, which may be set\n             to either a\bal\blw\bwa\bay\bys\bs, a\bau\but\bto\bo, or n\bne\bev\bve\ber\br.\n\n             a\bal\blw\bwa\bay\bys\bs will make l\bls\bs always output color.  If TERM is unset or set\n             to an invalid terminal, then l\bls\bs will fall back to explicit ANSI\n             escape sequences without the help of termcap(5).  a\bal\blw\bwa\bay\bys\bs is the\n             default if -\b--\b-c\bco\bol\blo\bor\br is specified without an argument.\n\n             a\bau\but\bto\bo will make l\bls\bs output escape sequences based on termcap(5),\n             but only if stdout is a tty and either the -\b-G\bG flag is specified\n             or the COLORTERM environment variable is set and not empty.\n\n             n\bne\bev\bve\ber\br will disable color regardless of environment variables.\n             n\bne\bev\bve\ber\br is the default when neither -\b--\b-c\bco\bol\blo\bor\br nor -\b-G\bG is specified.\n\n             For compatibility with GNU coreutils, l\bls\bs supports y\bye\bes\bs or f\bfo\bor\brc\bce\be as\n             equivalent to a\bal\blw\bwa\bay\bys\bs, n\bno\bo or n\bno\bon\bne\be as equivalent to n\bne\bev\bve\ber\br, and t\btt\bty\by\n             or i\bif\bf-\b-t\btt\bty\by as equivalent to a\bau\but\bto\bo.\n\n     -\b-d\bd      Directories are listed as plain files (not searched recursively).\n\n     -\b-e\be      Print the Access Control List (ACL) associated with the file, if\n             present, in long (-\b-l\bl) output.\n\n     -\b-f\bf      Output is not sorted.  This option turns on -\b-a\ba.  It also negates\n             the effect of the -\b-r\br, -\b-S\bS and -\b-t\bt options.  As allowed by IEEE Std\n             1003.1-2008 (“POSIX.1”), this option has no effect on the -\b-d\bd, -\b-l\bl,\n             -\b-R\bR and -\b-s\bs options.\n\n     -\b-g\bg      This option has no effect.  It is only available for\n             compatibility with 4.3BSD, where it was used to display the group\n             name in the long (-\b-l\bl) format output.  This option is incompatible\n             with IEEE Std 1003.1-2008 (“POSIX.1”).\n\n     -\b-h\bh      When used with the -\b-l\bl option, use unit suffixes: Byte, Kilobyte,\n             Megabyte, Gigabyte, Terabyte and Petabyte in order to reduce the\n             number of digits to four or fewer using base 2 for sizes.  This\n             option is not defined in IEEE Std 1003.1-2008 (“POSIX.1”).\n\n     -\b-i\bi      For each file, print the file's file serial number (inode\n             number).\n\n     -\b-k\bk      This has the same effect as setting environment variable\n             BLOCKSIZE to 1024, except that it also nullifies any -\b-h\bh options\n             to its left.\n\n     -\b-l\bl      (The lowercase letter “ell”.) List files in the long format, as\n             described in the _\bT_\bh_\be _\bL_\bo_\bn_\bg _\bF_\bo_\br_\bm_\ba_\bt subsection below.\n\n     -\b-m\bm      Stream output format; list files across the page, separated by\n             commas.\n\n     -\b-n\bn      Display user and group IDs numerically rather than converting to\n             a user or group name in a long (-\b-l\bl) output.  This option turns on\n             the -\b-l\bl option.\n\n     -\b-o\bo      List in long format, but omit the group id.\n\n     -\b-p\bp      Write a slash (‘/’) after each filename if that file is a\n             directory.\n\n     -\b-q\bq      Force printing of non-graphic characters in file names as the\n             character ‘?’; this is the default when output is to a terminal.\n\n     -\b-r\br      Reverse the order of the sort.\n\n     -\b-s\bs      Display the number of blocks used in the file system by each\n             file.  Block sizes and directory totals are handled as described\n             in _\bT_\bh_\be _\bL_\bo_\bn_\bg _\bF_\bo_\br_\bm_\ba_\bt subsection below, except (if the long format\n             is not also requested) the directory totals are not output when\n             the output is in a single column, even if multi-column output is\n             requested.  (-\b-l\bl) format, display complete time information for\n             the file, including month, day, hour, minute, second, and year.\n             The -\b-D\bD option gives even more control over the output format.\n             This option is not defined in IEEE Std 1003.1-2008 (“POSIX.1”).\n\n     -\b-t\bt      Sort by descending time modified (most recently modified first).\n             If two files have the same modification timestamp, sort their\n             names in ascending lexicographical order.  The -\b-r\br option reverses\n             both of these sort orders.\n\n             Note that these sort orders are contradictory: the time sequence\n             is in descending order, the lexicographical sort is in ascending\n             order.  This behavior is mandated by IEEE Std 1003.2 (“POSIX.2”).\n             This feature can cause problems listing files stored with\n             sequential names on FAT file systems, such as from digital\n             cameras, where it is possible to have more than one image with\n             the same timestamp.  In such a case, the photos cannot be listed\n             in the sequence in which they were taken.  To ensure the same\n             sort order for time and for lexicographical sorting, set the\n             environment variable LS_SAMESORT or use the -\b-y\by option.  This\n             causes l\bls\bs to reverse the lexicographical sort order when sorting\n             files with the same modification timestamp.\n\n     -\b-u\bu      Use time of last access, instead of time of last modification of\n             the file for sorting (-\b-t\bt) or long printing (-\b-l\bl).\n\n     -\b-v\bv      Force unedited printing of non-graphic characters; this is the\n             default when output is not to a terminal.\n\n     -\b-w\bw      Force raw printing of non-printable characters.  This is the\n             default when output is not to a terminal.  This option is not\n             defined in IEEE Std 1003.1-2001 (“POSIX.1”).\n\n     -\b-x\bx      The same as -\b-C\bC, except that the multi-column output is produced\n             with entries sorted across, rather than down, the columns.\n\n     -\b-y\by      When the -\b-t\bt option is set, sort the alphabetical output in the\n             same order as the time output.  This has the same effect as\n             setting LS_SAMESORT.  See the description of the -\b-t\bt option for\n             more details.  This option is not defined in IEEE Std 1003.1-2001\n             (“POSIX.1”).\n\n     -\b-%\b%      Distinguish dataless files and directories with a '%' character\n             in long (-\b-l\bl) output, and don't materialize dataless directories\n             when listing them.\n\n     -\b-1\b1      (The numeric digit “one”.) Force output to be one entry per line.\n             This is the default when output is not to a terminal.\n\n     -\b-,      (Comma) When the -\b-l\bl option is set, print file sizes grouped and\n             separated by thousands using the non-monetary separator returned\n             by localeconv(3), typically a comma or period.  If no locale is\n             set, or the locale does not have a non-monetary separator, this\n             option has no effect.  This option is not defined in IEEE Std\n             1003.1-2001 (“POSIX.1”).\n\n     The -\b-1\b1, -\b-C\bC, -\b-x\bx, and -\b-l\bl options all override each other; the last one\n     specified determines the format used.\n\n     The -\b-c\bc, -\b-u\bu, and -\b-U\bU options all override each other; the last one\n     specified determines the file time used.\n\n     The -\b-S\bS and -\b-t\bt options override each other; the last one specified\n     determines the sort order used.\n\n     The -\b-B\bB, -\b-b\bb, -\b-w\bw, and -\b-q\bq options all override each other; the last one\n     specified determines the format used for non-printable characters.\n\n     The -\b-H\bH, -\b-L\bL and -\b-P\bP options all override each other (either partially or\n     fully); they are applied in the order specified.\n\n     By default, l\bls\bs lists one entry per line to standard output; the\n     exceptions are to terminals or when the -\b-C\bC or -\b-x\bx options are specified.\n\n     File information is displayed with one or more ⟨blank⟩s separating the\n     information associated with the -\b-i\bi, -\b-s\bs, and -\b-l\bl options.\n\n   T\bTh\bhe\be L\bLo\bon\bng\bg F\bFo\bor\brm\bma\bat\bt\n     If the -\b-l\bl option is given, the following information is displayed for\n     each file: file mode, number of links, owner name, group name, number of\n     bytes in the file, abbreviated month, day-of-month file was last\n     modified, hour file last modified, minute file last modified, and the\n     pathname.  If the file or directory has extended attributes, the\n     permissions field printed by the -\b-l\bl option is followed by a '@'\n     character.  Otherwise, if the file or directory has extended security\n     information (such as an access control list), the permissions field\n     printed by the -\b-l\bl option is followed by a '+' character.  If the -\b-%\b%\n     option is given, a '%' character follows the permissions field for\n     dataless files and directories, possibly replacing the '@' or '+'\n     character.\n\n     If the modification time of the file is more than 6 months in the past or\n     future, and the -\b-D\bD or -\b-T\bT are not specified, then the year of the last\n     modification is displayed in place of the hour and minute fields.\n\n     If the owner or group names are not a known user or group name, or the -\b-n\bn\n     option is given, the numeric ID's are displayed.\n\n     If the file is a character special or block special file, the device\n     number for the file is displayed in the size field.  If the file is a\n     symbolic link the pathname of the linked-to file is preceded by “-&gt;”.\n\n     The listing of a directory's contents is preceded by a labeled total\n     number of blocks used in the file system by the files which are listed as\n     the directory's contents (which may or may not include _\b. and _\b._\b. and other\n     files which start with a dot, depending on other options).\n\n     The default block size is 512 bytes.  The block size may be set with\n     option -\b-k\bk or environment variable BLOCKSIZE.  Numbers of blocks in the\n     output will have been rounded up so the numbers of bytes is at least as\n     many as used by the corresponding file system blocks (which might have a\n     different size).\n\n     The file mode printed under the -\b-l\bl option consists of the entry type and\n     the permissions.  The entry type character describes the type of file, as\n     follows:\n\n           -\b-     Regular file.\n           b\bb     Block special file.\n           c\bc     Character special file.\n           d\bd     Directory.\n           l\bl     Symbolic link.\n           p\bp     FIFO.\n           s\bs     Socket.\n           w\bw     Whiteout.\n\n     The next three fields are three characters each: owner permissions, group\n     permissions, and other permissions.  Each field has three character\n     positions:\n\n           1.   If r\br, the file is readable; if -\b-, it is not readable.\n\n           2.   If w\bw, the file is writable; if -\b-, it is not writable.\n\n           3.   The first of the following that applies:\n\n                      S\bS     If in the owner permissions, the file is not\n                            executable and set-user-ID mode is set.  If in the\n                            group permissions, the file is not executable and\n                            set-group-ID mode is set.\n\n                      s\bs     If in the owner permissions, the file is\n                            executable and set-user-ID mode is set.  If in the\n                            group permissions, the file is executable and\n                            setgroup-ID mode is set.\n\n                      x\bx     The file is executable or the directory is\n                            searchable.\n\n                      -\b-     The file is neither readable, writable,\n                            executable, nor set-user-ID nor set-group-ID mode,\n                            nor sticky.  (See below.)\n\n                These next two apply only to the third character in the last\n                group (other permissions).\n\n                      T\bT     The sticky bit is set (mode 1000), but not execute\n                            or search permission.  (See chmod(1) or\n                            sticky(7).)\n\n                      t\bt     The sticky bit is set (mode 1000), and is\n                            searchable or executable.  (See chmod(1) or\n                            sticky(7).)\n\n     The next field contains a plus (‘+’) character if the file has an ACL, or\n     a space (‘ ’) if it does not.  The l\bls\bs utility does not show the actual\n     ACL unless the -\b-e\be option is used in conjunction with the -\b-l\bl option.\n\nE\bEN\bNV\bVI\bIR\bRO\bON\bNM\bME\bEN\bNT\bT\n     The following environment variables affect the execution of l\bls\bs:\n\n     BLOCKSIZE           If this is set, its value, rounded up to 512 or down\n                         to a multiple of 512, will be used as the block size\n                         in bytes by the -\b-l\bl and -\b-s\bs options.  See _\bT_\bh_\be _\bL_\bo_\bn_\bg\n                         _\bF_\bo_\br_\bm_\ba_\bt subsection for more information.\n\n     CLICOLOR            Use ANSI color sequences to distinguish file types.\n                         See LSCOLORS below.  In addition to the file types\n                         mentioned in the -\b-F\bF option some extra attributes\n                         (setuid bit set, etc.) are also displayed.  The\n                         colorization is dependent on a terminal type with the\n                         proper termcap(5) capabilities.  The default “cons25”\n                         console has the proper capabilities, but to display\n                         the colors in an xterm(1), for example, the TERM\n                         variable must be set to “xterm-color”.  Other\n                         terminal types may require similar adjustments.\n                         Colorization is silently disabled if the output is\n                         not directed to a terminal unless the CLICOLOR_FORCE\n                         variable is defined or -\b--\b-c\bco\bol\blo\bor\br is set to “always”.\n\n     CLICOLOR_FORCE      Color sequences are normally disabled if the output\n                         is not directed to a terminal.  This can be\n                         overridden by setting this variable.  The TERM\n                         variable still needs to reference a color capable\n                         terminal however otherwise it is not possible to\n                         determine which color sequences to use.\n\n     COLORTERM           See description for CLICOLOR above.\n\n     COLUMNS             If this variable contains a string representing a\n                         decimal integer, it is used as the column position\n                         width for displaying multiple-text-column output.\n                         The l\bls\bs utility calculates how many pathname text\n                         columns to display based on the width provided.  (See\n                         -\b-C\bC and -\b-x\bx.)\n\n     LANG                The locale to use when determining the order of day\n                         and month in the long -\b-l\bl format output.  See\n                         environ(7) for more information.\n\n     LSCOLORS            The value of this variable describes what color to\n                         use for which attribute when colors are enabled with\n                         CLICOLOR or COLORTERM.  This string is a\n                         concatenation of pairs of the format _\bf_\bb, where _\bf is\n                         the foreground color and _\bb is the background color.\n\n                         The color designators are as follows:\n\n                               a\ba     black\n                               b\bb     red\n                               c\bc     green\n                               d\bd     brown\n                               e\be     blue\n                               f\bf     magenta\n                               g\bg     cyan\n                               h\bh     light grey\n                               A\bA     bold black, usually shows up as dark grey\n                               B\bB     bold red\n                               C\bC     bold green\n                               D\bD     bold brown, usually shows up as yellow\n                               E\bE     bold blue\n                               F\bF     bold magenta\n                               G\bG     bold cyan\n                               H\bH     bold light grey; looks like bright white\n                               x\bx     default foreground or background\n\n                         Note that the above are standard ANSI colors.  The\n                         actual display may differ depending on the color\n                         capabilities of the terminal in use.\n\n                         The order of the attributes are as follows:\n\n                               1.   directory\n                               2.   symbolic link\n                               3.   socket\n                               4.   pipe\n                               5.   executable\n                               6.   block special\n                               7.   character special\n                               8.   executable with setuid bit set\n                               9.   executable with setgid bit set\n                               10.  directory writable to others, with sticky\n                                    bit\n                               11.  directory writable to others, without\n                                    sticky bit\n\n                         The default is \"exfxcxdxbxegedabagacad\", i.e., blue\n                         foreground and default background for regular\n                         directories, black foreground and red background for\n                         setuid executables, etc.\n\n     LS_COLWIDTHS        If this variable is set, it is considered to be a\n                         colon-delimited list of minimum column widths.\n                         Unreasonable and insufficient widths are ignored\n                         (thus zero signifies a dynamically sized column).\n                         Not all columns have changeable widths.  The fields\n                         are, in order: inode, block count, number of links,\n                         user name, group name, flags, file size, file name.\n\n     LS_SAMESORT         If this variable is set, the -\b-t\bt option sorts the\n                         names of files with the same modification timestamp\n                         in the same sense as the time sort.  See the\n                         description of the -\b-t\bt option for more details.\n\n     TERM                The CLICOLOR and COLORTERM functionality depends on a\n                         terminal type with color capabilities.\n\n     TZ                  The timezone to use when displaying dates.  See\n                         environ(7) for more information.\n\nE\bEX\bXI\bIT\bT S\bST\bTA\bAT\bTU\bUS\bS\n     The l\bls\bs utility exits 0 on success, and &gt;0 if an error occurs.\n\nE\bEX\bXA\bAM\bMP\bPL\bLE\bES\bS\n     List the contents of the current working directory in long format:\n\n           $ ls -l\n\n     In addition to listing the contents of the current working directory in\n     long format, show inode numbers, file flags (see chflags(1)), and suffix\n     each filename with a symbol representing its file type:\n\n           $ ls -lioF\n\n     List the files in _\b/_\bv_\ba_\br_\b/_\bl_\bo_\bg, sorting the output such that the most\n     recently modified entries are printed first:\n\n           $ ls -lt /var/log\n\nC\bCO\bOM\bMP\bPA\bAT\bTI\bIB\bBI\bIL\bLI\bIT\bTY\bY\n     The group field is now automatically included in the long listing for\n     files in order to be compatible with the IEEE Std 1003.2 (“POSIX.2”)\n     specification.\n\nL\bLE\bEG\bGA\bAC\bCY\bY D\bDE\bES\bSC\bCR\bRI\bIP\bPT\bTI\bIO\bON\bN\n     In legacy mode, the -\b-f\bf option does not turn on the -\b-a\ba option and the -\b-g\bg,\n     -\b-n\bn, and -\b-o\bo options do not turn on the -\b-l\bl option.\n\n     Also, the -\b-o\bo option causes the file flags to be included in a long (-l)\n     output; there is no -\b-O\bO option.\n\n     When -\b-H\bH is specified (and not overridden by -\b-L\bL or -\b-P\bP) and a file argument\n     is a symlink that resolves to a non-directory file, the output will\n     reflect the nature of the link, rather than that of the file.  In legacy\n     operation, the output will describe the file.\n\n     For more information about legacy mode, see compat(5).\n\nS\bSE\bEE\bE A\bAL\bLS\bSO\bO\n     chflags(1), chmod(1), sort(1), xterm(1), localeconv(3), strftime(3),\n     strmode(3), compat(5), termcap(5), sticky(7), symlink(7)\n\nS\bST\bTA\bAN\bND\bDA\bAR\bRD\bDS\bS\n     With the exception of options -\b-g\bg, -\b-n\bn and -\b-o\bo, the l\bls\bs utility conforms to\n     IEEE Std 1003.1-2001 (“POSIX.1”) and IEEE Std 1003.1-2008 (“POSIX.1”).\n     The options -\b-B\bB, -\b-D\bD, -\b-G\bG, -\b-I\bI, -\b-T\bT, -\b-U\bU, -\b-W\bW, -\b-Z\bZ, -\b-b\bb, -\b-h\bh, -\b-w\bw, -\b-y\by and -\b-, are\n     non-standard extensions.\n\n     The ACL support is compatible with IEEE Std 1003.2c (“POSIX.2c”) Draft 17\n     (withdrawn).\n\nH\bHI\bIS\bST\bTO\bOR\bRY\bY\n     An l\bls\bs command appeared in Version 1 AT&T UNIX.\n\nB\bBU\bUG\bGS\bS\n     To maintain backward compatibility, the relationships between the many\n     options are quite complex.\n\n     The exception mentioned in the -\b-s\bs option description might be a feature\n     that was based on the fact that single-column output usually goes to\n     something other than a terminal.  It is debatable whether this is a\n     design bug.\n\n     IEEE Std 1003.2 (“POSIX.2”) mandates opposite sort orders for files with\n     the same timestamp when sorting with the -\b-t\bt option.\n\nmacOS 14.2                      August 31, 2020                     macOS 14.2"
  },
  {
    "objectID": "slides/slides-topic-02-02-aux.html#getting-help-with-man-1",
    "href": "slides/slides-topic-02-02-aux.html#getting-help-with-man-1",
    "title": " QTM 350: Data Science Computing ",
    "section": "Getting help with man",
    "text": "Getting help with man\n\n\n Manual pages are shown in the shell pager. Here are the essentials to navigate through contents presented in the pager:\n\nd - Scroll down half a page\nu - Scroll up half a page\nj / k - Scroll down or up a line. You can also use the arrow keys for this\nq - Quit\n/pattern - Search for text provided as “pattern”\nn - When searching, find the next occurrence\nN - When searching, find the previous occurrence\nThese and other man tricks are detailed in the help pages (hit “h” when you’re in the pager for an overview).\n\n\n\n\n\n\n\n\nRTFM\n\n\nAlways check the documentation!"
  },
  {
    "objectID": "slides/slides-topic-02-02-aux.html#help-practice",
    "href": "slides/slides-topic-02-02-aux.html#help-practice",
    "title": " QTM 350: Data Science Computing ",
    "section": "Help practice!",
    "text": "Help practice!\n\n\nIn your Terminal, access the man and explore the document. I want you to share with a colleague your first impression and five commands you found interesting.\nPlease present your own (first impression + five commands) and colleague (first impression and five commands) views in the lecture quiz!"
  },
  {
    "objectID": "slides/slides-topic-02-02-aux.html#help-cheat-tldr-cheat.sh",
    "href": "slides/slides-topic-02-02-aux.html#help-cheat-tldr-cheat.sh",
    "title": " QTM 350: Data Science Computing ",
    "section": "Help: cheat, tldr, cheat.sh",
    "text": "Help: cheat, tldr, cheat.sh\nThere are various other utilities which provide more readable summaries/cheatsheets of various commands. Those include\n\ncheat\ncheat.sh\ntldr\n\n\nThe first two need to be installed first. cheat.sh sheets are accessible via:\ncurl cheat.sh/ls  \n# List files one per line:\nls -1\n\n# List all files, including hidden files:\nls -a\n\n# List all files, with trailing `/` added to directory names:\nls -F\n\n# Long format list with size displayed using human readable units (KB, MB, GB):\nls -lh"
  },
  {
    "objectID": "slides/slides-topic-02-02-aux.html#navigating-your-file-system-1",
    "href": "slides/slides-topic-02-02-aux.html#navigating-your-file-system-1",
    "title": " QTM 350: Data Science Computing ",
    "section": "Navigating your file system",
    "text": "Navigating your file system\n\n\n\n\nWe’re all so used to a graphical user interface that switching to the shell can take some time to get used to.\nModern operating systems increasingly abstract away from underlying file systems (think about iOS, Android).\nFor data science operations it is key that you’re able to efficiently navigate your system to get information on files and folders.\nSome questions that will pop up:\n\nWhat is my home directory?\nIn which directory am I currently operating?\nWhere is my stuff?\nWhere do I want to put my stuff?\nHow do I navigate from here to there?"
  },
  {
    "objectID": "slides/slides-topic-02-02-aux.html#navigation",
    "href": "slides/slides-topic-02-02-aux.html#navigation",
    "title": " QTM 350: Data Science Computing ",
    "section": "Navigation",
    "text": "Navigation\n\nKey navigation commands are:\n\npwd to print (the current) working directory.\ncd to change directory.\n\n\npwd\n\n\n\n/Users/dcorde3/Library/CloudStorage/Dropbox/academic/cursos/cursos-davi/data_science_computing/2024S_dsc_emory_qtm_350/slides"
  },
  {
    "objectID": "slides/slides-topic-02-02-aux.html#navigation-1",
    "href": "slides/slides-topic-02-02-aux.html#navigation-1",
    "title": " QTM 350: Data Science Computing ",
    "section": "Navigation",
    "text": "Navigation\n\nYou can use absolute paths, but it’s better to use relative paths and invoke special symbols for a user’s home folder (~), current directory (.), and parent directory (..) as needed.\n\ncd slides-topic-02-02-examples ## Move into the \"slides-topic-02-02-examples\" sub-directory of this lecture directory.\ncd ../.. ## Now go back up two directories.\npwd\n\n\nTerminal!"
  },
  {
    "objectID": "slides/slides-topic-02-02-aux.html#navigation-2",
    "href": "slides/slides-topic-02-02-aux.html#navigation-2",
    "title": " QTM 350: Data Science Computing ",
    "section": "Navigation",
    "text": "Navigation\n\n\n Beware of directory names that contain spaces. Say you have a directory called “My Documents”. (I’m looking at you, Windows.)\n\nWhy won’t $ cd My Documents work?\nBash syntax is super pedantic about spaces and ordering. Here it thinks that “My” and “Documents” are separate arguments.\nHow to deal with it:\n\nUse quotation marks: $ cd \"My Documents\".\nUse Tab completion to automatically “escape” the space: $ cd My\\ Documents.\nDon’t use spaces in file and folder names. Just don’t.\nI’ve developed the habit to name files and folders\n\nalways lowercase and\nusing dashes or snake_case, as in assignment-05 or assignment_05. These are useful conventions!"
  },
  {
    "objectID": "slides/slides-topic-02-02-aux.html#listing-files-and-their-properties",
    "href": "slides/slides-topic-02-02-aux.html#listing-files-and-their-properties",
    "title": " QTM 350: Data Science Computing ",
    "section": "Listing files and their properties",
    "text": "Listing files and their properties\n\n\nWe’re about to go into more depth about the ls (list) command. It shows the contents of the current (or given) directory:\nls\n\n\n\n_slides-topic-02-02.html     slides-topic-01.qmd\n_slides-topic-02-02_files    slides-topic-02-01.qmd\n_slides-topic-02.html        slides-topic-02-02-aux.ipynb\n_slides-topic-02_aux.qmd     slides-topic-02-02-aux.qmd\n_slides-topic-02_files       slides-topic-02-02-examples\ncustom.css                   slides-topic-02-02.qmd\ncustom.scss                  slides-topic-02-03.qmd\nfigs                         survive.txt\nlibs\n\n\n\n\n\n\nNow we list the contents of the slides-topic-02-02-examples/ sub-directory with the -lh option (“long format”, “human readable file size unit suffixes”; again, check out man ls for the details):\nls -lh slides-topic-02-02-examples\n\n\n\ntotal 15304\n-rw-r--r--@ 1 dcorde3  206888963   4.8M Feb  3 18:14 bbc_text_cls.csv\n-rw-r--r--@ 1 dcorde3  206888963    23K Feb  3 15:22 diabetes.csv\n-rw-r--r--@ 1 dcorde3  206888963   2.6M Feb  4 13:35 naive_bayes.ipynb"
  },
  {
    "objectID": "slides/slides-topic-02-02-aux.html#listing-files-and-their-properties-1",
    "href": "slides/slides-topic-02-02-aux.html#listing-files-and-their-properties-1",
    "title": " QTM 350: Data Science Computing ",
    "section": "Listing files and their properties",
    "text": "Listing files and their properties\n\n\nNow we list the contents of the slides-topic-02-02-examples/ sub-directory with the -lh option (“long format”, “human readable file size unit suffixes”; again, check out man ls for the details):\nls -lh slides-topic-02-02-examples\n\n\n\ntotal 15304\n-rw-r--r--@ 1 dcorde3  206888963   4.8M Feb  3 18:14 bbc_text_cls.csv\n-rw-r--r--@ 1 dcorde3  206888963    23K Feb  3 15:22 diabetes.csv\n-rw-r--r--@ 1 dcorde3  206888963   2.6M Feb  4 13:35 naive_bayes.ipynb\n\n\n\n\nWhat does this all mean? Let’s focus on the top line.\ndrwxrwxr-x@ 3 dcorde3  206888963    96B Nov 27 09:51 ABC\n\nThe first column denotes the object type:\n\nd (directory or folder), l (link), or - (file)\n\nNext, we see the permissions associated with the object’s three possible user types: 1) owner, 2) the owner’s group, and 3) all other users.\n\nPermissions reflect r (read), w (write), or x (execute) access.\n- denotes missing permissions for a class of operations.\n\nThe number of hard links to the object.\nWe also see the identity of the object’s owner and their group.\nFinally, we see some descriptive elements about the object:\n\nSize, date and time of creation, and the object name."
  },
  {
    "objectID": "slides/slides-topic-02-02-aux.html#summary",
    "href": "slides/slides-topic-02-02-aux.html#summary",
    "title": " QTM 350: Data Science Computing ",
    "section": "Summary",
    "text": "Summary\n\n\n\nThe pwd (print working directory) command shows the current working directory.\nThe ls (list) command shows the contents of the current directory or a given directory.\nThe ls -l command shows the contents of the current directory as list.\nThe cd (change directory) changes the current working directory.\nYou can run cd at any time to quickly go to your home directory.\nYou can use the cd - command to go back to the last location.\nAbsolute paths are paths which specify the exact location of a file or folder.\nRelative paths are paths which are relative to the current directory.\nThe . special folder means ‘this folder’.\nThe .. special folder means ‘the parent folder’.\nThe ~ special folder is the ‘home directory’.\nThe $PWD environment variable holds the current working directory.\nThe $HOME environment variable holds the user’s home directory.\nThe tree command can show the files and folders in a given directory. (Install first on a Mac.)\nThe file command can be used to ask the shell what it thinks a file is.\n\n\n\nFor a more detailed overview, click here."
  },
  {
    "objectID": "slides/slides-topic-02-02-aux.html#managing-your-files-1",
    "href": "slides/slides-topic-02-02-aux.html#managing-your-files-1",
    "title": " QTM 350: Data Science Computing ",
    "section": "Managing your files",
    "text": "Managing your files\n\n\n\nThe obvious next step after navigating the file system is managing files.\nThere’s a lot you can do with files, including downloading, unzipping, copying, moving, renaming and deleting.\nAgain, doing this in a GUI is intuitive but usually scales badly.\nWe’ll learn how to do these operations at scale using the shell.\nBe careful when handling files in the shell though! Don’t expect friendly reminders such as “Do you really want to delete this folder of pictures from your anniversary?”"
  },
  {
    "objectID": "slides/slides-topic-02-02-aux.html#create-touch-and-mkdir",
    "href": "slides/slides-topic-02-02-aux.html#create-touch-and-mkdir",
    "title": " QTM 350: Data Science Computing ",
    "section": "Create: touch and mkdir",
    "text": "Create: touch and mkdir\nOne of the most common shell tasks is object creation (files, directories, etc.).\nWe use mkdir to create directories. E.g., to create a new “testing” directory we do:\nmkdir testing\n\n\nWe use touch to create (empty) files. If the file(s) already exist, touch changes a file’s “Access”, “Modify” and “Change” timestamps to the current time and date. To add some files to our new directory, we do:\ntouch testing/test1.txt testing/test2.txt testing/test3.txt\n\n\n\nCheck that it worked:\nls testing\n\n\n\ntest1.txt test2.txt test3.txt"
  },
  {
    "objectID": "slides/slides-topic-02-02-aux.html#remove-rm-and-rmdir",
    "href": "slides/slides-topic-02-02-aux.html#remove-rm-and-rmdir",
    "title": " QTM 350: Data Science Computing ",
    "section": "Remove: rm and rmdir",
    "text": "Remove: rm and rmdir\nLet’s delete the objects that we just created. Start with one of the .txt files, by using rm. - We could delete all the files at the same time, but you’ll see why I want to keep some.\nrm testing/test1.txt\n\n\nThe equivalent command for directories is rmdir.\nrmdir testing\n\n\n\nrmdir: testing: Directory not empty\n\n\n\n\nUh oh… It won’t let us delete the directory while it still has files inside of it. The solution is to use the rm command again with the “recursive” (-r or -R) and “force” (-f) options. - Excluding the -f option is safer, but will trigger a confirmation prompt for every file, which I’d rather avoid here.\nrm -rf testing ## Success"
  },
  {
    "objectID": "slides/slides-topic-02-02-aux.html#copy-cp",
    "href": "slides/slides-topic-02-02-aux.html#copy-cp",
    "title": " QTM 350: Data Science Computing ",
    "section": "Copy: cp",
    "text": "Copy: cp\n\n\nThe syntax for copying is $ cp object path/copyname.\n\nIf you don’t provide a new name for the copied object, it will just take the old name.\nHowever, if there is already an object with the same name in the target destination, then you’ll have to use -f to force an overwrite.\n\n\n## Create new \"copies\" sub-directory\nmkdir slides-topic-02-02-examples/copies\n\n## Now copy across a file (with a new name)\ncp slides-topic-02-02-examples/reps.txt slides-topic-02-02-examples/copies/reps-copy.txt\n\n## Show that we were successful\nls slides-topic-02-02-examples/copies\n\nTerminal!\n\n\n\nYou can use cp to copy directories, although you’ll need the -r flag if you want to recursively copy over everything inside of it too:\ncp -r slides-topic-02-02-examples/meals slides-topic-02-02-examples/copies\nrm -rf slides-topic-02-02-examples/copies/meals\n\nTerminal!"
  },
  {
    "objectID": "slides/slides-topic-02-02-aux.html#move-and-rename-mv",
    "href": "slides/slides-topic-02-02-aux.html#move-and-rename-mv",
    "title": " QTM 350: Data Science Computing ",
    "section": "Move (and rename): mv",
    "text": "Move (and rename): mv\nThe syntax for moving is $ mv object path/newobjectname\n ## Move the abc.txt file and show that it worked\nmv slides-topic-02-02-examples/ABC/abc.txt examples\nls slides-topic-02-02-examples/ABC ## empty\n\n## Move it back again\nmv slides-topic-02-02-examples/abc.txt slides-topic-02-02-examples/ABC\nls slides-topic-02-02-examples/ABC ## not empty\n\nTerminal!\n\n\nNote that “moving” an object within the same directory, but with specifying newobjectname, is effectively the same as renaming it.\n ## Rename reps-copy to reps2 by \"moving\" it with a new name\nmv slides-topic-02-02-examples/copies/reps-copy.txt slides-topic-02-02-examples/copies/reps2.txt\nls slides-topic-02-02-examples/copies\n\nTerminal!"
  },
  {
    "objectID": "slides/slides-topic-02-02-aux.html#rename-en-masse-zmv",
    "href": "slides/slides-topic-02-02-aux.html#rename-en-masse-zmv",
    "title": " QTM 350: Data Science Computing ",
    "section": "Rename en masse : zmv",
    "text": "Rename en masse : zmv\nA more convenient way to do renaming in zsh is with zmv. It has to be installed and autoloaded first:\nautoload -U zmv\n\nTerminal!\n\n\nThe syntax is zmv &lt;options&gt; &lt;old-files-pattern&gt; &lt;new-files-pattern&gt;\nFor example, say we want to change the file type (i.e. extension) of a set of files in the slides-topic-02-02-examples/meals directory, we do:\ncd slides-topic-02-02-examples/meals\nzmv -n -W  \"*.csv\" \"*.txt\"\n\nTerminal!\n\n\n\nA very useful flag is -n which does not execute the command but prints the command that would be executed. Use this if you are unsure about your patterns. The -W flag ensures that the wildcard * is recycled in the second pattern."
  },
  {
    "objectID": "slides/slides-topic-02-02-aux.html#rename-en-masse-zmv-1",
    "href": "slides/slides-topic-02-02-aux.html#rename-en-masse-zmv-1",
    "title": " QTM 350: Data Science Computing ",
    "section": "Rename en masse : zmv",
    "text": "Rename en masse : zmv\nzmv really shines in conjunction with regular expressions and wildcards (more on the next slide). This works especially well for dealing with a whole list of files or folders.\nAs another example, let’s change all of the file names in the slides-topic-02-02-examples/meals directory.\nzmv -n '(**/)(*).csv' '$1$2-tacos.csv'\n\nTerminal!\n\n\n\nNotice that the patterns are now bit more complicated. The first is surrounded by single quotes, (**/) which defines a group that we can refer to later. It allows us to search in both the given directory and sub-directories (which we don’t have in this case). The second, (*) is also grouped. Both are referred to in the replacement pattern with $1 and $2.\nWant to learn more about zmv? Check out this."
  },
  {
    "objectID": "slides/slides-topic-02-02-aux.html#wildcards",
    "href": "slides/slides-topic-02-02-aux.html#wildcards",
    "title": " QTM 350: Data Science Computing ",
    "section": "Wildcards",
    "text": "Wildcards\nWildcards are special characters that can be used as a replacement for other characters. The two most important ones are:\n\nReplace any number of characters with *.\n\nConvenient when you want to copy, move, or delete a whole class of files.\n\n\n\ncp slides-topic-02-02-examples/*.sh slides-topic-02-02-examples/copies ## Copy any file with an .sh extension to \"copies\"\nrm slides-topic-02-02-examples/copies/* ## Delete everything in the \"copies\" directory\n\nTerminal!\n\n\n\n\nReplace a single character with ?\n\nConvenient when you want to discriminate between similarly named files.\n\n\n\n\nls slides-topic-02-02-examples/meals/??nday.csv\nls slides-topic-02-02-examples/meals/?onday.csv\n\nTerminal!"
  },
  {
    "objectID": "slides/slides-topic-02-02-aux.html#find",
    "href": "slides/slides-topic-02-02-aux.html#find",
    "title": " QTM 350: Data Science Computing ",
    "section": "Find",
    "text": "Find\nThe last command to mention is find.\nThis can be used to locate files and directories based on a variety of criteria; from pattern matching to object properties.\nfind examples -iname \"monday.csv\" ## will automatically do recursive, -iname makes search case-insensitive\n\nfind . -iname \"*.txt\" ## must use \".\" to indicate pwd\n\nfind . -size +2000k ## find files larger than 2000 KB\n\nTerminal!"
  },
  {
    "objectID": "slides/slides-topic-02-02-aux.html#summary-1",
    "href": "slides/slides-topic-02-02-aux.html#summary-1",
    "title": " QTM 350: Data Science Computing ",
    "section": "Summary",
    "text": "Summary\n\n\n\nThe rm (remove) command can delete a file (they are gone forever, no recycle bin!).\nThe rm command won’t delete a folder which has files in it, unless you tell it to by adding the -r (recursive) flag.\nThe cp (copy) command can copy a file.\nThe cp can also be given wildcards like * to copy many files.\nThe mv (move) command can move or rename a file.\nThe zmv command enables convenient renaming.\nThe mkdir command can create a folder - it can even create a whole tree of folders if you pass the -p (create parent directories) flag.\nThe find command lets you find files based on specified criteria.\nThe cat command (concatenated) can be used to write the contents of a file to the screen.\nWe can pass multiple files to commands like cat if we use wildcards, such as quotes/*.\nThe wget (web get) command can download a file from the web. (Install first on a Mac.)\nThe zip/unzip commands can zip/unzip a file/folder for us.\n\n\nFor a more detailed overview, click here."
  },
  {
    "objectID": "slides/slides-topic-02-02-aux.html#working-with-text-files-1",
    "href": "slides/slides-topic-02-02-aux.html#working-with-text-files-1",
    "title": " QTM 350: Data Science Computing ",
    "section": "Working with text files",
    "text": "Working with text files\n\n\n\nData scientists spend a lot of time working with text, including scripts, Markdown documents, and delimited text files like CSVs.\nYou will have the opportunity to learn more on the statistical analysis of text using NLP technique over the course of your studies.\nWhile Python and R are strong environments for text wrangling and analysis, it still makes sense to spend a few slides showing off some Bash shell capabilities for working with text files.\nWe’ll only scratch the surface, but hopefully you’ll get an idea of how powerful the shell is in the text domain."
  },
  {
    "objectID": "slides/slides-topic-02-02-aux.html#counting-text-wc",
    "href": "slides/slides-topic-02-02-aux.html#counting-text-wc",
    "title": " QTM 350: Data Science Computing ",
    "section": "Counting text: wc",
    "text": "Counting text: wc\n\nYou can use the wc command to count:\n\nThe lines of text\nThe number of words\nThe number of characters\n\n\nLet’s demonstrate with a text file containing all of Shakespeare’s Sonnets.1\nwc slides-topic-02-02-examples/sonnets.txt\n\nTerminal!\n\nThe character count is actually higher than we’d get if we count by hand, because wc counts the invisible newline character “”.\n\nProject Gutenberg."
  },
  {
    "objectID": "slides/slides-topic-02-02-aux.html#read-everything-cat",
    "href": "slides/slides-topic-02-02-aux.html#read-everything-cat",
    "title": " QTM 350: Data Science Computing ",
    "section": "Read everything: cat",
    "text": "Read everything: cat\n\nThe simplest way to read in text is with the cat (“concatenate”) command. Note that cat will read in all of the text. You can scroll back up in your shell window, but this can still be a pain.\nAgain, let’s demonstrate using Shakespeare’s Sonnets. (This will overflow the slide.)\nWe also use the -n flag to show line numbers:\n\n\ncat -n slides-topic-02-02-examples/sonnets.txt\n\nTerminal!"
  },
  {
    "objectID": "slides/slides-topic-02-02-aux.html#scroll-more-and-less",
    "href": "slides/slides-topic-02-02-aux.html#scroll-more-and-less",
    "title": " QTM 350: Data Science Computing ",
    "section": "Scroll: more and less",
    "text": "Scroll: more and less\n\nThe more and less commands provide extra functionality over cat. For example, they allow you to move through long text one page at a time. (While they look similar, less is more than more, more or less…)\n\nmore slides-topic-02-02-examples/sonnets.txt\n\nTerminal!\n\n\n\nYou can move forward and back using the f and b keys, and quit by hitting q."
  },
  {
    "objectID": "slides/slides-topic-02-02-aux.html#preview-head-and-tail",
    "href": "slides/slides-topic-02-02-aux.html#preview-head-and-tail",
    "title": " QTM 350: Data Science Computing ",
    "section": "Preview: head and tail",
    "text": "Preview: head and tail\n\nThe head and tail commands let you limit yourself to a preview of the text, down to a specified number of rows. (The default is 10 rows if you don’t specify a number with the -n flag.)\n\nhead -n 3 slides-topic-02-02-examples/sonnets.txt ## First 3 rows\n# head slides-topic-02-02-examples/sonnets.txt ## First 10 rows (default)\n\nTerminal!"
  },
  {
    "objectID": "slides/slides-topic-02-02-aux.html#preview-head-and-tail-1",
    "href": "slides/slides-topic-02-02-aux.html#preview-head-and-tail-1",
    "title": " QTM 350: Data Science Computing ",
    "section": "Preview: head and tail",
    "text": "Preview: head and tail\n\ntail works very similarly to head, but starting from the bottom. For example, we can see the very last row of a file as follows:\n\ntail -n 1 slides-topic-02-02-examples/sonnets.txt ## Last row\n\nTerminal!\n\n\nBy using the -n +N option, we can specify that we want to preview all lines starting from row N and after, as in:\n\ntail -n +3024 slides-topic-02-02-examples/sonnets.txt ## Show everything from line 3024\n\nTerminal!"
  },
  {
    "objectID": "slides/slides-topic-02-02-aux.html#find-patterns-grep",
    "href": "slides/slides-topic-02-02-aux.html#find-patterns-grep",
    "title": " QTM 350: Data Science Computing ",
    "section": "Find patterns: grep",
    "text": "Find patterns: grep\n\n\nTo find patterns in text, we can use regular expression-type matching with grep.\nFor example, say we want to find the famous opening line to Shakespeare’s Sonnet 18.\n(We’re going to include the -n (“number”) flag to get the line that it occurs on.)\ngrep -n \"Shall I compare thee\" slides-topic-02-02-examples/sonnets.txt\n\n\ngrep: slides-topic-02-02-examples/sonnets.txt: No such file or directory\n\n\n\n\n\nBy default, grep returns all matching patterns.\nCheck out what happens when we do the following:\ngrep -n \"winter\" slides-topic-02-02-examples/sonnets.txt\n\n\ngrep: slides-topic-02-02-examples/sonnets.txt: No such file or directory"
  },
  {
    "objectID": "slides/slides-topic-02-02-aux.html#find-patterns-grep-1",
    "href": "slides/slides-topic-02-02-aux.html#find-patterns-grep-1",
    "title": " QTM 350: Data Science Computing ",
    "section": "Find patterns: grep",
    "text": "Find patterns: grep\n\nNote that grep can be used to identify patterns in a group of files (e.g. within a directory) too.\n\nThis is particularly useful if you are trying to identify a file that contains, say, a function name.\n\n\nHere’s a simple example: Which days will I eat pasta this week?\n\nI’m using the r (recursive) and l (just list the files; don’t print the output) flags.\n\n\n\ngrep -rl \"pasta\" slides-topic-02-02-examples/meals\n\n\ngrep: slides-topic-02-02-examples/meals: No such file or directory\n\n\nTake a look at the grep man or cheat file for other useful examples and flags (e.g. -i for ignore case)."
  },
  {
    "objectID": "slides/slides-topic-02-02-aux.html#manipulate-text-sed",
    "href": "slides/slides-topic-02-02-aux.html#manipulate-text-sed",
    "title": " QTM 350: Data Science Computing ",
    "section": "Manipulate text: sed",
    "text": "Manipulate text: sed\nThere are two main commands for manipulating text in the shell, namely sed and awk. Both of these are very powerful and flexible. We’ll briefly look into sed for now. (Mac users, note that the MacOS sed works a bit differently; see here.)\nsed is the stream editor command. It takes input from a stream - which in many cases will simply be a file. It then performs operations on the text as it is read, and returns the output.\n\n\n\n\nExample 1. Replace one text pattern with another.\ncat slides-topic-02-02-examples/nursery.txt\nsed 's/Jack/Bill/g' slides-topic-02-02-examples/nursery.txt\ncat slides-topic-02-02-examples/nursery.txt\n\n\nLet’s look at the expression s/Jack/Bill/g in detail:\n\nThe s indicates that we are going to run the substitute function, which is used to replace text.\nThe / indicates the start of the pattern we are searching for - Bill in this case.\nThe second / indicates the start of the replacement we will make when the pattern is found.\nThe final / indicates the end of the replacement - we can also optionally put flags after this slash. Here, g ensures global replacement (not just replacement of the first match)."
  },
  {
    "objectID": "slides/slides-topic-02-02-aux.html#summary-2",
    "href": "slides/slides-topic-02-02-aux.html#summary-2",
    "title": " QTM 350: Data Science Computing ",
    "section": "Summary",
    "text": "Summary\n\n\n\nhead will show the first ten lines of a file.\nhead -n 30 will show the first thirty lines of a file, using the -n flag to specify the number of lines.\ntail will show the final ten lines of a file.\ntail -n 3 uses the -n flag to specify three lines only.\ntr 'a' 'b' is the translate characters command, which turns one set of characters into another.\ncut can be used to extract parts of a line of text.\ncut -d',' -f 3 shows how the -d or delimiter flag is used to specify the delimiter to cut on and how the -f or field flag specifies which of the fields the text has been cut into is printed.\ncut -c 2-4 uses the -c or characters flag to specify that we are extracting a subset of characters in the line, in this case characters two to four.\nrev reverses text - by reversing, cutting and then re-reversing you can quickly extract text from the end of a line.\nsort sorts the incoming text alphabetically. The -r flag for sort reverses the sort order.\nThe uniq command removes duplicate lines - but only when they are next to each other, so you’ll often use it in combination with sort.\nYour pager, for example the less program can be useful when inspecting the output of your text transformation commands.\n\n\nFor a more detailed overview, click here."
  },
  {
    "objectID": "slides/slides-topic-02-02-aux.html#also-make-sure-to-master-regular-expressions",
    "href": "slides/slides-topic-02-02-aux.html#also-make-sure-to-master-regular-expressions",
    "title": " QTM 350: Data Science Computing ",
    "section": "Also, make sure to master regular expressions!",
    "text": "Also, make sure to master regular expressions!\n\n\n\nGood starting points are:\n\nThis chapter discussing regex in the context of the shell\nRegular Expression in Python\nThis base R regex intro"
  },
  {
    "objectID": "slides/slides-topic-02-02-aux.html#redirects-pipes-and-loops-1",
    "href": "slides/slides-topic-02-02-aux.html#redirects-pipes-and-loops-1",
    "title": " QTM 350: Data Science Computing ",
    "section": "Redirects, pipes, and loops",
    "text": "Redirects, pipes, and loops\n\n\n\n\nYou have learned about pipes (%&gt;% or |&gt;) in R already.\nUnderstanding the concept of pipelines in the shell, as well as how input and output work for command line programs is critical to be able to use the shell effectively.\nThink again of the Unix philosophy of “doing one thing, but doing it well” and combining multiple of these modules.\nAlso, often you’ll want to dump output in a file as part of your workflow.\nLet’s learn how all this works."
  },
  {
    "objectID": "slides/slides-topic-02-02-aux.html#redirect",
    "href": "slides/slides-topic-02-02-aux.html#redirect",
    "title": " QTM 350: Data Science Computing ",
    "section": "Redirect: >",
    "text": "Redirect: &gt;\n\nYou can send output from the shell to a file using the redirect operator &gt;.\nFor example, let’s print a message to the shell using the echo command.\necho \"At first, I was afraid, I was petrified\"\n\n\nAt first, I was afraid, I was petrified\n\n\n\n\nIf you wanted to save this output to a file, you need simply redirect it to the filename of choice.\necho \"At first, I was afraid, I was petrified\" &gt; survive.txt\nfind survive.txt ## Show that it now exists\n\n\nsurvive.txt"
  },
  {
    "objectID": "slides/slides-topic-02-02-aux.html#redirect-1",
    "href": "slides/slides-topic-02-02-aux.html#redirect-1",
    "title": " QTM 350: Data Science Computing ",
    "section": "Redirect: >",
    "text": "Redirect: &gt;\n\nIf you want to append text to an existing file, then you should use &gt;&gt;.\n\nUsing &gt; will try to overwrite the existing file contents.\n\n\necho \"'Kept thinking I could never live without you by my side\" &gt;&gt; survive.txt\ncat survive.txt\n\n\n\nAt first, I was afraid, I was petrified\n'Kept thinking I could never live without you by my side\n\n\n\nAn example use case is when adding rules to your .gitignore, e.g. $ echo \"*.csv\" &gt;&gt;  .gitignore."
  },
  {
    "objectID": "slides/slides-topic-02-02-aux.html#pipes",
    "href": "slides/slides-topic-02-02-aux.html#pipes",
    "title": " QTM 350: Data Science Computing ",
    "section": "Pipes: |",
    "text": "Pipes: |\nThe pipe operator | is one of the coolest features in Bash.\n\nIt allows us to chain (i.e. “pipe”) together a sequence of simple operations and thereby implement a more complex operation.\n\n\n\n\nHere’s a simple example:\ncat -n slides-topic-02-02-examples/sonnets.txt 2&gt;/dev/null | head -n100 | tail -n10\n\n\nThis command sequence:\n\nIt reads the file sonnets.txt, numbering each line of the text.\nAny errors that might occur during this process are ignored (not printed to the terminal).\nIt then takes only the first 100 lines of the numbered text.\nFrom those 100 lines, it then takes only the last 10 lines.\nThe final output displayed in the terminal will be lines 91 to 100 of the sonnets.txt file, along with their corresponding line numbers.\n\n\n\ncat -n slides-topic-02-02-examples/sonnets.txt\n\ncat is used to concatenate and display files.\nThe -n option of cat numbers all output lines starting with line 1.\nslides-topic-02-02-examples/sonnets.txt is the file path to the text file being read. This file presumably contains sonnets or other text.\n\n\n\n\n2&gt;/dev/null\n\n2&gt; is used to redirect the standard error (stderr) output stream.\n/dev/null is a special file that discards all data written to it.\nThis redirection sends all error messages from cat (like file not found, no read permission, etc.) to /dev/null, effectively silencing any errors that cat might produce.\n\n| head -n100\n\nThe pipe | passes the output of the previous command (cat -n) to the next command as input.\nhead is used to output the first part of files.\nThe -n100 option tells head to print the first 100 lines of its input.\n\n| tail -n10\n\nAnother pipe | passes the output of head -n100 to the next command as input.\ntail outputs the last part of files.\nThe -n10 option tells tail to print the last 10 lines of its input."
  },
  {
    "objectID": "slides/slides-topic-02-02-aux.html#iteration-with-for-loops",
    "href": "slides/slides-topic-02-02-aux.html#iteration-with-for-loops",
    "title": " QTM 350: Data Science Computing ",
    "section": "Iteration with for loops",
    "text": "Iteration with for loops\n\nSometimes you want to loop an operation over certain parameters. for loops in Bash/Z shell work similarly to other programming languages that you are probably familiar with.\n\nThe basic syntax is:\nfor i in LIST\ndo \n  OPERATION $i ## the $ sign indicates a variable in bash\ndone\n\nWe can also condense things into a single line by using ;.\nfor i in LIST; do OPERATION $i; done\nNote: Using ; isn’t limited to for loops. Semicolons are a standard way to denote line endings in Bash/Z shell."
  },
  {
    "objectID": "slides/slides-topic-02-02-aux.html#example-1-print-a-sequence-of-numbers",
    "href": "slides/slides-topic-02-02-aux.html#example-1-print-a-sequence-of-numbers",
    "title": " QTM 350: Data Science Computing ",
    "section": "Example 1: Print a sequence of numbers",
    "text": "Example 1: Print a sequence of numbers\nTo help make things concrete, here’s a simple for loop in action.\nfor i in 1 2 3 4 5; do echo $i; done\n\n\n1\n2\n3\n4\n5\n\n\n\nFWIW (For What It’s Worth), we can use bash’s brace expansion ({1..n}) to save us from having to write out a long sequence of numbers.\nfor i in {1..5}; do echo $i; done"
  },
  {
    "objectID": "slides/slides-topic-02-02-aux.html#example-2-combine-csvs",
    "href": "slides/slides-topic-02-02-aux.html#example-2-combine-csvs",
    "title": " QTM 350: Data Science Computing ",
    "section": "Example 2: Combine CSVs",
    "text": "Example 2: Combine CSVs\nHere’s a more realistic for loop use-case: Combining (i.e. concatenating) multiple CSVs.\nSay we want to combine all the “daily” files in the /meals directory into a single CSV, which I’ll call mealplan.csv. Here’s one attempt that incorporates various bash commands and tricks that we’ve learned so far. The basic idea is:\n\nCreate a new (empty) CSV\nThen, loop over the relevant input files, appending their contents to our new CSV\n\n\n## create an empty CSV\ntouch slides-topic-02-02-examples/meals/mealplan.csv\n## loop over the input files and append their contents to our new CSV\nfor i in $(ls slides-topic-02-02-examples/meals/*day.csv)\n  do \n   cat $i &gt;&gt; slides-topic-02-02-examples/meals/mealplan.csv\ndone\n\nTerminal!\n\n\n\n\nDid it work?"
  },
  {
    "objectID": "slides/slides-topic-02-02-aux.html#example-2-combine-csvs-1",
    "href": "slides/slides-topic-02-02-aux.html#example-2-combine-csvs-1",
    "title": " QTM 350: Data Science Computing ",
    "section": "Example 2: Combine CSVs",
    "text": "Example 2: Combine CSVs\n\ncat slides-topic-02-02-examples/meals/mealplan.csv\n\nTerminal!\n\n\n\nHmmm. Sort of, but we need to get rid of the repeating header.\n\n\n\nCan you think of a way? (Hint: tail and head…)"
  },
  {
    "objectID": "slides/slides-topic-02-02-aux.html#example-2-combine-csvs-2",
    "href": "slides/slides-topic-02-02-aux.html#example-2-combine-csvs-2",
    "title": " QTM 350: Data Science Computing ",
    "section": "Example 2: Combine CSVs",
    "text": "Example 2: Combine CSVs\n\nLet’s try again. First delete the old file so we can start afresh.\nrm -f slides-topic-02-02-examples/meals/mealplan.csv ## delete old file\n\nTerminal!\n\n\nHere’s our adapted gameplan:\n\nFirst, create the new file by grabbing the header (i.e. top line) from any of the input files and redirecting it. No need for touch this time.\nNext, loop over all the input files as before, but this time only append everything after the top line.\n\n\n\n## create a new CSV by redirecting the top line of any file\nhead -1 slides-topic-02-02-examples/meals/monday.csv &gt; slides-topic-02-02-examples/meals/mealplan.csv\n## loop over the input files, appending everything after the top line\nfor i in $(ls slides-topic-02-02-examples/meals/*day.csv)\n do \n   tail -n +2 $i &gt;&gt; slides-topic-02-02-examples/meals/mealplan.csv\ndone\n\nTerminal!"
  },
  {
    "objectID": "slides/slides-topic-02-02-aux.html#example-2-combine-csvs-3",
    "href": "slides/slides-topic-02-02-aux.html#example-2-combine-csvs-3",
    "title": " QTM 350: Data Science Computing ",
    "section": "Example 2: Combine CSVs",
    "text": "Example 2: Combine CSVs\n\nIt worked!\ncat slides-topic-02-02-examples/meals/mealplan.csv\n\nTerminal!\n\n\n\nWe still have to sort the correct week order, but that’s an easy job in R or Python.\n\nThe explicit benefit of doing the concatenating in the shell is that it can be much more efficient, since all the files don’t simultaneously have to be held in memory (i.e RAM).\nThis doesn’t matter here, but can make a dramatic difference once we start working with lots of files (or even a few really big ones)."
  },
  {
    "objectID": "slides/slides-topic-02-02-aux.html#scripting-1",
    "href": "slides/slides-topic-02-02-aux.html#scripting-1",
    "title": " QTM 350: Data Science Computing ",
    "section": "Scripting",
    "text": "Scripting\n\n\n\nWriting code interactively in the shell makes a lot of sense when you are exploring data, file structures, etc.\nHowever, it’s also possible (and often desirable) to write reproducible shell scripts that combine a sequence of commands.\nThese scripts are demarcated by their .sh file extension.\nLet’s look at the contents of a short shell script, hello.sh, that is included in the examples folder:\ncat slides-topic-02-02-examples/hello.sh\n What does this script do?"
  },
  {
    "objectID": "slides/slides-topic-02-02-aux.html#hello-world",
    "href": "slides/slides-topic-02-02-aux.html#hello-world",
    "title": " QTM 350: Data Science Computing ",
    "section": "Hello World!",
    "text": "Hello World!\n\n#!/bin/sh\necho \"\\nHello World!\\n\"\n\n#!/bin/sh is a shebang, indicating which program to run the command with (here: any Bash-compatible shell). However, it is typically ignored (note that it begins with the hash comment character.)\necho \"\\nHello World!\\n\" is the actual command that we want to run.\n\n\nTo run this simple script, you can just type in the file name and press enter.\nslides-topic-02-02-examples/hello.sh\n# bash slides-topic-02-02-examples/hello.sh ## Also works\n\n\nzsh:1: no such file or directory: slides-topic-02-02-examples/hello.sh"
  },
  {
    "objectID": "slides/slides-topic-02-02-aux.html#things-we-didnt-cover-here",
    "href": "slides/slides-topic-02-02-aux.html#things-we-didnt-cover-here",
    "title": " QTM 350: Data Science Computing ",
    "section": "Things we didn’t cover here",
    "text": "Things we didn’t cover here\nI hope that I’ve given you a sense of how the shell works and how powerful it is. My main goal has been to “demystify” the shell, so that you aren’t intimidated when we use shell commands later on.\nWe didn’t cover many things:\n\nUser roles and file permissions, environment variables, SSH, memory management (e.g. top and htop), GNU parallel, etc.\nAutomation; see here, here, and here are great places to start learning about automation on your own."
  },
  {
    "objectID": "slides/slides-topic-02-02-aux.html#additional-material",
    "href": "slides/slides-topic-02-02-aux.html#additional-material",
    "title": " QTM 350: Data Science Computing ",
    "section": "Additional material",
    "text": "Additional material\nIf you want to dig deeper, check out\n\nThe Unix Shell (Software Carpentery)\nThe Unix Workbench (Sean Kross)\nData Science at the Command Line (Jeroen Janssens)\nEffective Shell (Dave Kerr)\nEfficient Way To Process Large Text/Log Files Using Awk With Python\nUsing AWK and R to parse 25tb (Nick Strayer)\n./jq\nawk"
  },
  {
    "objectID": "lecture_material/material-topic-02/problem_set_version_control.html",
    "href": "lecture_material/material-topic-02/problem_set_version_control.html",
    "title": "Problem Set: Collaboration and Version Control with Git and GitHub",
    "section": "",
    "text": "Objective:\nTo familiarize students with the basics of version control using Git and GitHub, this problem set requires students to collaborate on a project, manage different versions of files through branches, commit changes, resolve conflicts, and merge their work into the main branch. The final product will be a cohesive document (README file) detailing their utopian data science project.\nFor example, my utopian data science project, Rhetoric, aims to daily collect and store all world politicians’ messages and speeches to forecast policy outcomes and regime transitions.\nProblem Set Instructions:\n\nSetting Up:\n\nForm groups of up to three members.\nEach group will create a new public repository on GitHub with the following name: 2024s_qtm350_ps01.\nEach group will give a creative title to the utopian data science project.\nInitialize the repository with a README file describing the project’s goal.\n\nBranching Out:\n\nEach member will create their own branch from the main branch.\nAssign different sections of the README file to each member for parallel development.\n\nCollaborative Work:\n\nEach member should clone the repository to their local machine.\nMembers will checkout to their respective branches to start working on their assigned sections.\n\nCommitting and Pushing:\n\nAfter completing the work on their section, each member will commit the changes with a meaningful commit message.\nPush the commits to the corresponding remote branch on GitHub.\n\nPulling and Updating:\n\nBefore merging, each member should pull the latest changes from the main branch into their own to handle any new updates.\nResolve any merge conflicts that might arise and commit the resolution.\n\nCode Review and Merging:\n\nOnce all members have pushed their updates, perform a code/text review. You can use GitHub’s pull request feature.\nAfter reviewing, merge each feature branch into the main branch.\nEnsure that all members’ contributions are reflected in the main branch.\n\nFinalizing the README:\n\nCollaboratively edit the README file in the main branch to include:\n\nProject title, description, objectives, and members’s names.\nContributions by each member.\nChallenges faced and how they were overcome.\nAny references or resources used.\n\n\nSubmission:\n\nSubmit the link of the the GitHub repository thorough GradeScope. Do not forget to assign the group members!\nEnsure the main branch contains the final README file and any other project files.\nThe history should clearly show each member’s contributions and commits.\n\n\nAssessment Criteria:\n\nCollaboration: Participation from all members is evident from the commit history.\nDocumentation: The README file should be well-organized, informative, and reflective of the work done.\nCommit Quality: Commit messages are clear, concise, and descriptive of the changes made.\n\nHints!\n\nCommit frequently with clear messages that accurately describe each change.\nRegularly communicate with your team to avoid redundant work or conflicts.\nUse GitHub issues or project boards to manage and track tasks.\nReview each other’s code thoroughly before merging into the main branch.\nCheck the additional material in the topic webpage and slides. Also:\n\nResolving a merge conflict using the command line\nResolving a merge conflict on GitHub"
  },
  {
    "objectID": "lecture_material/material-topic-03/07-loops-while.html",
    "href": "lecture_material/material-topic-03/07-loops-while.html",
    "title": "Loops (continued)",
    "section": "",
    "text": "Loops, revisited.\n\nwhile loops in Python.\n\n\n\n\n\nA loop is a way to repeat the same piece of code multiple times.\n\nLast lecture, we discussed for loops, in which the same code is run for each element of a sequence.\n\nfor element in list or str…\n\n…do “X” (where “X” = the code you want to run).\n\n\n\nA for loop can be run with any sequence.\nHere, we see a for loop used with a list.\n\nsimple_list = [1, 2, 3]\nfor item in simple_list:\n    print(item)\n\n1\n2\n3\n\n\nHere, we see a for loop used with a str.\n\nsimple_str = 'css'\nfor ch in simple_str:\n    print(ch)\n\nc\ns\ns\n\n\n\n\n\nWrite a for loop that iterates through a range(10), printing each element along the way, but stops once it reaches 5.\n\n### Your code here\n\n\n\n\n\nfor loops can be combined with conditional statements.\nfor loops can be nested.\n\nKeywords like continue and break can give further control over for loops.\n\n\n\n\n\n\nA while loop is a procedure to repeat the same piece of code while some condition is met.\n\nFor example:\n\nAdd numbers to a shopping_bill variable while shopping_bill &lt; 50.\n\nIncrease a temperature variable while temperature &lt; 85.\n\nwhile some condition is met, continue running a simulation.\n\n\n\nHow are for and while loops similar? How are they different?\n\n\n\nA while loop is created using the while keyword, following by a condition. As long as this condition is met, the while loop will continue!\nIn the code below:\n\nThe start variable begins at 0.\n\nWe then declare a while loop, which will run as long as start &lt; 2.\n\nThen, the start variable is incremented by 1 with each iteration, guaranteeing that eventually we’ll reach the condition where start &gt;= 2 (thus “breaking” the loop).\n\n\nstart = 0\nwhile start &lt; 2: ### Conditional statement\n    print(start)\n    start += 1\n\n0\n1\n\n\n\n\n\nwhile loops are often used to iterate through a list.\nTo do this, we use an index variable, which simply keeps track of “where” in the list we are.\n\nRecall that we can index into a list using the syntax list_name[0].\nWe can also retrieve the length of that list using len(list_name).\n\n\nnumbers = [1, 2, 3] ## List to iterate through\nindex = 0 ## Start index at 0\nwhile index &lt; len(numbers):\n    print(\"Index: {i}. Number: {n}.\".format(i = index, n = numbers[index]))\n    index += 1\n\nIndex: 0. Number: 1.\nIndex: 1. Number: 2.\nIndex: 2. Number: 3.\n\n\n\n\n\nYou want to keep your grocery costs low, so you decide not to buy anything above 9. How would you write a while loop that:\n\nIterates through costs.\n\nTracks a final_bill variable.\n\nOnly adds items to final_bill if they’re below 9$?\n\nHints:\n\nYou can retrieve the length of a list using len(list_name).\n\nIf you’re using an index, remember to increment it so you don’t get stuck in a loop.\n\n\ncosts = [5, 8, 4, 10, 15]\n#### YOUR CODE HERE\n\n\n\n\n\nindex = 0\nfinal_bill = 0\nwhile index &lt; len(costs):\n    if costs[index] &lt; 9:\n        final_bill += costs[index]\n    index += 1\nprint(final_bill)\n\n17\n\n\n\n\n\nA common issue that programmers encounter is getting “stuck” in an infinite while loop. This happens because they haven’t ensured that the condition will eventually evaluate as False.\n\nThis is surprisingly easy to do, even as an experienced programmer.\n\nFor this reason, I typically prefer to use a for loop rather than a while loop, unless I absolutely have to.\n\nIf you do find yourself stuck, you can “cancel” the loop manually:\n\nPressing the Stop button in the Jupyter toolbar.\nPressing Command + C in the Terminal.\n\n\n\n\nWhat will the final value of room_temperature be if the following while loop is run? What about the final value of body_temperature?\n\nroom_temperature = 40\nbody_temperature = 92\nwhile room_temperature &lt; 70:\n    room_temperature += 1\n    body_temperature += .2\n\n\n\n\nWrite a while loop to count the number of vowels in a string. The code block below starts with a list of vowels alreay, which you can use to cross-reference when iterating through a string.\nHint: If you’re feeling extra ambitious, you might think about how to handle upper-case vowels.\n\nvowels = ['a', 'e', 'i', 'o', 'u']\nexample_string = \"CSS is great\"\n### Your code here\n\n\n\n\n\n### Practice 1\nvowels = ['a', 'e', 'i', 'o', 'u']\nexample_string = \"CSS is great\"\nnum_vowels = 0\nindex = 0\nwhile index &lt; len(example_string):\n    if example_string[index].lower() in vowels:\n        num_vowels += 1\n    index += 1\nprint(str(num_vowels) + \" vowels in '{x}'\".format(x = example_string))\n\n3 vowels in 'CSS is great'\n\n\n\n\n\n\nThis concludes our unit on loops! We’ll continue using both for and while loops throughout the course.\nKey takeaways:\n\nA loop can be used to repeat the same piece of code many times.\n\nA for loop iterates through a sequence and does the same thing for each item in that sequence.\n\nA while loop runs the code code as long as some condition is met.\n\nwhile loops sometimes get “stuck”, if you’re not careful about ensuring this condition will eventually evaluate to False."
  },
  {
    "objectID": "lecture_material/material-topic-03/07-loops-while.html#goals-of-this-lecture",
    "href": "lecture_material/material-topic-03/07-loops-while.html#goals-of-this-lecture",
    "title": "Loops (continued)",
    "section": "",
    "text": "Loops, revisited.\n\nwhile loops in Python."
  },
  {
    "objectID": "lecture_material/material-topic-03/07-loops-while.html#loops-revisited",
    "href": "lecture_material/material-topic-03/07-loops-while.html#loops-revisited",
    "title": "Loops (continued)",
    "section": "",
    "text": "A loop is a way to repeat the same piece of code multiple times.\n\nLast lecture, we discussed for loops, in which the same code is run for each element of a sequence.\n\nfor element in list or str…\n\n…do “X” (where “X” = the code you want to run).\n\n\n\nA for loop can be run with any sequence.\nHere, we see a for loop used with a list.\n\nsimple_list = [1, 2, 3]\nfor item in simple_list:\n    print(item)\n\n1\n2\n3\n\n\nHere, we see a for loop used with a str.\n\nsimple_str = 'css'\nfor ch in simple_str:\n    print(ch)\n\nc\ns\ns\n\n\n\n\n\nWrite a for loop that iterates through a range(10), printing each element along the way, but stops once it reaches 5.\n\n### Your code here\n\n\n\n\n\nfor loops can be combined with conditional statements.\nfor loops can be nested.\n\nKeywords like continue and break can give further control over for loops."
  },
  {
    "objectID": "lecture_material/material-topic-03/07-loops-while.html#while-loops",
    "href": "lecture_material/material-topic-03/07-loops-while.html#while-loops",
    "title": "Loops (continued)",
    "section": "",
    "text": "A while loop is a procedure to repeat the same piece of code while some condition is met.\n\nFor example:\n\nAdd numbers to a shopping_bill variable while shopping_bill &lt; 50.\n\nIncrease a temperature variable while temperature &lt; 85.\n\nwhile some condition is met, continue running a simulation.\n\n\n\nHow are for and while loops similar? How are they different?\n\n\n\nA while loop is created using the while keyword, following by a condition. As long as this condition is met, the while loop will continue!\nIn the code below:\n\nThe start variable begins at 0.\n\nWe then declare a while loop, which will run as long as start &lt; 2.\n\nThen, the start variable is incremented by 1 with each iteration, guaranteeing that eventually we’ll reach the condition where start &gt;= 2 (thus “breaking” the loop).\n\n\nstart = 0\nwhile start &lt; 2: ### Conditional statement\n    print(start)\n    start += 1\n\n0\n1\n\n\n\n\n\nwhile loops are often used to iterate through a list.\nTo do this, we use an index variable, which simply keeps track of “where” in the list we are.\n\nRecall that we can index into a list using the syntax list_name[0].\nWe can also retrieve the length of that list using len(list_name).\n\n\nnumbers = [1, 2, 3] ## List to iterate through\nindex = 0 ## Start index at 0\nwhile index &lt; len(numbers):\n    print(\"Index: {i}. Number: {n}.\".format(i = index, n = numbers[index]))\n    index += 1\n\nIndex: 0. Number: 1.\nIndex: 1. Number: 2.\nIndex: 2. Number: 3.\n\n\n\n\n\nYou want to keep your grocery costs low, so you decide not to buy anything above 9. How would you write a while loop that:\n\nIterates through costs.\n\nTracks a final_bill variable.\n\nOnly adds items to final_bill if they’re below 9$?\n\nHints:\n\nYou can retrieve the length of a list using len(list_name).\n\nIf you’re using an index, remember to increment it so you don’t get stuck in a loop.\n\n\ncosts = [5, 8, 4, 10, 15]\n#### YOUR CODE HERE\n\n\n\n\n\nindex = 0\nfinal_bill = 0\nwhile index &lt; len(costs):\n    if costs[index] &lt; 9:\n        final_bill += costs[index]\n    index += 1\nprint(final_bill)\n\n17\n\n\n\n\n\nA common issue that programmers encounter is getting “stuck” in an infinite while loop. This happens because they haven’t ensured that the condition will eventually evaluate as False.\n\nThis is surprisingly easy to do, even as an experienced programmer.\n\nFor this reason, I typically prefer to use a for loop rather than a while loop, unless I absolutely have to.\n\nIf you do find yourself stuck, you can “cancel” the loop manually:\n\nPressing the Stop button in the Jupyter toolbar.\nPressing Command + C in the Terminal.\n\n\n\n\nWhat will the final value of room_temperature be if the following while loop is run? What about the final value of body_temperature?\n\nroom_temperature = 40\nbody_temperature = 92\nwhile room_temperature &lt; 70:\n    room_temperature += 1\n    body_temperature += .2\n\n\n\n\nWrite a while loop to count the number of vowels in a string. The code block below starts with a list of vowels alreay, which you can use to cross-reference when iterating through a string.\nHint: If you’re feeling extra ambitious, you might think about how to handle upper-case vowels.\n\nvowels = ['a', 'e', 'i', 'o', 'u']\nexample_string = \"CSS is great\"\n### Your code here\n\n\n\n\n\n### Practice 1\nvowels = ['a', 'e', 'i', 'o', 'u']\nexample_string = \"CSS is great\"\nnum_vowels = 0\nindex = 0\nwhile index &lt; len(example_string):\n    if example_string[index].lower() in vowels:\n        num_vowels += 1\n    index += 1\nprint(str(num_vowels) + \" vowels in '{x}'\".format(x = example_string))\n\n3 vowels in 'CSS is great'"
  },
  {
    "objectID": "lecture_material/material-topic-03/07-loops-while.html#conclusion",
    "href": "lecture_material/material-topic-03/07-loops-while.html#conclusion",
    "title": "Loops (continued)",
    "section": "",
    "text": "This concludes our unit on loops! We’ll continue using both for and while loops throughout the course.\nKey takeaways:\n\nA loop can be used to repeat the same piece of code many times.\n\nA for loop iterates through a sequence and does the same thing for each item in that sequence.\n\nA while loop runs the code code as long as some condition is met.\n\nwhile loops sometimes get “stuck”, if you’re not careful about ensuring this condition will eventually evaluate to False."
  },
  {
    "objectID": "lecture_material/material-topic-03/15-functions-advanced.html",
    "href": "lecture_material/material-topic-03/15-functions-advanced.html",
    "title": "Functions (advanced)",
    "section": "",
    "text": "A function is a re-usable piece of code that performs some operation (typically on some input), and then typically returns a result (i.e., an output).\n\nBreaking this down:\n\nInput: a variable defined by the user that is passed into a function using the (input) syntax.\n\nAlso called an argument.\n\nOutput: the variable returned by a function after this operation is performed.\n\nIf a return value is not specified, a function will return None.\n\n\n\ndef square(x):\n    \"\"\"Returns the square of X.\"\"\"\n    return x**2\n\n\nsquare(2)\n\n4\n\n\n\n\n\nToday we’ll be covering some more advanced topics with functions:\n\nReturning multiple values.\nNamespaces.\n\nlambda functions.\nVarying number of arguments.\n\nWe’ll also be getting more hands-on practice with functions!\n\n\n\nFunctions can return multiple values, or even another function.\nThis can be useful when:\n\nThe goal of a function can’t be distilled into a single value.\n\nYou want to return multiple bits of information about something, e.g., its len, its value, and so on.\n\nMultiple values can be separated with a ,.\n\n\nSuppose we wanted a function that takes two numbers as input, and returns both:\n\nTheir sum.\n\nTheir product.\n\n\ndef sum_product(a, b):\n    return a + b, a * b\n\n\nsum_product(10, 200)\n\n(210, 2000)\n\n\n\n\n\nWhat do you notice about the type of the object that gets returned when a function returns multiple values?\n\nsum_product(5, 2)\n\n(7, 10)\n\n\n\n\n\nBy default, a function will package these multiple values into a tuple.\n\nIt’s possible to return them in another form, e.g., in a structured dictionary.\nBut if you use the return a, b syntax, a and b will returned like: (a, b)\n\n\n\n\n\n\n\n\nA namespace is the “space” where a given set of variable names have been declared.\n\nPython has several types of namespaces:\n\nBuilt-in: Built-in objects within Python (e.g., Exceptions, lists, and more). These can be accessed from anywhere.\n\nGlobal: Any objects defined in the main program. These can be accessed anywhere in the main program once you’ve defined them, but not in another Jupyter notebook, etc.\nLocal: If you define new variables within a function, those variables can only be accessed within the “scope” of that function.\n\n\n\n\nSo far, we’ve mostly been working with variables defined in the global namespace.\n\nI.e., once we define a variable in a notebook (and run that cell), we can reference it in another cell.\n\n\n## define global variable\nmy_var = 2\n\n\n## reference global variable\nprint(my_var)\n\n2\n\n\n\n\n\nIf you declare a variable within a function definition, that variable does not persist outside the scope of that function.\nIn the function below, we declare a new variable called answer, which is eventually returned.\n\nHowever, the variable itself does not exist outside the function.\n\n\ndef exponentiate(num, exp):\n    ### \"answer\" is a new variable \n    answer = num ** exp\n    return answer\n\n\n### This will throw an error\nprint(answer)\n\nNameError: name 'answer' is not defined\n\n\n\n\n\nIf you’ve defined a variable in the global namespace, you can reference it inside a function.\n\nWord of caution ⚠️: this can sometimes make for confusing code.\n\n\n## define global variable\nmy_var = 2\n## define function\ndef add_two(x):\n    ## references my_var\n    return x + my_var\n\nadd_two(2)\n\n4\n\n\n\n\n\nWhat would value of new_var be after running the code below?\nWhat about test_var?\n\ntest_var = 2\ndef test_func(x):\n    test_var = x ** 2\n    return test_var\nnew_var = test_func(5)\n\n\n\n\nThe global variable test_var is unaltered by test_func.\n\ntest_var = 2 ## global variable\ndef test_func(x):\n    test_var = x ** 2\n    return test_var\nnew_var = test_func(5)\nprint(new_var)\nprint(test_var)\n\n25\n2\n\n\n\n\n\nRemember that you can check which variables are defined using whos.\n\nwhos\n\nVariable       Type        Data/Info\n------------------------------------\nadd_two        function    &lt;function add_two at 0x7fd2f2e8bb80&gt;\nexponentiate   function    &lt;function exponentiate at 0x7fd2d0133d30&gt;\nmy_var         int         2\nnew_var        int         25\nsquare         function    &lt;function square at 0x7fd2d0133820&gt;\ntest_func      function    &lt;function test_func at 0x7fd2f2e5f1f0&gt;\ntest_var       int         2\n\n\n\n\n\n\nSo far, we’ve focused on creating functions using the def func_name(...) syntax.\nHowever, Python also has something called lambda functions.\n\nSyntax: lambda x: ....\nMain advantage: can be written in a single line, best if you want a simple function.\n\nExcellent for passing as arguments into other functions, such as sorted.\n\n\n\nsquare = lambda x: x**2\nprint(square(2))\nprint(square(4))\n\n4\n16\n\n\nIn theory, lambda functions can have multiple arguments.\n\nexp = lambda x, y: x*y\nprint(exp(2, 3))\n\n6\n\n\n\n\nConvert the function below into a lambda function.\n\ndef add_one(x):\n    ## Adds 1 to x\n    return x + 1\n\n### Your code here\n\n\n\n\n\n# Lambda solution\nadd_one = lambda x: x + 1\nprint(add_one(1))\n\n2\n\n\n\n\n\n\nlambda is an easy, efficient way to define a simple function.\n\nIn practice, lambda is most useful when defining functions “on the fly”.\n\nAs arguments to pass into another function.\nAs nested functions within another function.\n\n\n\n\n\n\nSo far, we’ve assumed that we know how many arguments will be passed into a function at any given time. But this isn’t always the case.\nFortunately, Python gives us two ways to handle an arbitrary number of arguments:\n\n*args: allows a function to receive an arbitrary number of (positional) arguments, which can be “unpacked” as needed. The function treats them as a tuple.\n**kwargs: allows a function to receive a dictionary of (keyword) arguments, which can be “unpacked” as needed.\n\n\n\nThe *args syntax allows you to input an arbitrary number of arguments into a function.\n\ndef my_function(*fruits):\n    print(\"The last fruit is \" + fruits[-1] + \".\")\n\n\nmy_function(\"strawberry\")\n\nThe last fruit is strawberry.\n\n\n\nmy_function(\"strawberry\", \"apple\")\n\nThe last fruit is apple.\n\n\n\n\nHow exactly is this working? That is, what is my_function treating *fruits as?\nTry printing out fruits to see what’s going on.\n\n### Your code here\n\n\n\n\nThe *args syntax tells Python to allow an arbitrary number of arguments. Any argument ends up being packaged as a tuple, which the body of your function code can then unpack.\n\ndef my_function(*fruits):\n    print(fruits)\n\n\nmy_function(\"apple\", \"strawberry\", \"banana\")\n\n('apple', 'strawberry', 'banana')\n\n\n\n\n\n\nThe *kwargs is similar to *args, but allows for an arbitrary number of keyword arguments.\n\nThese are treated as a dict by the function.\n\n\ndef my_function(**fruits):\n    print(fruits)\n\n\n### Keyword and value are automatically placed into dictionary\nmy_function(name = \"apple\", amount = 5)\n\n{'name': 'apple', 'amount': 5}\n\n\n\n### The specific keyword can be altered as needed\nmy_function(name = \"banana\", cost = 10)\n\n{'name': 'banana', 'cost': 10}\n\n\n\n\nIn general, **kwargs is useful when you want flexibility.\nFor example, suppose you have a website, in which people can (optionally) fill out the following information:\n\nName.\nEmail.\nPhone number.\nLocation.\n\nBut because not everyone fills out every field, the function you use to store this information needs to be flexible about how many arguments it receives.\n\ndef store_user(**info):\n    ## For now, this is just a placeholder to demonstrate\n    for item in info.items():\n        print(item)\n\n\nstore_user(Name = \"Sean\", Location = \"San Diego\")\n\n('Name', 'Sean')\n('Location', 'San Diego')\n\n\n\n\n\n\n\nThis is the end of our unit on functions––but we’ll continue getting practice throughout the rest of the course!\n\n\n\nOne of the best ways to learn a new concept is to actually practice it. Thus, I’m including a number of practice problems at the end of this lecture, which we’ll work through.\n\n\nGoal: write a function that takes in a list of numbers as input, and finds the maximum of the list.\nThe catch: you can’t use the operator max.\nThings to consider:\n\nIf the input list is empty, you should return None.\n\nSince you can’t use max, you might consider using a for loop, checking the value of each number in turn.\n\n\n### Your code here\n\n\n\n\ndef find_max(lst):\n    if len(lst) == 0:\n        return None\n    ### Start by setting max to first item in list\n    m = lst[0]\n    ### Then iterate through each item\n    for i in lst:\n        ### if item is greater than first item...\n        if i &gt; m:\n            ### Reset max to new item\n            m = i\n    return m\n\n\nfind_max([1, 2, 10, 5])\n\n10\n\n\n\nfind_max([])\n\n\n\n\n\nGoal: write a function that takes in an arbitrary number of arguments (i.e., uses *args), and finds the maximum.\nThe catch: you can’t use the operator max.\nThings to consider:\n\nIf there are no arguments, you should return None.\n\nSince you can’t use max, you might consider using a for loop, checking the value of each number in turn.\n\n\n### Your code here\n\n\n\n\ndef find_max(*args):\n    ## if no args are presented, \"args\" = ([],)\n    if args[0] == []:\n        return None\n    ### Start by setting max to first item in list\n    m = args[0]\n    ### Then iterate through each item\n    for i in args:\n        ### if item is greater than first item...\n        if i &gt; m:\n            ### Reset max to new item\n            m = i\n    return m\n\n\nfind_max([1, 2, 10, 5])\n\n[1, 2, 10, 5]\n\n\n\nfind_max([])\n\n\n\n\n\nGoal: write a function that takes in a list of numbers, and prints the even ones.\n\n### Your code here\n\n\n\n\ndef print_even(numbers):\n    for i in numbers:\n        if i % 2 == 0:\n            print(i)\n\n\nprint_even([1, 2, 8])\n\n2\n8\n\n\n\nprint_even([104, 57])\n\n104\n\n\n\n\n\n\nSuppose we want a function that takes in a dict of Names and Heights. That is, each key is a Name, and it maps onto a Height.\nWe want the function to return the Name of the person with the largest Height, as well as the Height itself.\n\n## Can't just max...that'll return \"Sean\"\nheights = {'Sean': 67, 'Ben': 72, 'Anne': 66}\n### Your code here\n\n\n\n\ndef get_tallest(info):\n    ## Get all tuples...\n    ### turn into list so we can index into it\n    items = list(info.items())\n    ## Start by assigning tallest to first in list\n    tallest = items[0]\n    ## Then iterate through tuples...\n    for i in items:\n        ### if item is taller than initial\n        if i[1] &gt; tallest[1]:\n            ### Reset \"tallest\"\n            tallest = i\n    return tallest\n\n\nget_tallest(heights)\n\n('Ben', 72)\n\n\n\nget_tallest({'A': 20, 'B': 10, 'C': 200})\n\n('C', 200)"
  },
  {
    "objectID": "lecture_material/material-topic-03/15-functions-advanced.html#review-what-is-a-function",
    "href": "lecture_material/material-topic-03/15-functions-advanced.html#review-what-is-a-function",
    "title": "Functions (advanced)",
    "section": "",
    "text": "A function is a re-usable piece of code that performs some operation (typically on some input), and then typically returns a result (i.e., an output).\n\nBreaking this down:\n\nInput: a variable defined by the user that is passed into a function using the (input) syntax.\n\nAlso called an argument.\n\nOutput: the variable returned by a function after this operation is performed.\n\nIf a return value is not specified, a function will return None.\n\n\n\ndef square(x):\n    \"\"\"Returns the square of X.\"\"\"\n    return x**2\n\n\nsquare(2)\n\n4"
  },
  {
    "objectID": "lecture_material/material-topic-03/15-functions-advanced.html#goals-of-todays-lecture",
    "href": "lecture_material/material-topic-03/15-functions-advanced.html#goals-of-todays-lecture",
    "title": "Functions (advanced)",
    "section": "",
    "text": "Today we’ll be covering some more advanced topics with functions:\n\nReturning multiple values.\nNamespaces.\n\nlambda functions.\nVarying number of arguments.\n\nWe’ll also be getting more hands-on practice with functions!"
  },
  {
    "objectID": "lecture_material/material-topic-03/15-functions-advanced.html#returning-multiple-values",
    "href": "lecture_material/material-topic-03/15-functions-advanced.html#returning-multiple-values",
    "title": "Functions (advanced)",
    "section": "",
    "text": "Functions can return multiple values, or even another function.\nThis can be useful when:\n\nThe goal of a function can’t be distilled into a single value.\n\nYou want to return multiple bits of information about something, e.g., its len, its value, and so on.\n\nMultiple values can be separated with a ,.\n\n\nSuppose we wanted a function that takes two numbers as input, and returns both:\n\nTheir sum.\n\nTheir product.\n\n\ndef sum_product(a, b):\n    return a + b, a * b\n\n\nsum_product(10, 200)\n\n(210, 2000)\n\n\n\n\n\nWhat do you notice about the type of the object that gets returned when a function returns multiple values?\n\nsum_product(5, 2)\n\n(7, 10)\n\n\n\n\n\nBy default, a function will package these multiple values into a tuple.\n\nIt’s possible to return them in another form, e.g., in a structured dictionary.\nBut if you use the return a, b syntax, a and b will returned like: (a, b)"
  },
  {
    "objectID": "lecture_material/material-topic-03/15-functions-advanced.html#namespaces",
    "href": "lecture_material/material-topic-03/15-functions-advanced.html#namespaces",
    "title": "Functions (advanced)",
    "section": "",
    "text": "A namespace is the “space” where a given set of variable names have been declared.\n\nPython has several types of namespaces:\n\nBuilt-in: Built-in objects within Python (e.g., Exceptions, lists, and more). These can be accessed from anywhere.\n\nGlobal: Any objects defined in the main program. These can be accessed anywhere in the main program once you’ve defined them, but not in another Jupyter notebook, etc.\nLocal: If you define new variables within a function, those variables can only be accessed within the “scope” of that function.\n\n\n\n\nSo far, we’ve mostly been working with variables defined in the global namespace.\n\nI.e., once we define a variable in a notebook (and run that cell), we can reference it in another cell.\n\n\n## define global variable\nmy_var = 2\n\n\n## reference global variable\nprint(my_var)\n\n2\n\n\n\n\n\nIf you declare a variable within a function definition, that variable does not persist outside the scope of that function.\nIn the function below, we declare a new variable called answer, which is eventually returned.\n\nHowever, the variable itself does not exist outside the function.\n\n\ndef exponentiate(num, exp):\n    ### \"answer\" is a new variable \n    answer = num ** exp\n    return answer\n\n\n### This will throw an error\nprint(answer)\n\nNameError: name 'answer' is not defined\n\n\n\n\n\nIf you’ve defined a variable in the global namespace, you can reference it inside a function.\n\nWord of caution ⚠️: this can sometimes make for confusing code.\n\n\n## define global variable\nmy_var = 2\n## define function\ndef add_two(x):\n    ## references my_var\n    return x + my_var\n\nadd_two(2)\n\n4\n\n\n\n\n\nWhat would value of new_var be after running the code below?\nWhat about test_var?\n\ntest_var = 2\ndef test_func(x):\n    test_var = x ** 2\n    return test_var\nnew_var = test_func(5)\n\n\n\n\nThe global variable test_var is unaltered by test_func.\n\ntest_var = 2 ## global variable\ndef test_func(x):\n    test_var = x ** 2\n    return test_var\nnew_var = test_func(5)\nprint(new_var)\nprint(test_var)\n\n25\n2\n\n\n\n\n\nRemember that you can check which variables are defined using whos.\n\nwhos\n\nVariable       Type        Data/Info\n------------------------------------\nadd_two        function    &lt;function add_two at 0x7fd2f2e8bb80&gt;\nexponentiate   function    &lt;function exponentiate at 0x7fd2d0133d30&gt;\nmy_var         int         2\nnew_var        int         25\nsquare         function    &lt;function square at 0x7fd2d0133820&gt;\ntest_func      function    &lt;function test_func at 0x7fd2f2e5f1f0&gt;\ntest_var       int         2"
  },
  {
    "objectID": "lecture_material/material-topic-03/15-functions-advanced.html#lambda-functions",
    "href": "lecture_material/material-topic-03/15-functions-advanced.html#lambda-functions",
    "title": "Functions (advanced)",
    "section": "",
    "text": "So far, we’ve focused on creating functions using the def func_name(...) syntax.\nHowever, Python also has something called lambda functions.\n\nSyntax: lambda x: ....\nMain advantage: can be written in a single line, best if you want a simple function.\n\nExcellent for passing as arguments into other functions, such as sorted.\n\n\n\nsquare = lambda x: x**2\nprint(square(2))\nprint(square(4))\n\n4\n16\n\n\nIn theory, lambda functions can have multiple arguments.\n\nexp = lambda x, y: x*y\nprint(exp(2, 3))\n\n6\n\n\n\n\nConvert the function below into a lambda function.\n\ndef add_one(x):\n    ## Adds 1 to x\n    return x + 1\n\n### Your code here\n\n\n\n\n\n# Lambda solution\nadd_one = lambda x: x + 1\nprint(add_one(1))\n\n2\n\n\n\n\n\n\nlambda is an easy, efficient way to define a simple function.\n\nIn practice, lambda is most useful when defining functions “on the fly”.\n\nAs arguments to pass into another function.\nAs nested functions within another function."
  },
  {
    "objectID": "lecture_material/material-topic-03/15-functions-advanced.html#varying-number-of-arguments",
    "href": "lecture_material/material-topic-03/15-functions-advanced.html#varying-number-of-arguments",
    "title": "Functions (advanced)",
    "section": "",
    "text": "So far, we’ve assumed that we know how many arguments will be passed into a function at any given time. But this isn’t always the case.\nFortunately, Python gives us two ways to handle an arbitrary number of arguments:\n\n*args: allows a function to receive an arbitrary number of (positional) arguments, which can be “unpacked” as needed. The function treats them as a tuple.\n**kwargs: allows a function to receive a dictionary of (keyword) arguments, which can be “unpacked” as needed.\n\n\n\nThe *args syntax allows you to input an arbitrary number of arguments into a function.\n\ndef my_function(*fruits):\n    print(\"The last fruit is \" + fruits[-1] + \".\")\n\n\nmy_function(\"strawberry\")\n\nThe last fruit is strawberry.\n\n\n\nmy_function(\"strawberry\", \"apple\")\n\nThe last fruit is apple.\n\n\n\n\nHow exactly is this working? That is, what is my_function treating *fruits as?\nTry printing out fruits to see what’s going on.\n\n### Your code here\n\n\n\n\nThe *args syntax tells Python to allow an arbitrary number of arguments. Any argument ends up being packaged as a tuple, which the body of your function code can then unpack.\n\ndef my_function(*fruits):\n    print(fruits)\n\n\nmy_function(\"apple\", \"strawberry\", \"banana\")\n\n('apple', 'strawberry', 'banana')\n\n\n\n\n\n\nThe *kwargs is similar to *args, but allows for an arbitrary number of keyword arguments.\n\nThese are treated as a dict by the function.\n\n\ndef my_function(**fruits):\n    print(fruits)\n\n\n### Keyword and value are automatically placed into dictionary\nmy_function(name = \"apple\", amount = 5)\n\n{'name': 'apple', 'amount': 5}\n\n\n\n### The specific keyword can be altered as needed\nmy_function(name = \"banana\", cost = 10)\n\n{'name': 'banana', 'cost': 10}\n\n\n\n\nIn general, **kwargs is useful when you want flexibility.\nFor example, suppose you have a website, in which people can (optionally) fill out the following information:\n\nName.\nEmail.\nPhone number.\nLocation.\n\nBut because not everyone fills out every field, the function you use to store this information needs to be flexible about how many arguments it receives.\n\ndef store_user(**info):\n    ## For now, this is just a placeholder to demonstrate\n    for item in info.items():\n        print(item)\n\n\nstore_user(Name = \"Sean\", Location = \"San Diego\")\n\n('Name', 'Sean')\n('Location', 'San Diego')"
  },
  {
    "objectID": "lecture_material/material-topic-03/15-functions-advanced.html#conclusion",
    "href": "lecture_material/material-topic-03/15-functions-advanced.html#conclusion",
    "title": "Functions (advanced)",
    "section": "",
    "text": "This is the end of our unit on functions––but we’ll continue getting practice throughout the rest of the course!"
  },
  {
    "objectID": "lecture_material/material-topic-03/15-functions-advanced.html#practice-problems",
    "href": "lecture_material/material-topic-03/15-functions-advanced.html#practice-problems",
    "title": "Functions (advanced)",
    "section": "",
    "text": "One of the best ways to learn a new concept is to actually practice it. Thus, I’m including a number of practice problems at the end of this lecture, which we’ll work through.\n\n\nGoal: write a function that takes in a list of numbers as input, and finds the maximum of the list.\nThe catch: you can’t use the operator max.\nThings to consider:\n\nIf the input list is empty, you should return None.\n\nSince you can’t use max, you might consider using a for loop, checking the value of each number in turn.\n\n\n### Your code here\n\n\n\n\ndef find_max(lst):\n    if len(lst) == 0:\n        return None\n    ### Start by setting max to first item in list\n    m = lst[0]\n    ### Then iterate through each item\n    for i in lst:\n        ### if item is greater than first item...\n        if i &gt; m:\n            ### Reset max to new item\n            m = i\n    return m\n\n\nfind_max([1, 2, 10, 5])\n\n10\n\n\n\nfind_max([])\n\n\n\n\n\nGoal: write a function that takes in an arbitrary number of arguments (i.e., uses *args), and finds the maximum.\nThe catch: you can’t use the operator max.\nThings to consider:\n\nIf there are no arguments, you should return None.\n\nSince you can’t use max, you might consider using a for loop, checking the value of each number in turn.\n\n\n### Your code here\n\n\n\n\ndef find_max(*args):\n    ## if no args are presented, \"args\" = ([],)\n    if args[0] == []:\n        return None\n    ### Start by setting max to first item in list\n    m = args[0]\n    ### Then iterate through each item\n    for i in args:\n        ### if item is greater than first item...\n        if i &gt; m:\n            ### Reset max to new item\n            m = i\n    return m\n\n\nfind_max([1, 2, 10, 5])\n\n[1, 2, 10, 5]\n\n\n\nfind_max([])\n\n\n\n\n\nGoal: write a function that takes in a list of numbers, and prints the even ones.\n\n### Your code here\n\n\n\n\ndef print_even(numbers):\n    for i in numbers:\n        if i % 2 == 0:\n            print(i)\n\n\nprint_even([1, 2, 8])\n\n2\n8\n\n\n\nprint_even([104, 57])\n\n104\n\n\n\n\n\n\nSuppose we want a function that takes in a dict of Names and Heights. That is, each key is a Name, and it maps onto a Height.\nWe want the function to return the Name of the person with the largest Height, as well as the Height itself.\n\n## Can't just max...that'll return \"Sean\"\nheights = {'Sean': 67, 'Ben': 72, 'Anne': 66}\n### Your code here\n\n\n\n\ndef get_tallest(info):\n    ## Get all tuples...\n    ### turn into list so we can index into it\n    items = list(info.items())\n    ## Start by assigning tallest to first in list\n    tallest = items[0]\n    ## Then iterate through tuples...\n    for i in items:\n        ### if item is taller than initial\n        if i[1] &gt; tallest[1]:\n            ### Reset \"tallest\"\n            tallest = i\n    return tallest\n\n\nget_tallest(heights)\n\n('Ben', 72)\n\n\n\nget_tallest({'A': 20, 'B': 10, 'C': 200})\n\n('C', 200)"
  },
  {
    "objectID": "lecture_material/material-topic-03/06-loops.html",
    "href": "lecture_material/material-topic-03/06-loops.html",
    "title": "Control Flow: Loops",
    "section": "",
    "text": "Control flow, revisited.\n\nWhat is a loop? What is iteration?\nfor loops in action.\n\n\n\n\nBy default, Python commands are executed in a linear order, i.e., line by line.\n- Unless we tell Python otherwise, each line will be executed once.\nBut sometimes it’s useful to control: 1. Which lines get executed? 2. How many times do those lines get executed?\nThese control “parameters” correspond, roughly, to:\n\nConditional statements (if/elif/else).\n\nLoops (e.g., for or while).\n\n\n\n\n\nA loop is a way to repeat the same piece of code multiple times.\n\n\n\nRule of thumb: if you find yourself copying/pasting the same code many different times…you might think about using a loop!\nMore generally: in programming, we often want to execute the same action multiple times.\n\nApply the same instruction to every item on a list.\n\nContinue running some code until a condition is met.\n\n\n\n\n\nIteration simply means: repeating some sequence of instructions until a specific end result is achieved.\n\nThat “end result” could be any number of things:\n\nYou reach the end of a list.\n\nSome other condition is met.\n\nIn general, we’ll use the term iterate to mean “do over and over again”.\n\nThe expression “iterate over a list” means: Do X to every item of that list.\n\n\n\n\nThere are two main kinds of loops you’ll use in Python: for loops and while loops.\n\nA for loop runs some code for every item of a list or sequence.\nA while loop runs a piece of code until some condition is met (e.g., while condition == True).\n\nToday, we’ll focus on for loops.\n\n\n\n\nWe haven’t discussed list objects in detail yet, but we will introduce them as part of the lecture today.\n\nHigh-level:\n\nA list is an ordered collection of elements.\n\nDifferent elements can be accessed by indexing through the list.\n\n\n\n## This is a list in Python\nnumbers = [1, 2, 3]\n### This is how we \"index\" particular elements in that list\nnumbers[0]\n\n1\n\n\n\n\n\n\n\nA for loop is used for iterating over a sequence.\n\nA for loop uses the syntax: for elem in list_name: ...\n\n## This is a list in Python\nnumbers = [1, 2, 3]\n### This is a for loop\nfor number in numbers:  \n    print(number)\n\n1\n2\n3\n\n\n\n\nWhat do you expect the following code block to do, if you executed it?\nfor l in \"apple\":\n    print(l)\nA for loop tells Python to iterate over each element in a sequence.\nThe content of that loop––the indented code underneath the for statement––tells Python what to do each time.\n\nfor l in \"apple\":\n    print(l)\n\na\np\np\nl\ne\n\n\n\n\n\nApproximately how many lines of code would we need if we wanted to print each element of a list with 100 items, without using any kind of loop? (I.e., copy/paste the same code?)\n\n\n\n\n### This code prints each number independently\nnumbers = [1, 2, 3, 4, 5]\nprint(numbers[0])\nprint(numbers[1])\nprint(numbers[2])\nprint(numbers[3])\nprint(numbers[4])\n\n1\n2\n3\n4\n5\n\n\n\n### This code iterates through the list\nnumbers = [1, 2, 3, 4, 5]\nfor number in numbers:\n    print(number)\n\n1\n2\n3\n4\n5\n\n\n\n\n\n\nYou can use a for loop on any sequence.\n\nWe’ll talk more about sequences next week, but they include:\n\nLists, e.g., [1, 2, 10].\n\nStrings, e.g., \"apple\".\nRanges, e.g., range(10)\n\n\n\n\n\nrange is an operator used to create a range of numbers, e.g., from 0 to 100. It’s very useful if your main goal is to execute some code \\(N\\) times.\n\nNote that range(10) will return an iterable object of 10 numbers from 0 to 9.\n\nfor i in range(10):\n    print(i)\n\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\nIf you want to start at a different number (e.g., 3), you can enter that as an argument as well.\n\nfor i in range(3, 10):\n    print(i)\n\n3\n4\n5\n6\n7\n8\n9\n\n\nRemember: range will produce numbers going all the way up to \\(N - 1\\), not \\(N\\).\n\nfor i in range(5):\n    print(i)\n\n0\n1\n2\n3\n4\n\n\n\n\n\nWrite a for loop that prints out every letter in the string \"CSS\".\n\n## First, define a string using something like: word = \"CSS\"\n### YOUR CODE HERE\n\n\n\n\nWrite a for loop that prints out every letter in the string \"Computational Social Science\", except for the spaces.\nHINT: Think about how you could combine a for loop with an if statement.\n\n## First, define a string using something like: word = \"Computational Social Science\"\n### YOUR CODE HERE\n\n\n\n\n\nThe real expressive power of a for loop comes into play when we use conditional statements.\n\nRemember that an if statement allows us to run a piece of code only if some condition is met.\n\n\n\nWhy/how could an if statement be helpful when using a for loop?\n\n\n\nSuppose you are instructed to write a program that prints out all the even numbers between 1 and 11.\nBreaking the problem down:\n\nFirst, we want to iterate through a range from (1, 22).\n\nThen, we want to check if each element of that range is even.\n\nif a given element is even, we print it out.\n\n\n\nHow might we determine if a number is even?\nHint: Think about the modulo operator (%).\n\n\n\n\nfor num in range(1, 22): ## for loop\n    if num % 2 == 0:  ## conditional statement\n        print(num)  ## the code we want to execute\n\n2\n4\n6\n8\n10\n12\n14\n16\n18\n20\n\n\n\n\n\n\nSuppose you’re going grocery shopping. Here are the costs of each item:\n\ncosts = [5, 8, 4, 10, 15]\ncosts\n\n[5, 8, 4, 10, 15]\n\n\nYou want to keep your costs low, so you decide not to buy anything above $9. How would you write a for loop that:\n\nIterates through costs.\n\nTracks a final_bill variable.\n\nOnly adds items to final_bill if they’re below 9$?\n\nTry to implement this code before looking at the solution below.\n\n#### YOUR CODE HERE\n\n\n\n\n\ncosts = [5, 8, 4, 10, 15]\nfinal_bill = 0\nfor item in costs:\n    if item &lt;= 9:\n        final_bill += item\nprint(final_bill)\n\n17\n\n\n\n\n\n\nSometimes, you may want an even finer degree of control over for loops. There are two commands that give you this control:\n\ncontinue: tells the for loop to continue onto the next item in the list (i.e., without necessarily doing anything with the current item).\nbreak: cancels/stops the for loop.\n\n\n\nThe following code iterates through a range, and breaks once it gets to 5.\n\nfor num in range(1, 10):\n    if num == 5:\n        break\n    print(num)\n\n1\n2\n3\n4\n\n\n\n\n\nThe following code iterates through a range, and continues once it gets to 5 (i.e., “skips”).\n\nfor num in range(1, 10):\n    if num == 5:\n        continue\n    print(num)\n\n1\n2\n3\n4\n6\n7\n8\n9\n\n\n\n\n\nHow are break and continue different?\n\n\n\n\nJust as we can nest conditional statements, we can also nest loops.\n\nA nested loop is a for or while loop contained within another for or while loop.\n\nAs with nested if statements, it’s very important to be careful about your indentation.\n\n\n\nprofessors = ['Trott', 'Ellis', 'Fleischer']\nclasses = ['COGS 18', 'CSS 1']\nfor cl in classes:\n    for prof in professors:\n        print(\"Is {cl} taught by {prof}?\".format(cl = cl, prof = prof))\n\nIs COGS 18 taught by Trott?\nIs COGS 18 taught by Ellis?\nIs COGS 18 taught by Fleischer?\nIs CSS 1 taught by Trott?\nIs CSS 1 taught by Ellis?\nIs CSS 1 taught by Fleischer?\n\n\n\n\n\nNote: The end = \" \" parameter in the print function just tells Python not to print the str on a new line.\n\nfor i in range(1, 6):\n    for j in range(1, i + 1):\n        print(\"*\", end=\" \")\n    print(\" \")\n\n*  \n* *  \n* * *  \n* * * *  \n* * * * *  \n\n\n\n\n\n\nNested for loops can take a very long to execute if:\n\nYour lists are very long.\n\nYou have many, many levels of nesting.\n\n\nTechnically, the code in a nested for loop will run \\(N * M\\) times, where \\(N\\) is the length of the outer loop, and \\(M\\) is the length of the inner loop.\n\nThis is beyond this course, but making programs more efficient is an important part of Computer Science.\n\n\n\n\n\n\n\n\nWrite a for loop to count the number of vowels in a string. The code block below starts with a list of vowels alreay, which you can use to cross-reference when iterating through a string.\nHint: If you’re feeling extra ambitious, you might think about how to handle upper-case vowels.\n\nvowels = ['a', 'e', 'i', 'o', 'u']\nexample_string = \"CSS is great\"\n### Your code here\n\n\n\n\nWrite a for loop that:\n\nIterates through a list of numbers.\n\nif the number (e.g., i) is even, iterates through a nested for loop of all those same numbers, and…\n\nif a given number is odd and larger than i, prints out the sum of those numbers.\n\n\nHint: Remember that % can be used to figure out whether a given number is divisible by 2 (e.g., 4 % 2 == 0).\n\n### Your code here\n\n\n\n\n\n### Practice 1\nvowels = ['a', 'e', 'i', 'o', 'u']\nexample_string = \"CSS is great\"\nnum_vowels = 0\nfor l in example_string:\n    if l.lower() in vowels:\n        num_vowels += 1\nprint(str(num_vowels) + \" vowels in '{x}'\".format(x = example_string))\n\n3 vowels in 'CSS is great'\n\n\n\n### Practice 2\nnumbers = range(1, 10)\nfor num in numbers:\n    if num % 2 == 0:\n        for num2 in numbers:\n            if num2 % 2 == 1 and num2 &gt; num:\n                print(\"{x} + {y} = {z}\".format(x = num,\n                                               y = num2,\n                                               z = num + num2))\n\n2 + 3 = 5\n2 + 5 = 7\n2 + 7 = 9\n2 + 9 = 11\n4 + 5 = 9\n4 + 7 = 11\n4 + 9 = 13\n6 + 7 = 13\n6 + 9 = 15\n8 + 9 = 17\n\n\n\n\n\n\nThat was a (hopefully somewhat gentle) introduction to for loops. If you’re feeling like you want more practice:\n\nW3 schools, as always, has some good practice problems.\n\nNext lecture we’ll cover a new kind of loop: a while loop."
  },
  {
    "objectID": "lecture_material/material-topic-03/06-loops.html#goals-of-this-lecture",
    "href": "lecture_material/material-topic-03/06-loops.html#goals-of-this-lecture",
    "title": "Control Flow: Loops",
    "section": "",
    "text": "Control flow, revisited.\n\nWhat is a loop? What is iteration?\nfor loops in action."
  },
  {
    "objectID": "lecture_material/material-topic-03/06-loops.html#control-flow-revisited",
    "href": "lecture_material/material-topic-03/06-loops.html#control-flow-revisited",
    "title": "Control Flow: Loops",
    "section": "",
    "text": "By default, Python commands are executed in a linear order, i.e., line by line.\n- Unless we tell Python otherwise, each line will be executed once.\nBut sometimes it’s useful to control: 1. Which lines get executed? 2. How many times do those lines get executed?\nThese control “parameters” correspond, roughly, to:\n\nConditional statements (if/elif/else).\n\nLoops (e.g., for or while)."
  },
  {
    "objectID": "lecture_material/material-topic-03/06-loops.html#loops-explained",
    "href": "lecture_material/material-topic-03/06-loops.html#loops-explained",
    "title": "Control Flow: Loops",
    "section": "",
    "text": "A loop is a way to repeat the same piece of code multiple times.\n\n\n\nRule of thumb: if you find yourself copying/pasting the same code many different times…you might think about using a loop!\nMore generally: in programming, we often want to execute the same action multiple times.\n\nApply the same instruction to every item on a list.\n\nContinue running some code until a condition is met.\n\n\n\n\n\nIteration simply means: repeating some sequence of instructions until a specific end result is achieved.\n\nThat “end result” could be any number of things:\n\nYou reach the end of a list.\n\nSome other condition is met.\n\nIn general, we’ll use the term iterate to mean “do over and over again”.\n\nThe expression “iterate over a list” means: Do X to every item of that list.\n\n\n\n\nThere are two main kinds of loops you’ll use in Python: for loops and while loops.\n\nA for loop runs some code for every item of a list or sequence.\nA while loop runs a piece of code until some condition is met (e.g., while condition == True).\n\nToday, we’ll focus on for loops.\n\n\n\n\nWe haven’t discussed list objects in detail yet, but we will introduce them as part of the lecture today.\n\nHigh-level:\n\nA list is an ordered collection of elements.\n\nDifferent elements can be accessed by indexing through the list.\n\n\n\n## This is a list in Python\nnumbers = [1, 2, 3]\n### This is how we \"index\" particular elements in that list\nnumbers[0]\n\n1"
  },
  {
    "objectID": "lecture_material/material-topic-03/06-loops.html#for-loops-in-action",
    "href": "lecture_material/material-topic-03/06-loops.html#for-loops-in-action",
    "title": "Control Flow: Loops",
    "section": "",
    "text": "A for loop is used for iterating over a sequence.\n\nA for loop uses the syntax: for elem in list_name: ...\n\n## This is a list in Python\nnumbers = [1, 2, 3]\n### This is a for loop\nfor number in numbers:  \n    print(number)\n\n1\n2\n3\n\n\n\n\nWhat do you expect the following code block to do, if you executed it?\nfor l in \"apple\":\n    print(l)\nA for loop tells Python to iterate over each element in a sequence.\nThe content of that loop––the indented code underneath the for statement––tells Python what to do each time.\n\nfor l in \"apple\":\n    print(l)\n\na\np\np\nl\ne\n\n\n\n\n\nApproximately how many lines of code would we need if we wanted to print each element of a list with 100 items, without using any kind of loop? (I.e., copy/paste the same code?)\n\n\n\n\n### This code prints each number independently\nnumbers = [1, 2, 3, 4, 5]\nprint(numbers[0])\nprint(numbers[1])\nprint(numbers[2])\nprint(numbers[3])\nprint(numbers[4])\n\n1\n2\n3\n4\n5\n\n\n\n### This code iterates through the list\nnumbers = [1, 2, 3, 4, 5]\nfor number in numbers:\n    print(number)\n\n1\n2\n3\n4\n5\n\n\n\n\n\n\nYou can use a for loop on any sequence.\n\nWe’ll talk more about sequences next week, but they include:\n\nLists, e.g., [1, 2, 10].\n\nStrings, e.g., \"apple\".\nRanges, e.g., range(10)\n\n\n\n\n\nrange is an operator used to create a range of numbers, e.g., from 0 to 100. It’s very useful if your main goal is to execute some code \\(N\\) times.\n\nNote that range(10) will return an iterable object of 10 numbers from 0 to 9.\n\nfor i in range(10):\n    print(i)\n\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\nIf you want to start at a different number (e.g., 3), you can enter that as an argument as well.\n\nfor i in range(3, 10):\n    print(i)\n\n3\n4\n5\n6\n7\n8\n9\n\n\nRemember: range will produce numbers going all the way up to \\(N - 1\\), not \\(N\\).\n\nfor i in range(5):\n    print(i)\n\n0\n1\n2\n3\n4\n\n\n\n\n\nWrite a for loop that prints out every letter in the string \"CSS\".\n\n## First, define a string using something like: word = \"CSS\"\n### YOUR CODE HERE\n\n\n\n\nWrite a for loop that prints out every letter in the string \"Computational Social Science\", except for the spaces.\nHINT: Think about how you could combine a for loop with an if statement.\n\n## First, define a string using something like: word = \"Computational Social Science\"\n### YOUR CODE HERE"
  },
  {
    "objectID": "lecture_material/material-topic-03/06-loops.html#loops-and-conditionals-combined",
    "href": "lecture_material/material-topic-03/06-loops.html#loops-and-conditionals-combined",
    "title": "Control Flow: Loops",
    "section": "",
    "text": "The real expressive power of a for loop comes into play when we use conditional statements.\n\nRemember that an if statement allows us to run a piece of code only if some condition is met.\n\n\n\nWhy/how could an if statement be helpful when using a for loop?\n\n\n\nSuppose you are instructed to write a program that prints out all the even numbers between 1 and 11.\nBreaking the problem down:\n\nFirst, we want to iterate through a range from (1, 22).\n\nThen, we want to check if each element of that range is even.\n\nif a given element is even, we print it out.\n\n\n\nHow might we determine if a number is even?\nHint: Think about the modulo operator (%).\n\n\n\n\nfor num in range(1, 22): ## for loop\n    if num % 2 == 0:  ## conditional statement\n        print(num)  ## the code we want to execute\n\n2\n4\n6\n8\n10\n12\n14\n16\n18\n20\n\n\n\n\n\n\nSuppose you’re going grocery shopping. Here are the costs of each item:\n\ncosts = [5, 8, 4, 10, 15]\ncosts\n\n[5, 8, 4, 10, 15]\n\n\nYou want to keep your costs low, so you decide not to buy anything above $9. How would you write a for loop that:\n\nIterates through costs.\n\nTracks a final_bill variable.\n\nOnly adds items to final_bill if they’re below 9$?\n\nTry to implement this code before looking at the solution below.\n\n#### YOUR CODE HERE\n\n\n\n\n\ncosts = [5, 8, 4, 10, 15]\nfinal_bill = 0\nfor item in costs:\n    if item &lt;= 9:\n        final_bill += item\nprint(final_bill)\n\n17"
  },
  {
    "objectID": "lecture_material/material-topic-03/06-loops.html#controlling-for-loops",
    "href": "lecture_material/material-topic-03/06-loops.html#controlling-for-loops",
    "title": "Control Flow: Loops",
    "section": "",
    "text": "Sometimes, you may want an even finer degree of control over for loops. There are two commands that give you this control:\n\ncontinue: tells the for loop to continue onto the next item in the list (i.e., without necessarily doing anything with the current item).\nbreak: cancels/stops the for loop.\n\n\n\nThe following code iterates through a range, and breaks once it gets to 5.\n\nfor num in range(1, 10):\n    if num == 5:\n        break\n    print(num)\n\n1\n2\n3\n4\n\n\n\n\n\nThe following code iterates through a range, and continues once it gets to 5 (i.e., “skips”).\n\nfor num in range(1, 10):\n    if num == 5:\n        continue\n    print(num)\n\n1\n2\n3\n4\n6\n7\n8\n9\n\n\n\n\n\nHow are break and continue different?"
  },
  {
    "objectID": "lecture_material/material-topic-03/06-loops.html#nested-for-loops",
    "href": "lecture_material/material-topic-03/06-loops.html#nested-for-loops",
    "title": "Control Flow: Loops",
    "section": "",
    "text": "Just as we can nest conditional statements, we can also nest loops.\n\nA nested loop is a for or while loop contained within another for or while loop.\n\nAs with nested if statements, it’s very important to be careful about your indentation.\n\n\n\nprofessors = ['Trott', 'Ellis', 'Fleischer']\nclasses = ['COGS 18', 'CSS 1']\nfor cl in classes:\n    for prof in professors:\n        print(\"Is {cl} taught by {prof}?\".format(cl = cl, prof = prof))\n\nIs COGS 18 taught by Trott?\nIs COGS 18 taught by Ellis?\nIs COGS 18 taught by Fleischer?\nIs CSS 1 taught by Trott?\nIs CSS 1 taught by Ellis?\nIs CSS 1 taught by Fleischer?\n\n\n\n\n\nNote: The end = \" \" parameter in the print function just tells Python not to print the str on a new line.\n\nfor i in range(1, 6):\n    for j in range(1, i + 1):\n        print(\"*\", end=\" \")\n    print(\" \")\n\n*  \n* *  \n* * *  \n* * * *  \n* * * * *  \n\n\n\n\n\n\nNested for loops can take a very long to execute if:\n\nYour lists are very long.\n\nYou have many, many levels of nesting.\n\n\nTechnically, the code in a nested for loop will run \\(N * M\\) times, where \\(N\\) is the length of the outer loop, and \\(M\\) is the length of the inner loop.\n\nThis is beyond this course, but making programs more efficient is an important part of Computer Science."
  },
  {
    "objectID": "lecture_material/material-topic-03/06-loops.html#some-final-challenging-practice",
    "href": "lecture_material/material-topic-03/06-loops.html#some-final-challenging-practice",
    "title": "Control Flow: Loops",
    "section": "",
    "text": "Write a for loop to count the number of vowels in a string. The code block below starts with a list of vowels alreay, which you can use to cross-reference when iterating through a string.\nHint: If you’re feeling extra ambitious, you might think about how to handle upper-case vowels.\n\nvowels = ['a', 'e', 'i', 'o', 'u']\nexample_string = \"CSS is great\"\n### Your code here\n\n\n\n\nWrite a for loop that:\n\nIterates through a list of numbers.\n\nif the number (e.g., i) is even, iterates through a nested for loop of all those same numbers, and…\n\nif a given number is odd and larger than i, prints out the sum of those numbers.\n\n\nHint: Remember that % can be used to figure out whether a given number is divisible by 2 (e.g., 4 % 2 == 0).\n\n### Your code here\n\n\n\n\n\n### Practice 1\nvowels = ['a', 'e', 'i', 'o', 'u']\nexample_string = \"CSS is great\"\nnum_vowels = 0\nfor l in example_string:\n    if l.lower() in vowels:\n        num_vowels += 1\nprint(str(num_vowels) + \" vowels in '{x}'\".format(x = example_string))\n\n3 vowels in 'CSS is great'\n\n\n\n### Practice 2\nnumbers = range(1, 10)\nfor num in numbers:\n    if num % 2 == 0:\n        for num2 in numbers:\n            if num2 % 2 == 1 and num2 &gt; num:\n                print(\"{x} + {y} = {z}\".format(x = num,\n                                               y = num2,\n                                               z = num + num2))\n\n2 + 3 = 5\n2 + 5 = 7\n2 + 7 = 9\n2 + 9 = 11\n4 + 5 = 9\n4 + 7 = 11\n4 + 9 = 13\n6 + 7 = 13\n6 + 9 = 15\n8 + 9 = 17"
  },
  {
    "objectID": "lecture_material/material-topic-03/06-loops.html#conclusion",
    "href": "lecture_material/material-topic-03/06-loops.html#conclusion",
    "title": "Control Flow: Loops",
    "section": "",
    "text": "That was a (hopefully somewhat gentle) introduction to for loops. If you’re feeling like you want more practice:\n\nW3 schools, as always, has some good practice problems.\n\nNext lecture we’ll cover a new kind of loop: a while loop."
  },
  {
    "objectID": "lecture_material/material-topic-03/14-functions.html",
    "href": "lecture_material/material-topic-03/14-functions.html",
    "title": "Functions",
    "section": "",
    "text": "Today we’ll be focusing on functions in Python.\n\nWhat is a function? What are they good for?\nHow do you create or define a function?\n\nKey concepts: def, return, and arguments.\n\nHow do you use or call a function?\n\n\nMore details on functions:\n\nInput type.\n\nDefault argument values.\n\n\n\n\n\n\nA function is a re-usable piece of code that performs some operation (typically on some input), and then typically returns a result (i.e., an output).\n\nBreaking this down:\n\nInput: a variable defined by the user that is passed into a function using the (input) syntax.\n\nAlso called an argument.\nFunctions can have multiple arguments.\n\nOutput: the variable returned by a function after this operation is performed.\n\nIf a return value is not specified, a function will return None.\n\n\n\n\nWe’ll explore the syntax more in a bit, but this will give you a sense for what we’re talking about.\n\ndef square(x):\n    \"\"\"Returns the square of X.\"\"\"\n    return x**2\n\n\nsquare(1)\n\n1\n\n\n\nsquare(2)\n\n4\n\n\n\n\n\n\nIn principle, we could just rewrite the same code each time we want to execute that operation. So why bother defining functions at all?\nThe answer lies in modular programming.\n\nAs operations become more and more complex, it becomes unwieldy (and just inefficient) to copy/paste the same code again and again.\n\nIn modular programming, we emphasize building re-usable chunks of code.\nFunctions (and loops) are ways to re-use chunks of code that solve basic, recurring problems.\n\nLearning to think in a modular way can be hard! But it’s a helpful approach to breaking down a problem into its sub-components.\n\n\nWe’ve already encountered a number of functions in this course.\n\n\n\nInput: something to print.\n\nOutput: technically, None.\n\n“Side effects”: prints out input to designated log (by default, the terminal/Jupyter cell).\n\n\nprint(\"Hello!\")\n\nHello!\n\n\n\n\n\n\nInput: a list\nOutput: a sorted list.\n\n\nunsorted = [2, 1, 5]\nsorted(unsorted)\n\n[1, 2, 5]\n\n\n\n\n\n\n\nIn Python, a new function can be created or defined using the def keyword, followed by the name of the function.\nSee the square function definition below:\n\nFunction name: square.\nFunction arguments: x.\n\nFunction return: x ** 2.\n\n\ndef square(x):\n    \"\"\"Returns the square of X.\"\"\"\n    return x**2\n\n\n\nTo execute a function, we can reference the function name (like a variable), followed by the parentheses () and any arguments/input for the function.\n\n## Function name = square\n## Input = 2\nsquare(2)\n\n4\n\n\n\n## Function name = square\n## Input = 4\nsquare(4)\n\n16\n\n\n\n\n\nA function belongs to a special type in Python, called function.\n\ntype(square)\n\nfunction\n\n\n\n\n\nWhat if we wanted a function that did the following:\n\nif the input x is even, we square it.\n\nif the input x is odd, we just return that number.\n\n\ndef square_if_even(x):\n    \"\"\"Squares x if x is even; otherwise return x.\"\"\"\n    if x % 2 == 0: ## check if even\n        return x ** 2 ## if so, return square\n    else: ## otherwise..\n        return x ## just return x\n\n\n## 2 is even, so square it\nsquare_if_even(2)\n\n4\n\n\n\n## 3 is odd, so just return it\nsquare_if_even(3)\n\n3\n\n\n\n\n\nSo far, our functions have only had a single argument. But functions can take in many arguments.\nLet’s define a function with two inputs, which just adds those inputs together.\n\ndef add_two_numbers(num1, num2):\n    \"\"\"Adds num1 to num2.\"\"\"\n    return num1 + num2\n\n\nadd_two_numbers(1, 2)\n\n3\n\n\n\nadd_two_numbers(5, 3)\n\n8\n\n\n\n\n\nWhat would the function below produce if the input x was 25?\nMore generally: how would you describe what this function does?\n\ndef mystery_func(x):\n    if x % 5 == 0:\n        return True\n    return False\n\n\n\n\nmystery_func can be thought of as a binary “check” for whether a particular number is divisible by 5.\n\nmystery_func(25)\n\nTrue\n\n\n\nmystery_func(28)\n\nFalse\n\n\n\n\n\nWrite a function that takes a name as input and returns the formatted str: \"My name is {name}.\"\nThe code below can get you started:\ndef hello(name):\n### your code here\n\n# Your code here\n\n\n\n\n\ndef hello(name):\n    return \"My name is {name}\".format(name=name)\n\n\nhello(\"Sean\")\n\n'My name is Sean'\n\n\n\n\n\n\nWhat we’ve learned so far:\n\nA function is a re-usable piece of code that does something.\n\nA function can take in some input and return some output.\n\nIn principle, a function can be as complex as you need (can contain if statements, for loops, etc.).\n\nWord of caution: a function should be modular.\n\nIn principle, a function also take in many different inputs and even produce multiple outputs.\n\nAgain: be careful not to make things too complex.\n\n\n\n\n\nBeyond the basics, there are several other important things to know about the arguments for a function:\n\nIt’s important to be aware of what type your function expects as an argument.\nArguments can have default values.\n\nSome arguments can be accessed with a keyword, while others are positional arguments.\n\n\n\nSome languages, like Java, require that you specify the type of an argument (and variable names, etc.).\nPython doesn’t require that, but it’s still important to be aware of.\n\nOtherwise, you can run into a TypeError.\nIf you’re interested: Python uses something called duck typing.\n\n\n\nHere, the square function performs an operation with x that requires x to be an int.\n\ndef square(x):\n    return x ** 2\nsquare(\"two\")\n\nTypeError: unsupported operand type(s) for ** or pow(): 'str' and 'int'\n\n\n\n\n\nIn practice, the best way to avoid a TypeError is to document your code.\n\nIn the docstring under a function, you can write details about what the function expects, e.g., whether the input is an int, a str, etc.\n\n\ndef square(x):\n    \"\"\"\n    Parameters\n    ------\n    x: int\n      number to be squared\n    \n    Returns\n    -------\n    int\n      square of x\n    \"\"\"\n    return x ** 2\n\n\n\n\nWill the function below result in an error if you called it on the input \"test\"? Why or why not?\n\ndef mystery_func(x):\n    return x ** 3\n\n\n\n\nAs before, Python throws an error, because there’s no way to raise a str to the power 3.\n\nmystery_func(\"test\")\n\nTypeError: unsupported operand type(s) for ** or pow(): 'str' and 'int'\n\n\n\n\n\n\n\nA default value is the value taken on by an argument by default. If no other value is specified, this is the value assumed by the function.\n\nIn the function definition, a default value can be specified by setting: arg_name = default_value.\n\nIn the example below, name is required.\nBut major has a default value of \"COGS\".\n\n\ndef my_info(name, major = \"COGS\"):\n    return \"My name is {name}, and my major is {major}.\".format(name = name, major = major)\n\nEven if we don’t specify a value for major, the function will run just fine––it just uses the default value.\n\nmy_info(\"Sean\")\n\n'My name is Sean, and my major is COGS.'\n\n\n\n\nA default value can be overridden in the call to the function itself.\n\nNote that this can reference the argument name (major), or just occupy the correct position in the series of arguments. (More on this later.)\n\n\nmy_info(\"Sean\", major = \"LIGN\")\n\n'My name is Sean, and my major is LIGN.'\n\n\n\nmy_info(\"Sean\", \"LIGN\")\n\n'My name is Sean, and my major is LIGN.'\n\n\n\n\n\nIf an argument doesn’t have a default, the function will throw an error if you don’t pass in enough arguments.\n\nmy_info()\n\nTypeError: my_info() missing 1 required positional argument: 'name'\n\n\n\n\n\nWhy does the following code not throw an error?\n\nmy_info(\"LIGN\")\n\n'My name is LIGN, and my major is COGS.'\n\n\n\n\n\n\nAn argument to a function can be indicated using either:\n\nIts position, i.e., in the list of possible arguments.\nA keyword, i.e., the name of that argument.\n\nA positional argument uses the relative position of the arguments to determine which is which.\n\ndef exponentiate(num, exp):\n    return num ** exp\n\n\n## Raise 2 ^ 3\nexponentiate(2, 3)\n\n8\n\n\n\n## Raise 3 ^ 2\nexponentiate(3, 2)\n\n9\n\n\nA keyword argument uses the name of the argument to determine which is which.\n\nEven if the positions are swapped, the keyword will take priority.\n(Note that the best practice is to keep the order consistent, however.)\n\n\n## Raise 2 ^ 3\nexponentiate(num = 2, exp = 3)\n\n8\n\n\n\n## Raise 2 ^ 3\nexponentiate(exp = 3, num = 2)\n\n8\n\n\n\n\n\nOnce you’ve used a keyword argument, you can’t rely on position for any arguments coming after that keyword. This will throw a SyntaxError.\nHowever, a positional argument can come before a keyword argument.\n\n\n## This is incorrect\nexponentiate(num = 2, 3)\n\nSyntaxError: positional argument follows keyword argument (1637508814.py, line 2)\n\n\n\n## This is fine\nexponentiate(2, exp = 3)\n\n8\n\n\n\n\n\n\n\nThis concludes our initial introduction to functions. If there is time, there are also two more challenging practice problems below to work on.\n\n\n\n\n\nWrite a function called fizzbuzz. It should take in a single argument, x, and follow this behavior:\n\nIf x is divisible by both 3 and 5, return the str \"fizzbuzz\".\nIf x is divisible by only 3 (and not 5), return \"fizz\").\nIf x is divisible by only 5 (and not 3), return \"buzz\").\n\nNote: this is part of a famous problem in coding interviews!\n\ndef fizzbuzz(x):\n    pass ## Replace this with your code\n\n\n\n\nWrite a function called product, which takes a list (lst) as input, and returns the product of every item in the list.\n\ndef product(lst):\n    pass ## Replace this with your code\n\n\n\n\n\n\n\n\ndef fizzbuzz(x):\n    if x % 5 == 0 and x % 3 == 0:\n        return \"fizzbuzz\"\n    if x % 3 == 0: \n        return \"fizz\"\n    if x % 5 == 0:\n        return \"buzz\"\n\n\nfizzbuzz(15)\n\n'fizzbuzz'\n\n\n\nfizzbuzz(25)\n\n'buzz'\n\n\n\n\n\n\ndef product(lst):\n    prod = 1\n    for i in lst:\n        prod = prod * i\n    return prod\n\n\nproduct([1, 2, 3])\n\n6\n\n\n\nproduct([9, 10, 0])\n\n0"
  },
  {
    "objectID": "lecture_material/material-topic-03/14-functions.html#goals-of-todays-lecture",
    "href": "lecture_material/material-topic-03/14-functions.html#goals-of-todays-lecture",
    "title": "Functions",
    "section": "",
    "text": "Today we’ll be focusing on functions in Python.\n\nWhat is a function? What are they good for?\nHow do you create or define a function?\n\nKey concepts: def, return, and arguments.\n\nHow do you use or call a function?\n\n\nMore details on functions:\n\nInput type.\n\nDefault argument values."
  },
  {
    "objectID": "lecture_material/material-topic-03/14-functions.html#what-is-a-function",
    "href": "lecture_material/material-topic-03/14-functions.html#what-is-a-function",
    "title": "Functions",
    "section": "",
    "text": "A function is a re-usable piece of code that performs some operation (typically on some input), and then typically returns a result (i.e., an output).\n\nBreaking this down:\n\nInput: a variable defined by the user that is passed into a function using the (input) syntax.\n\nAlso called an argument.\nFunctions can have multiple arguments.\n\nOutput: the variable returned by a function after this operation is performed.\n\nIf a return value is not specified, a function will return None.\n\n\n\n\nWe’ll explore the syntax more in a bit, but this will give you a sense for what we’re talking about.\n\ndef square(x):\n    \"\"\"Returns the square of X.\"\"\"\n    return x**2\n\n\nsquare(1)\n\n1\n\n\n\nsquare(2)\n\n4"
  },
  {
    "objectID": "lecture_material/material-topic-03/14-functions.html#why-functions",
    "href": "lecture_material/material-topic-03/14-functions.html#why-functions",
    "title": "Functions",
    "section": "",
    "text": "In principle, we could just rewrite the same code each time we want to execute that operation. So why bother defining functions at all?\nThe answer lies in modular programming.\n\nAs operations become more and more complex, it becomes unwieldy (and just inefficient) to copy/paste the same code again and again.\n\nIn modular programming, we emphasize building re-usable chunks of code.\nFunctions (and loops) are ways to re-use chunks of code that solve basic, recurring problems.\n\nLearning to think in a modular way can be hard! But it’s a helpful approach to breaking down a problem into its sub-components.\n\n\nWe’ve already encountered a number of functions in this course.\n\n\n\nInput: something to print.\n\nOutput: technically, None.\n\n“Side effects”: prints out input to designated log (by default, the terminal/Jupyter cell).\n\n\nprint(\"Hello!\")\n\nHello!\n\n\n\n\n\n\nInput: a list\nOutput: a sorted list.\n\n\nunsorted = [2, 1, 5]\nsorted(unsorted)\n\n[1, 2, 5]"
  },
  {
    "objectID": "lecture_material/material-topic-03/14-functions.html#defining-a-function",
    "href": "lecture_material/material-topic-03/14-functions.html#defining-a-function",
    "title": "Functions",
    "section": "",
    "text": "In Python, a new function can be created or defined using the def keyword, followed by the name of the function.\nSee the square function definition below:\n\nFunction name: square.\nFunction arguments: x.\n\nFunction return: x ** 2.\n\n\ndef square(x):\n    \"\"\"Returns the square of X.\"\"\"\n    return x**2\n\n\n\nTo execute a function, we can reference the function name (like a variable), followed by the parentheses () and any arguments/input for the function.\n\n## Function name = square\n## Input = 2\nsquare(2)\n\n4\n\n\n\n## Function name = square\n## Input = 4\nsquare(4)\n\n16\n\n\n\n\n\nA function belongs to a special type in Python, called function.\n\ntype(square)\n\nfunction\n\n\n\n\n\nWhat if we wanted a function that did the following:\n\nif the input x is even, we square it.\n\nif the input x is odd, we just return that number.\n\n\ndef square_if_even(x):\n    \"\"\"Squares x if x is even; otherwise return x.\"\"\"\n    if x % 2 == 0: ## check if even\n        return x ** 2 ## if so, return square\n    else: ## otherwise..\n        return x ## just return x\n\n\n## 2 is even, so square it\nsquare_if_even(2)\n\n4\n\n\n\n## 3 is odd, so just return it\nsquare_if_even(3)\n\n3\n\n\n\n\n\nSo far, our functions have only had a single argument. But functions can take in many arguments.\nLet’s define a function with two inputs, which just adds those inputs together.\n\ndef add_two_numbers(num1, num2):\n    \"\"\"Adds num1 to num2.\"\"\"\n    return num1 + num2\n\n\nadd_two_numbers(1, 2)\n\n3\n\n\n\nadd_two_numbers(5, 3)\n\n8\n\n\n\n\n\nWhat would the function below produce if the input x was 25?\nMore generally: how would you describe what this function does?\n\ndef mystery_func(x):\n    if x % 5 == 0:\n        return True\n    return False\n\n\n\n\nmystery_func can be thought of as a binary “check” for whether a particular number is divisible by 5.\n\nmystery_func(25)\n\nTrue\n\n\n\nmystery_func(28)\n\nFalse\n\n\n\n\n\nWrite a function that takes a name as input and returns the formatted str: \"My name is {name}.\"\nThe code below can get you started:\ndef hello(name):\n### your code here\n\n# Your code here\n\n\n\n\n\ndef hello(name):\n    return \"My name is {name}\".format(name=name)\n\n\nhello(\"Sean\")\n\n'My name is Sean'"
  },
  {
    "objectID": "lecture_material/material-topic-03/14-functions.html#interim-summary",
    "href": "lecture_material/material-topic-03/14-functions.html#interim-summary",
    "title": "Functions",
    "section": "",
    "text": "What we’ve learned so far:\n\nA function is a re-usable piece of code that does something.\n\nA function can take in some input and return some output.\n\nIn principle, a function can be as complex as you need (can contain if statements, for loops, etc.).\n\nWord of caution: a function should be modular.\n\nIn principle, a function also take in many different inputs and even produce multiple outputs.\n\nAgain: be careful not to make things too complex."
  },
  {
    "objectID": "lecture_material/material-topic-03/14-functions.html#function-arguments-the-details",
    "href": "lecture_material/material-topic-03/14-functions.html#function-arguments-the-details",
    "title": "Functions",
    "section": "",
    "text": "Beyond the basics, there are several other important things to know about the arguments for a function:\n\nIt’s important to be aware of what type your function expects as an argument.\nArguments can have default values.\n\nSome arguments can be accessed with a keyword, while others are positional arguments.\n\n\n\nSome languages, like Java, require that you specify the type of an argument (and variable names, etc.).\nPython doesn’t require that, but it’s still important to be aware of.\n\nOtherwise, you can run into a TypeError.\nIf you’re interested: Python uses something called duck typing.\n\n\n\nHere, the square function performs an operation with x that requires x to be an int.\n\ndef square(x):\n    return x ** 2\nsquare(\"two\")\n\nTypeError: unsupported operand type(s) for ** or pow(): 'str' and 'int'\n\n\n\n\n\nIn practice, the best way to avoid a TypeError is to document your code.\n\nIn the docstring under a function, you can write details about what the function expects, e.g., whether the input is an int, a str, etc.\n\n\ndef square(x):\n    \"\"\"\n    Parameters\n    ------\n    x: int\n      number to be squared\n    \n    Returns\n    -------\n    int\n      square of x\n    \"\"\"\n    return x ** 2\n\n\n\n\nWill the function below result in an error if you called it on the input \"test\"? Why or why not?\n\ndef mystery_func(x):\n    return x ** 3\n\n\n\n\nAs before, Python throws an error, because there’s no way to raise a str to the power 3.\n\nmystery_func(\"test\")\n\nTypeError: unsupported operand type(s) for ** or pow(): 'str' and 'int'\n\n\n\n\n\n\n\nA default value is the value taken on by an argument by default. If no other value is specified, this is the value assumed by the function.\n\nIn the function definition, a default value can be specified by setting: arg_name = default_value.\n\nIn the example below, name is required.\nBut major has a default value of \"COGS\".\n\n\ndef my_info(name, major = \"COGS\"):\n    return \"My name is {name}, and my major is {major}.\".format(name = name, major = major)\n\nEven if we don’t specify a value for major, the function will run just fine––it just uses the default value.\n\nmy_info(\"Sean\")\n\n'My name is Sean, and my major is COGS.'\n\n\n\n\nA default value can be overridden in the call to the function itself.\n\nNote that this can reference the argument name (major), or just occupy the correct position in the series of arguments. (More on this later.)\n\n\nmy_info(\"Sean\", major = \"LIGN\")\n\n'My name is Sean, and my major is LIGN.'\n\n\n\nmy_info(\"Sean\", \"LIGN\")\n\n'My name is Sean, and my major is LIGN.'\n\n\n\n\n\nIf an argument doesn’t have a default, the function will throw an error if you don’t pass in enough arguments.\n\nmy_info()\n\nTypeError: my_info() missing 1 required positional argument: 'name'\n\n\n\n\n\nWhy does the following code not throw an error?\n\nmy_info(\"LIGN\")\n\n'My name is LIGN, and my major is COGS.'\n\n\n\n\n\n\nAn argument to a function can be indicated using either:\n\nIts position, i.e., in the list of possible arguments.\nA keyword, i.e., the name of that argument.\n\nA positional argument uses the relative position of the arguments to determine which is which.\n\ndef exponentiate(num, exp):\n    return num ** exp\n\n\n## Raise 2 ^ 3\nexponentiate(2, 3)\n\n8\n\n\n\n## Raise 3 ^ 2\nexponentiate(3, 2)\n\n9\n\n\nA keyword argument uses the name of the argument to determine which is which.\n\nEven if the positions are swapped, the keyword will take priority.\n(Note that the best practice is to keep the order consistent, however.)\n\n\n## Raise 2 ^ 3\nexponentiate(num = 2, exp = 3)\n\n8\n\n\n\n## Raise 2 ^ 3\nexponentiate(exp = 3, num = 2)\n\n8\n\n\n\n\n\nOnce you’ve used a keyword argument, you can’t rely on position for any arguments coming after that keyword. This will throw a SyntaxError.\nHowever, a positional argument can come before a keyword argument.\n\n\n## This is incorrect\nexponentiate(num = 2, 3)\n\nSyntaxError: positional argument follows keyword argument (1637508814.py, line 2)\n\n\n\n## This is fine\nexponentiate(2, exp = 3)\n\n8"
  },
  {
    "objectID": "lecture_material/material-topic-03/14-functions.html#conclusion",
    "href": "lecture_material/material-topic-03/14-functions.html#conclusion",
    "title": "Functions",
    "section": "",
    "text": "This concludes our initial introduction to functions. If there is time, there are also two more challenging practice problems below to work on."
  },
  {
    "objectID": "lecture_material/material-topic-03/14-functions.html#practice-problems",
    "href": "lecture_material/material-topic-03/14-functions.html#practice-problems",
    "title": "Functions",
    "section": "",
    "text": "Write a function called fizzbuzz. It should take in a single argument, x, and follow this behavior:\n\nIf x is divisible by both 3 and 5, return the str \"fizzbuzz\".\nIf x is divisible by only 3 (and not 5), return \"fizz\").\nIf x is divisible by only 5 (and not 3), return \"buzz\").\n\nNote: this is part of a famous problem in coding interviews!\n\ndef fizzbuzz(x):\n    pass ## Replace this with your code\n\n\n\n\nWrite a function called product, which takes a list (lst) as input, and returns the product of every item in the list.\n\ndef product(lst):\n    pass ## Replace this with your code"
  },
  {
    "objectID": "lecture_material/material-topic-03/14-functions.html#practice-problems-solutions",
    "href": "lecture_material/material-topic-03/14-functions.html#practice-problems-solutions",
    "title": "Functions",
    "section": "",
    "text": "def fizzbuzz(x):\n    if x % 5 == 0 and x % 3 == 0:\n        return \"fizzbuzz\"\n    if x % 3 == 0: \n        return \"fizz\"\n    if x % 5 == 0:\n        return \"buzz\"\n\n\nfizzbuzz(15)\n\n'fizzbuzz'\n\n\n\nfizzbuzz(25)\n\n'buzz'\n\n\n\n\n\n\ndef product(lst):\n    prod = 1\n    for i in lst:\n        prod = prod * i\n    return prod\n\n\nproduct([1, 2, 3])\n\n6\n\n\n\nproduct([9, 10, 0])\n\n0"
  },
  {
    "objectID": "syllabus_old.html",
    "href": "syllabus_old.html",
    "title": "Syllabus: QTM 350 - Data Science Computing",
    "section": "",
    "text": "This course equips students with computing skills and knowledge for data science applications. Students will gain knowledge foundations and hands-on experience with technologies such as Version Control, Project Collaboration, Data Structures and Algorithms, Database Designs, Database Management, and Cloud Computing. Prospective data scientists, statisticians, and other quantitative professionals will learn how to efficiently utilize database structures and foundational cloud services for data science by completing creative projects.\nCourse Website: https://davi-moreira.github.io/2024S_dsc_emory_qtm_350"
  },
  {
    "objectID": "syllabus_old.html#course-description",
    "href": "syllabus_old.html#course-description",
    "title": "Syllabus: QTM 350 - Data Science Computing",
    "section": "",
    "text": "This course equips students with computing skills and knowledge for data science applications. Students will gain knowledge foundations and hands-on experience with technologies such as Version Control, Project Collaboration, Data Structures and Algorithms, Database Designs, Database Management, and Cloud Computing. Prospective data scientists, statisticians, and other quantitative professionals will learn how to efficiently utilize database structures and foundational cloud services for data science by completing creative projects.\nCourse Website: https://davi-moreira.github.io/2024S_dsc_emory_qtm_350"
  },
  {
    "objectID": "syllabus_old.html#instructor-and-tas",
    "href": "syllabus_old.html#instructor-and-tas",
    "title": "Syllabus: QTM 350 - Data Science Computing",
    "section": "Instructor and TAs",
    "text": "Instructor and TAs\n\nInstructor: Professor Davi Moreira\n\nEmail: davi.moreira@emory.edu\nOffice hours: Tuesdays, 9:15am - 10:15am, or by appointment\n\nZoom link in your Course Canvas Page.\n\n\n\n\nTeaching Assistant: Michael Cao\n\nEmail: michael.cao@emory.edu\nOffice Hours: Mondays, 6-7 pm\n\nZoom link in your Course Canvas Page."
  },
  {
    "objectID": "syllabus_old.html#learning-outcomes",
    "href": "syllabus_old.html#learning-outcomes",
    "title": "Syllabus: QTM 350 - Data Science Computing",
    "section": "Learning Outcomes",
    "text": "Learning Outcomes\nBy the end of this course, students will be able to:\n\n\nDemonstrate proficiency in data science project collaboration and version control.\n\n\nUtilize advanced data storage, manipulation, and querying.\n\n\nHigh-level understanding of data structures, algorithms, and cloud computing concepts.\n\n\nCritically navigate the emergent trends in data science computing."
  },
  {
    "objectID": "syllabus_old.html#objectives",
    "href": "syllabus_old.html#objectives",
    "title": "Syllabus: QTM 350 - Data Science Computing",
    "section": "Objectives",
    "text": "Objectives\n\nConceptual Understanding: To provide students with a foundational grasp of data structures, algorithms, and data modeling techniques pertinent to SQL and NoSQL databases and data analytics.\nTechnical Proficiency: To equip students with practical skills in version control, Python programming, and database management using SQL and MySQL, enabling them to execute data manipulation and analysis tasks proficiently.\nCloud Computing Literacy: To introduce students to the fundamentals of cloud computing, focusing on models, components, and security considerations, and offer hands-on experience.\nCritical Integrated Learning: To offer a holistic educational experience that combines theoretical learning with practice, ensuring students can apply their knowledge to real-world projects and foster an awareness of emerging trends in the data science computing landscape."
  },
  {
    "objectID": "syllabus_old.html#course-references",
    "href": "syllabus_old.html#course-references",
    "title": "Syllabus: QTM 350 - Data Science Computing",
    "section": "Course References",
    "text": "Course References\n\nComputing Skills for Biologists: A toolbox with basic computational skills necessary for the course.\nElements of Data Science: a digital textbook by Allen Downey written in the form of Jupyter notebooks. It provides an introduction to data science in Python for students with limited programming experience.\nThink Python: An introduction to programming using Python.\nApplied Computing: Applied Computing is an online textbook. It provides an introduction to spreadsheets and SQL. To view the book, students need to register using the course name.\nSQL & NoSQL Databases: Models, Languages, Consistency Options, and Architectures for Big Data Management: Explores relational (SQL) and non-relational (NoSQL) databases. Covers database management, modeling, languages, consistency, architecture, and more.\nPro Git Book: A comprehensive resource for learning Git, covering everything from the basics to advanced topics by Scott Chacon and Ben Straub.\nOverview of Cloud Computing: An introductory textbook on cloud computing by Michael Wufka and Massimo Canonico."
  },
  {
    "objectID": "syllabus_old.html#additional-references",
    "href": "syllabus_old.html#additional-references",
    "title": "Syllabus: QTM 350 - Data Science Computing",
    "section": "Additional References",
    "text": "Additional References\n\nGoogle Cloud Computing Foundations: Google Cloud experts develop and maintain the Computing Foundations reference material specifically for university courses such as this to ensure it keeps pace with cloud innovation and to prepare students seeking to launch or pivot to careers in a cloud-first world.\nBig Data: Principles and best practices of scalable real-time data systems:: It describes a scalable, easy to understand approach to big data systems that can be built and run by a small team.\nVersion Control with Git: Powerful Tools and Techniques for Collaborative Software Development: This book explains how Git works and how to use it effectively. By Jon Loeliger and Matthew McCullough.\nGitHub Learning Lab: Offers a variety of exercises to get hands-on experience using Git and GitHub.\nAWS Academy Cloud Foundations (login required): AWS experts develop and maintain the Cloud Foundations reference material to ensure it keeps pace with cloud innovation and prepares students for real-world, industry challenges. This digital textbook with accompanying labs comes in the form of a Canvas page, separate from the class Canvas page."
  },
  {
    "objectID": "syllabus_old.html#assessment",
    "href": "syllabus_old.html#assessment",
    "title": "Syllabus: QTM 350 - Data Science Computing",
    "section": "Assessment",
    "text": "Assessment\nFinal grades will be based on:\n\n\n\nAssignment\nPercentage\n\n\n\n\nLecture Quizzes\n10%\n\n\nProblem Sets\n40%\n\n\nFinal Project Proposal\n5%\n\n\nFinal Project Submission\n25%\n\n\nFinal Project Presentation\n10%\n\n\nPeer Review\n10%\n\n\n\n\nLecture Quizzes\nEach lecture will be accompanied by a set of questions, available on the course’s Canvas page and to be completed individually. Students may complete these quizzes either during or after class, the due dates will be posted in the course canvas page. To accommodate the learning process, the lowest two quizzes scores will be excluded from the final grade calculation. While individual submission is mandatory, collaborative discussions are encouraged. Please note that no extensions will be granted under any circumstances, ensuring fairness and consistency in assessment for all students.\n\n\nProblem Sets\nProblem sets aligned with each topic will be assigned to solidify and apply the concepts covered. These sets are to be collaboratively developed in groups of up to three members, emphasizing the importance of code collaboration. Consequently, individual submissions will not be accepted. Assignments will be distributed via Canvas and/or GitHub, and may be formatted as either a Jupyter Notebook (.ipynb), Quarto documents (.qmd), or HTML (.html). Groups will be required to submit the complete source code of their assignments (.ipynb, .qmd, or .html). Each problem set will be meticulously evaluated, with grading based on both the accuracy and the overall quality of the work submitted. For instance, you must guarantee:\n\nAll code must run;\nEach problem set material will have its own GitHub repository;\nReadable Solutions: To facilitate effective evaluation and comprehension of the coding assignments, students must adhere to the following standards for code readability:\n\nComprehensive Commenting: All code must include thorough comments. These comments are essential as they allow the Professor and Teaching Assistants to understand the purpose and functionality of the code solely through these annotations. It is crucial that the comments are clear and concise, providing insight into the logic and purpose behind each segment of code.\n\n\nStructured Code Segmentation: Solutions should be methodically organized into distinct code chunks within Jupyter or R Markdown notebooks. For clarity on this format, refer to examples provided in class or consult with the Professor or Teaching Assistants.\n\n\nDetailed Documentation of Functions: Every function defined by a student must be accompanied by a docstring. This documentation should clearly explain the function’s purpose, describe each input argument, and outline what the function returns.\n\n\n\n\nFinal Project\nAt the heart of Data Science lies the critical skill of managing data effectively. This encompasses the ability to collect, organize, retrieve, filter, sort, and prepare data, forming the foundational steps before embarking on any comprehensive analysis. This project is your opportunity to demonstrate proficiency in applying the concepts and techniques learned throughout the course. In groups up to three members, you will be expected to showcase your competence in handling and preparing data for insightful analysis. Through this project, you will apply the principles and methodologies covered in the course.\n\nFinal Project Proposal\nEach group is required to submit a concise, yet comprehensive, two-page proposal outlining their intended project. This proposal is a crucial step in ensuring the viability and academic rigor of your planned research. Prior to its development, it is mandatory for each group to arrange a 15-minute consultation meeting with me. This meeting is intended to provide guidance, clarify objectives, and ensure alignment with course goals. To make the most of this consultation, groups must submit a draft of their project ideas in advance of the meeting. Please note that these consultation meetings will be scheduled during Week 10. It is imperative to adhere to this timeline to ensure timely feedback and guidance on your proposals.\n\n\nFinal Project Submission\nStudents are provided with two distinct opportunities to submit their final projects. The first submission is madatory for all groups and must be completed before the start of the presentation week. This phase allows for a preliminary assessment of your project. The subsequent submission is optional and should occur by the course’s last date. This opportunity is particularly beneficial for incorporating improvements based on peer review feedback received after the first submission. The final deliverable should be a comprehensive GitHub repository and a .zip file encompassing the following components:\n\nRaw Source Data: Include the raw data utilized for your project. If the data file size exceeds GitHub’s limitations, it should be exclusively contained within the .zip file.\nDetailed README: Your repository should contain a README file providing an in-depth description of each included file, covering:\n\nInputs: Detail the inputs to each file, such as raw data or files containing credentials for API access.\nFunctionality: Clearly describe the major transformations and operations performed by the file.\nOutputs: Enumerate any outputs generated by the file (e.g. cleaned datasets).\n\nData Transformation and Organization Code: Submit all code files that are used to transform and organize your data.\nData Query for Analysis: Provide the set of code files that query your dataset, rendering it suitable for addressing your chosen data analysis question.\n\nFurther details and specific requirements will be shared before Week 10 of the course.\n\n\nFinal Project Presentation\nDuring the final week of the course, each group will have a 10 to 15-minute time slot to present their project. This presentation is a vital component of your project, providing an opportunity to showcase the depth of your analysis, the insights gained, and the skills acquired throughout the course. The scheduling of presentations will be randomly defined. Specific dates and the order of presentations for each group will be assigned and communicated in advance.\nFurther details and specific requirements will be shared before Week 13 of the course.\n\n\n\nPeer Review\nIn the week of presentations, your active participation in the peer review process will be essential. Each student is expected to engage constructively in evaluating and providing feedback on their colleagues’ projects. You will be asked to thoughtfully comment on various aspects of the projects, including methodology, data structure, presentation features, and the overall effectiveness of the conveyed message. This exercise is not only a crucial part of your learning experience but also an opportunity to contribute to the academic development of your peers."
  },
  {
    "objectID": "syllabus_old.html#grading",
    "href": "syllabus_old.html#grading",
    "title": "Syllabus: QTM 350 - Data Science Computing",
    "section": "Grading",
    "text": "Grading\nEach student’s final grade will be based on the following after rounding up to the nearest point:\n\n\n\nGrade\nRange\n\n\n\n\nA\n91% – 100%\n\n\nA-\n86% – 90%\n\n\nB+\n81% – 85%\n\n\nB\n76% – 80%\n\n\nB-\n71% – 75%\n\n\nC\n66% – 70%\n\n\nD\n60% – 65%\n\n\nF\n&lt; 60%"
  },
  {
    "objectID": "syllabus_old.html#ai-policy",
    "href": "syllabus_old.html#ai-policy",
    "title": "Syllabus: QTM 350 - Data Science Computing",
    "section": "AI policy",
    "text": "AI policy\nI encourage you to use AI tools you believe will enhance your individual or group performance. Learning to use AI is a valuable and emerging skill, and I am available to provide support and assistance with these tools during office hours or by appointment.\nBe aware of the following guidelines:\n\nYou are not allowed to use AI tools during the exams.\nProviding low-effort prompts will result in low-quality outputs. You must refine your prompts to achieve desirable outcomes. Use the course knowledge for that!\nDo not blindly trust the information provided by the output. If the output contains a number, index, analysis, conclusion, or fact, assume it is incorrect and check its veracity. Any errors or omissions resulting from using the AI tool will be your responsibility. Remember, the AI tool works better for topics that you already understand.\nWhile AI is a tool, you must acknowledge its use. Always cite! Include a paragraph or note at the end of any document to mention that you used AI on its development."
  },
  {
    "objectID": "syllabus_old.html#academic-integrity",
    "href": "syllabus_old.html#academic-integrity",
    "title": "Syllabus: QTM 350 - Data Science Computing",
    "section": "Academic Integrity",
    "text": "Academic Integrity\nUpon every individual who is a part of Emory University falls the responsibility for maintaining in the life of Emory a standard of unimpeachable honor in all academic work. The Honor Code of Emory College is based on the fundamental assumption that every loyal person of the University not only will conduct his or her own life according to the dictates of the highest honor, but will also refuse to tolerate in others action which would sully the good name of the institution. Academic misconduct is an offense generally defined as any action or inaction which is offensive to the integrity and honesty of the members of the academic community. The typical sanction for a violation of the Emory Honor Code is an F in the course. Any suspected case of academic misconduct will be referred to the Emory Honor Council."
  },
  {
    "objectID": "syllabus_old.html#communication",
    "href": "syllabus_old.html#communication",
    "title": "Syllabus: QTM 350 - Data Science Computing",
    "section": "Communication",
    "text": "Communication\n\nCheck the Course Website and Canvas Page regularly to keep yourself informed with up-to-date information about the course. Also, be sure to check the course syllabus before asking any questions about the course schedule/policies.\nIf you cannot attend the office hours due to conflicts with other course schedule or attending the university-sanctioned events (proof required), email the instructor at least two days in advance to set up an appointment. Note that each appointment will be 15-minutes long, and it may be done in a small group or individually. No appointments will be allowed nearing the exam dates.\nWhen attending virtual office hours, make sure you are in a private setting with a little to no background noise. The use of headphones is strongly encouraged. This is especially true when you are discussing private matters with the instructor.\nDo not use email for asking content-related questions, and do not use Canvas messages.\nDo not email me your private stories. Keep your email brief, and you will receive a response from me within 48 hours, except for the weekends. Similarly, if you receive an email from me, you are also expected to respond within 48 hours. Set up an individual appointment to discuss such things.\nFinally, if you are experiencing situations that negatively impact your overall student life, you should immediately contact the Office of Undergraduate Education."
  },
  {
    "objectID": "syllabus_old.html#regarding-absences",
    "href": "syllabus_old.html#regarding-absences",
    "title": "Syllabus: QTM 350 - Data Science Computing",
    "section": "Regarding absences",
    "text": "Regarding absences\n\nIf you miss a lecture for any reasons, understand that you are still responsible for the missed course materials. First, review the missed materials, then you may attend the instructor office hours to ask specific questions.\nAttendance is not monitored in lecture except on the exam dates.\nEmory College of Arts and Sciences policy states, “A student who fails to take any required midterm or final examination at the scheduled time may not make up the examination without written permission from a dean in the Office for Undergraduate Education. Permission will be granted only for illness or other compelling reasons, such as participation in scheduled events off-campus as an official representative of the University."
  },
  {
    "objectID": "syllabus_old.html#access-and-disability-resources",
    "href": "syllabus_old.html#access-and-disability-resources",
    "title": "Syllabus: QTM 350 - Data Science Computing",
    "section": "Access and Disability Resources",
    "text": "Access and Disability Resources\nStudents with medical/health conditions that might impact academic success should visit the Department of Accessibility Services (DAS) to determine eligibility for appropriate accommodations. Students who receive accommodations must contact the instructor with an Accommodation Letter from the DAS at the beginning of the semester, or as soon as the accommodation is granted. If you have DAS accommodations, you must inform the instructor after confirming that your accommodation letter is available in the DAS web portal. The instructor will respond to your email confirming which accommodations you will receive for this class. If you wish to do so, you may request an individual meeting to further discuss the specific accommodations."
  },
  {
    "objectID": "syllabus_old.html#subject-to-change-policy",
    "href": "syllabus_old.html#subject-to-change-policy",
    "title": "Syllabus: QTM 350 - Data Science Computing",
    "section": "Subject to Change Policy",
    "text": "Subject to Change Policy\nWhile I will try to adhere to the course schedule as much as possible, I also want to adapt to your learning pace and style. The syllabus and course plan may change in the semester."
  },
  {
    "objectID": "syllabus_old.html#schedule",
    "href": "syllabus_old.html#schedule",
    "title": "Syllabus: QTM 350 - Data Science Computing",
    "section": "Schedule",
    "text": "Schedule"
  }
]